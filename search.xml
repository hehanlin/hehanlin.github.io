<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[解脱了]]></title>
      <url>/2017/12/24/%E8%A7%A3%E8%84%B1%E4%BA%86/</url>
      <content type="html"><![CDATA[<p>考完了，解脱了，仿佛出狱了一样，不出意外的糟糕，没啥，以后日子接着走，没啥。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[不定期停更]]></title>
      <url>/2017/06/30/%E4%B8%8D%E5%AE%9A%E6%9C%9F%E5%81%9C%E6%9B%B4/</url>
      <content type="html"><![CDATA[<p>期末考试结束，心里还是放不下考研的事情，老师说，放不下就去试试吧，别以后后悔。</p>
<p>试试就试试吧，心里别留遗憾，考不上也没啥，哈哈，反正败仗也有好多次了，不差这一次。</p>
<p>从今天到12月24日晚，博客可能会不定期停更，没有完成的系列我会抽时间补上。</p>
<p>有些事总得给自己个交代。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[socket--实现]]></title>
      <url>/2017/06/15/socket-%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>Socket 作为一种通用的技术规范，首次是由 Berkeley 大学在 1983 为 4.2BSD Unix 提供的，后来逐渐演化为 POSIX 标准。Socket API 是由操作系统提供的一个编程接口，让应用程序可以控制使用 socket 技术。Unix 哲学中有一条一切皆为文件，所以 socket 和 file 的 API 使用很类似：可以进行read、write、open、close等操作。</p>
<a id="more"></a>
<p>现在的网络系统是分层的，理论上有OSI模型，工业界有TCP/IP协议簇。其对比如下：</p>
<p><img src="/images/imagesocketq1.png" alt="upload successful"><br>每层上都有其相应的协议，socket API 不属于TCP/IP协议簇，只是操作系统提供的一个用于网络编程的接口，工作在应用层与传输层之间：</p>
<p><img src="/images/imagesocketq2.png" alt="upload successful"><br>我们平常浏览网站所使用的http协议，收发邮件用的smtp与imap，都是基于 socket API 构建的。</p>
<p>一个 socket，包含两个必要组成部分：</p>
<ol>
<li>地址，由 ip 与 端口组成，像192.168.0.1:80。</li>
<li>协议，socket 所是用的传输协议，目前有三种：TCP、UDP、raw IP。</li>
</ol>
<p>地址与协议可以确定一个socket；一台机器上，只允许存在一个同样的socket。TCP 端口 53 的 socket 与 UDP 端口 53 的 socket 是两个不同的 socket。</p>
<p>根据 socket 传输数据方式的不同（使用协议不同），可以分为以下三种：</p>
<p>Stream sockets，也称为“面向连接”的 socket，使用 TCP 协议。实际通信前需要进行连接，传输的数据没有特定的结构，所以高层协议需要自己去界定数据的分隔符，但其优势是数据是可靠的。<br>Datagram sockets，也称为“无连接”的 socket，使用 UDP 协议。实际通信前不需要连接，一个优势时 UDP 的数据包自身是可分割的（self-delimiting），也就是说每个数据包就标示了数据的开始与结束，其劣势是数据不可靠。</p>
<p>Raw sockets，通常用在路由器或其他网络设备中，这种 socket 不经过TCP/IP协议簇中的传输层（transport layer），直接由网络层（Internet layer）通向应用层（Application layer），所以这时的数据包就不会包含 tcp 或 udp 头信息。</p>
<p><img src="/images/imagesocketq3.png" alt="upload successful"></p>
<h3 id="Python-socket-API"><a href="#Python-socket-API" class="headerlink" title="Python socket API"></a>Python socket API</h3><p>Python 里面用(ip, port)的元组来表示 socket 的地址属性，用AF_*来表示协议类型。<br>数据通信有两组动词可供选择：send/recv 或 read/write。</p>
<blockquote>
<p>read/write 操作的具有 buffer 的“文件”，所以在进行读写后需要调用flush方法去真正发送或读取数据，否则数据会一直停留在缓冲区内。</p>
<h4 id="TCP-socket"><a href="#TCP-socket" class="headerlink" title="TCP socket"></a>TCP socket</h4><p>TCP socket 由于在通向前需要建立连接，所以其模式较 UDP socket 负责些。具体如下：</p>
</blockquote>
<p><img src="/images/imagesocketq4.png" alt="upload successful"><br>每个API 的具体含义这里不在赘述，可以查看手册，这里给出 Python 语言的实现的 echo server。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># echo_server.py</span></span><br><span class="line"><span class="comment"># coding=utf8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 设置 SO_REUSEADDR 后,可以立即使用 TIME_WAIT 状态的 socket</span></span><br><span class="line">sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">sock.bind((<span class="string">''</span>, <span class="number">5500</span>))</span><br><span class="line">sock.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler</span><span class="params">(client_sock, addr)</span>:</span></span><br><span class="line">    print(<span class="string">'new client from %s:%s'</span> % addr)</span><br><span class="line">    msg = client_sock.recv(<span class="number">1024</span>)</span><br><span class="line">    client_sock.send(msg)</span><br><span class="line">    client_sock.close()</span><br><span class="line">    print(<span class="string">'client[%s:%s] socket closed'</span> % addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        client_sock, addr = sock.accept()</span><br><span class="line">        handler(client_sock, addr)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># echo_client.py</span></span><br><span class="line"><span class="comment"># coding=utf8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">sock.connect((<span class="string">''</span>, <span class="number">5500</span>))</span><br><span class="line">sock.send(<span class="string">'hello socket world'</span>)</span><br><span class="line"><span class="keyword">print</span> sock.recv(<span class="number">1024</span>)</span><br></pre></td></tr></table></figure>
<p>上面简单的echo server 代码中有一点需要注意的是：server 端的 socket 设置了SO_REUSEADDR为1，目的是可以立即使用处于TIME_WAIT状态的socket，那么TIME_WAIT又是什么意思呢？后面在讲解 tcp 状态变更图时再做详细介绍。</p>
<h4 id="UDP-socket"><a href="#UDP-socket" class="headerlink" title="UDP socket"></a>UDP socket</h4><p><img src="/images/imagesocketq5.png" alt="upload successful"><br>UDP socket server 端代码在进行bind后，无需调用listen方法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># udp_echo_server.py</span></span><br><span class="line"><span class="comment"># coding=utf8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"><span class="comment"># 设置 SO_REUSEADDR 后,可以立即使用 TIME_WAIT 状态的 socket</span></span><br><span class="line">sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">sock.bind((<span class="string">''</span>, <span class="number">5500</span>))</span><br><span class="line"><span class="comment"># 没有调用 listen</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        data, addr = sock.recvfrom(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'new client from %s:%s'</span> % addr)</span><br><span class="line">        sock.sendto(data, addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># udp_echo_client.py</span></span><br><span class="line"><span class="comment"># coding=utf8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">udp_server_addr = (<span class="string">''</span>, <span class="number">5500</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">    data_to_sent = <span class="string">'hello udp socket'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sent = sock.sendto(data_to_sent, udp_server_addr)</span><br><span class="line">        data, server = sock.recvfrom(<span class="number">1024</span>)</span><br><span class="line">        print(<span class="string">'receive data:[%s] from %s:%s'</span> % ((data,) + server))</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        sock.close()</span><br></pre></td></tr></table></figure></p>
<h4 id="常见陷阱"><a href="#常见陷阱" class="headerlink" title="常见陷阱"></a>常见陷阱</h4><h5 id="忽略返回值"><a href="#忽略返回值" class="headerlink" title="忽略返回值"></a>忽略返回值</h5><p>本文中的 echo server 示例因为篇幅限制，也忽略了返回值。网络通信是个非常复杂的问题，通常无法保障通信双方的网络状态，很有可能在发送/接收数据时失败或部分失败。所以有必要对发送/接收函数的返回值进行检查。本文中的 tcp echo client 发送数据时，正确写法应该如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">total_send = <span class="number">0</span></span><br><span class="line">content_length = len(data_to_sent)</span><br><span class="line"><span class="keyword">while</span> total_send &lt; content_length:</span><br><span class="line">    sent = sock.send(data_to_sent[total_send:])</span><br><span class="line">    <span class="keyword">if</span> sent == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">"socket connection broken"</span>)</span><br><span class="line">    total_send += total_send + sent</span><br></pre></td></tr></table></figure></p>
<p>send/recv操作的是网络缓冲区的数据，它们不必处理传入的所有数据。</p>
<blockquote>
<p>一般来说，当网络缓冲区填满时，send函数就返回了；当网络缓冲区被清空时，recv 函数就返回。<br>当 recv 函数返回0时，意味着对端已经关闭。</p>
</blockquote>
<p>可以通过下面的方式设置缓冲区大小。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, buffer_size)</span><br></pre></td></tr></table></figure></p>
<h5 id="认为-TCP-具有-framing"><a href="#认为-TCP-具有-framing" class="headerlink" title="认为 TCP 具有 framing"></a>认为 TCP 具有 framing</h5><p>TCP 不提供 framing，这使得其很适合于传输数据流。这是其与 UDP 的重要区别之一。UDP 是一个面向消息的协议，能保持一条消息在发送者与接受者之间的完备性。</p>
<p><img src="/images/imagesocketq6.png" alt="upload successful"></p>
<h4 id="TCP-的状态机"><a href="#TCP-的状态机" class="headerlink" title="TCP 的状态机"></a>TCP 的状态机</h4><p>在前面echo server 的示例中，提到了TIME_WAIT状态，为了正式介绍其概念，需要了解下 TCP 从生成到结束的状态机器。</p>
<p><img src="/images/imagesocketq7.png" alt="upload successful"><br>这个状图转移图非常非常关键，也比较复杂，我自己为了方便记忆，对这个图进行了拆解，仔细分析这个图，可以得出这样一个结论，连接的打开与关闭都有被动（passive）与主动（active）两种，主动关闭时，涉及到的状态转移最多，包括FIN_WAIT_1、FIN_WAIT_2、CLOSING、TIME_WAIT。</p>
<p>此外，由于 TCP 是可靠的传输协议，所以每次发送一个数据包后，都需要得到对方的确认（ACK），有了上面这两个知识后，再来看下面的图：</p>
<p><img src="/images/imagesocketq8.png" alt="upload successful"></p>
<ol>
<li>在主动关闭连接的 socket 调用 close方法的同时，会向被动关闭端发送一个 FIN</li>
<li>对端收到FIN后，会向主动关闭端发送ACK进行确认，这时被动关闭端处于 CLOSE_WAIT 状态</li>
<li>当被动关闭端调用close方法进行关闭的同时向主动关闭端发送 FIN 信号，接收到 FIN 的主动关闭端这时就处于 TIME_WAIT 状态</li>
<li>这时主动关闭端不会立刻转为 CLOSED 状态，而是需要等待 2MSL（max segment life，一个数据包在网络传输中最大的生命周期），以确保被动关闭端能够收到最后发出的 ACK。如果被动关闭端没有收到最后的 ACK，那么被动关闭端就会重新发送 FIN，所以处于TIME_WAIT的主动关闭端会再次发送一个 ACK 信号，这么一来（FIN来）一回（ACK），正好是两个 MSL 的时间。如果等待的时间小于 2MSL，那么新的socket就可以收到之前连接的数据。</li>
</ol>
<p>前面 echo server 的示例也说明了，处于 TIME_WAIT 并不是说一定不能使用，可以通过设置 socket 的 SO_REUSEADDR 属性以达到不用等待 2MSL 的时间就可以复用socket 的目的，当然，这仅仅适用于测试环境，正常情况下不要修改这个属性。</p>
<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><h5 id="HTTP-UA"><a href="#HTTP-UA" class="headerlink" title="HTTP UA"></a>HTTP UA</h5><p>http 协议是如今万维网的基石，可以通过 socket API 来简单模拟一个浏览器（UA）是如何解析 HTTP 协议数据的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">baidu_ip = socket.gethostbyname(<span class="string">'baidu.com'</span>)</span><br><span class="line">sock.connect((baidu_ip, <span class="number">80</span>))</span><br><span class="line">print(<span class="string">'connected to %s'</span> % baidu_ip)</span><br><span class="line"></span><br><span class="line">req_msg = [</span><br><span class="line">    <span class="string">'GET / HTTP/1.1'</span>,</span><br><span class="line">    <span class="string">'User-Agent: curl/7.37.1'</span>,</span><br><span class="line">    <span class="string">'Host: baidu.com'</span>,</span><br><span class="line">    <span class="string">'Accept: */*'</span>,</span><br><span class="line">]</span><br><span class="line">delimiter = <span class="string">'\r\n'</span></span><br><span class="line"></span><br><span class="line">sock.send(delimiter.join(req_msg))</span><br><span class="line">sock.send(delimiter)</span><br><span class="line">sock.send(delimiter)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'%sreceived%s'</span> % (<span class="string">'-'</span>*<span class="number">20</span>, <span class="string">'-'</span>*<span class="number">20</span>))</span><br><span class="line">http_response = sock.recv(<span class="number">4096</span>)</span><br><span class="line">print(http_response)</span><br></pre></td></tr></table></figure></p>
<p>运行上面的代码可以得到下面的输出<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">--------------------received--------------------</span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Server: Apache</span><br><span class="line">ETag: <span class="string">"51-47cf7e6ee8400"</span></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: <span class="number">81</span></span><br><span class="line">Cache-Control: max-age=<span class="number">86400</span></span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text/html</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"refresh"</span> content=<span class="string">"0;url=http://www.baidu.com/"</span>&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p>http_response是通过直接调用recv(4096)得到的，万一真正的返回大于这个值怎么办？我们前面知道了 TCP 协议是面向流的，它本身并不关心消息的内容，需要应用程序自己去界定消息的边界，对于应用层的 HTTP 协议来说，有几种情况，最简单的一种时通过解析返回值头部的Content-Length属性，这样就知道body的大小了，对于 HTTP 1.1版本，支持Transfer-Encoding: chunked传输，对于这种格式，这里不在展开讲解，大家只需要知道， TCP 协议本身无法区分消息体就可以了。</p>
<h5 id="Unix-domain-socket"><a href="#Unix-domain-socket" class="headerlink" title="Unix_domain_socket"></a>Unix_domain_socket</h5><p>UDS 用于同一机器上不同进程通信的一种机制，其API适用与 network socket 很类似。只是其连接地址为本地文件而已。</p>
<h5 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h5><p>ping 命令作为检测网络联通性最常用的工具，其适用的传输协议既不是TCP，也不是 UDP，而是 ICMP，利用 raw sockets，我们可以适用纯 Python 代码来实现其功能。</p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[5.12]]></title>
      <url>/2017/05/12/5-12/</url>
      <content type="html"><![CDATA[<h4 id="今天是5月12日，我依旧记得-原-的样子，他回四川的时候说要去找他的奶奶和爷爷，然后我再也没有见过他，我把他送到车站，然而他的背影却成了最后的画面，总想着有机会能去绵阳一趟。"><a href="#今天是5月12日，我依旧记得-原-的样子，他回四川的时候说要去找他的奶奶和爷爷，然后我再也没有见过他，我把他送到车站，然而他的背影却成了最后的画面，总想着有机会能去绵阳一趟。" class="headerlink" title="今天是5月12日，我依旧记得 原 的样子，他回四川的时候说要去找他的奶奶和爷爷，然后我再也没有见过他，我把他送到车站，然而他的背影却成了最后的画面，总想着有机会能去绵阳一趟。"></a>今天是5月12日，我依旧记得 原 的样子，他回四川的时候说要去找他的奶奶和爷爷，然后我再也没有见过他，我把他送到车站，然而他的背影却成了最后的画面，总想着有机会能去绵阳一趟。</h4><h4 id="初中的我，闭塞，不善言语，脾气不好，那时你是我与这个世界通气的唯一窗户。今年这天有点小雨，没有那时那么闷热，我记得你前一星期和我说一定要去北京看奥运会，我以为你和我开玩笑。现在想想，我觉得我回你一句我陪你去也好。"><a href="#初中的我，闭塞，不善言语，脾气不好，那时你是我与这个世界通气的唯一窗户。今年这天有点小雨，没有那时那么闷热，我记得你前一星期和我说一定要去北京看奥运会，我以为你和我开玩笑。现在想想，我觉得我回你一句我陪你去也好。" class="headerlink" title="初中的我，闭塞，不善言语，脾气不好，那时你是我与这个世界通气的唯一窗户。今年这天有点小雨，没有那时那么闷热，我记得你前一星期和我说一定要去北京看奥运会，我以为你和我开玩笑。现在想想，我觉得我回你一句我陪你去也好。"></a>初中的我，闭塞，不善言语，脾气不好，那时你是我与这个世界通气的唯一窗户。今年这天有点小雨，没有那时那么闷热，我记得你前一星期和我说一定要去北京看奥运会，我以为你和我开玩笑。现在想想，我觉得我回你一句我陪你去也好。</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[socket--原理]]></title>
      <url>/2017/05/08/socket-%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol>
<li>什么是socket？<br>套接字（socket）是通信的基石，是支持TCP/IP协议的网络通信的基本操作单元。它是网络通信过程中端点的抽象表示，包含进行网络通信必须的五种信息：连接使用的协议，本地主机的IP地址，本地进程的协议端口，远地主机的IP地址，远地进程的协议端口。<br>应用层通过传输层进行数据通信时，TCP会遇到同时为多个应用程序进程提供并发服务的问题。多个TCP连接或多个应用程序进程可能需要通过同一个 TCP协议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与TCP／IP协议交互提供了套接字(Socket)接口。应用层可以和传输层通过Socket接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务（socket是应用层与传输层之间的一个抽象层，它把TCP/IP层复杂的操作抽象为几个简单的接口供应用层调用已实现进程在网络中通信。）</li>
</ol>
<a id="more"></a>
<ol>
<li>与TCP/IP的关系<br>简单来讲，socket与tcp/ip没有必然的联系，只是tcp/ip提供的一个编程接口，socket的出现只是可以更方便的使用TCP/IP协议栈而已，其对TCP/IP进行了抽象，形成了几个最基本的函数接口。比如create，listen，accept，connect，read和write等等。</li>
</ol>
<h3 id="通信过程"><a href="#通信过程" class="headerlink" title="通信过程"></a>通信过程</h3><p>socket是”打开—读/写—关闭”模式的实现，以使用TCP协议通讯的socket为例，其交互流程大概是这样子的</p>
<p><img src="/images/image-socket1.png" alt="socket condition"></p>
<h3 id="socket采用的模型"><a href="#socket采用的模型" class="headerlink" title="socket采用的模型"></a>socket采用的模型</h3><p>Socket是面向客户/服务器模型而设计的，针对客户和服务器程序提供不同的Socket系统调用。客户随机申请一个Socket（相当于一个想打电话的人可以在任何一台入网电话上拨号呼叫），系统为之分配一个Socket号；服务器拥有全局公认的Socket，任何客户都可以向它发出连接请求和信息请求（相当于一个被呼叫的电话拥有一个呼叫方知道的电话号码），解决了两个完全随机的用户进程之间建立通信。</p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h4><p>手机能够使用联网功能是因为手机底层实现了TCP/IP协议，可以使手机终端通过无线网络建立TCP连接。TCP协议可以对上层网络提供接口，使上层网络数据的传输建立在“无差别”的网络之上。<br>建立起一个TCP连接需要经过“三次握手”：</p>
<p>第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；<br>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；–<br>第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。</p>
<p>握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。断开连接时服务器和客户端均可以主动发起断开TCP连接的请求，断开过程需要经过“四次握手”（过程就不细写了，就是服务器和客户端交互，最终确定断开）</p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python--多进程]]></title>
      <url>/2017/05/02/python-%E5%A4%9A%E8%BF%9B%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>上节说到由于GIL（全局解释锁）的问题，多线程并不能充分利用多核处理器，如果是一个CPU计算型的任务，应该使用多进程模块 multiprocessing 。它的工作方式与线程库完全不同，但是两种库的语法却非常相似。multiprocessing给每个进程赋予单独的Python解释器，这样就规避了全局解释锁所带来的问题。但是也别高兴的太早，因为你会遇到接下来说到的一些多进程之间通信的问题。</p>
<a id="more"></a>
<p>我们首先把上节的例子改成单进程和多进程的方式来对比下性能：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">import</span> time</span><br><span class="line">        start = time.time()</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">        end   = time.time()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'COST: &#123;&#125;'</span>.format(end - start)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n&lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@profile</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nomultiprocess</span><span class="params">()</span>:</span></span><br><span class="line">    fib(<span class="number">35</span>)</span><br><span class="line">    fib(<span class="number">35</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@profile</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hasmultiprocess</span><span class="params">()</span>:</span></span><br><span class="line">    jobs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        p = multiprocessing.Process(target=fib, args=(<span class="number">35</span>,))</span><br><span class="line">        p.start()</span><br><span class="line">        jobs.append(p)</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> jobs:</span><br><span class="line">        p.join()</span><br><span class="line">        </span><br><span class="line">nomultiprocess()</span><br><span class="line">hasmultiprocess()</span><br></pre></td></tr></table></figure></p>
<p>运行的结果还不错：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ python profile_process.py</span><br><span class="line">COST: 4.66861510277</span><br><span class="line">COST: 2.5424861908</span><br></pre></td></tr></table></figure></p>
<p>虽然多进程让效率差不多翻了倍，但是需要注意，其实这个时间就是2个执行fib(35)，最慢的那个进程的执行时间而已。不管怎么说，GIL的问题算是极大的缓解了。</p>
<h3 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h3><p>有一点要强调：任务的执行周期决定于CPU核数和任务分配算法。上面例子中hasmultiprocess函数的用法非常中规中矩且常见，但是我认为更好的写法是使用Pool，也就是对应线程池的进程池:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line">pool = Pool(<span class="number">2</span>)</span><br><span class="line">pool.map(fib, [<span class="number">35</span>] * <span class="number">2</span>)</span><br></pre></td></tr></table></figure></p>
<p>其中map方法用起来和内置的map函数一样，却有多进程的支持。</p>
<h3 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h3><p>multiprocessing的Lock、Condition、Event、RLock、Semaphore等同步原语和threading模块的机制是一样的，用法也类似。</p>
<h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3><p>进程通信主要有以下几种方式：</p>
<ul>
<li>共享内存</li>
<li>管道（pipe, fifo）</li>
<li>消息队列（queue）</li>
<li>socket（TCP/IP）</li>
<li>远程过程调用（rpc）</li>
<li>此外，python也有对以上方式的高级封装manger模块，可用于简单的代理模式，以及分布式进程通信。</li>
</ul>
<p>以下一一阐述：</p>
<h4 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h4><p>主要通过Value或者Array来实现。常见的共享的有以下几种：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In : from multiprocessing.sharedctypes import typecode_to_type</span><br><span class="line">In : typecode_to_type</span><br><span class="line">Out:</span><br><span class="line">&#123;'B': ctypes.c_ubyte,</span><br><span class="line"> 'H': ctypes.c_ushort,</span><br><span class="line"> 'I': ctypes.c_uint,</span><br><span class="line"> 'L': ctypes.c_ulong,</span><br><span class="line"> 'b': ctypes.c_byte,</span><br><span class="line"> 'c': ctypes.c_char,</span><br><span class="line"> 'd': ctypes.c_double,</span><br><span class="line"> 'f': ctypes.c_float,</span><br><span class="line"> 'h': ctypes.c_short,</span><br><span class="line"> 'i': ctypes.c_int,</span><br><span class="line"> 'l': ctypes.c_long,</span><br><span class="line"> 'u': ctypes.c_wchar&#125;</span><br></pre></td></tr></table></figure></p>
<p>而且共享的时候还可以给Value或者Array传递lock参数来决定是否带锁，如果不指定默认为RLock。</p>
<p>我们看一个例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Lock</span><br><span class="line"><span class="keyword">from</span> multiprocessing.sharedctypes <span class="keyword">import</span> Value, Array</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> Structure, c_bool, c_double</span><br><span class="line">lock = Lock()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">(Structure)</span>:</span></span><br><span class="line">    _fields_ = [(<span class="string">'x'</span>, c_double), (<span class="string">'y'</span>, c_double)]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify</span><span class="params">(n, b, s, arr, A)</span>:</span></span><br><span class="line">    n.value **= <span class="number">2</span></span><br><span class="line">    b.value = <span class="keyword">True</span></span><br><span class="line">    s.value = s.value.upper()</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> A:</span><br><span class="line">        a.x **= <span class="number">2</span></span><br><span class="line">        a.y **= <span class="number">2</span></span><br><span class="line">n = Value(<span class="string">'i'</span>, <span class="number">7</span>)</span><br><span class="line">b = Value(c_bool, <span class="keyword">False</span>, lock=<span class="keyword">False</span>)</span><br><span class="line">s = Array(<span class="string">'c'</span>, <span class="string">'hello world'</span>, lock=lock)</span><br><span class="line">arr = Array(<span class="string">'i'</span>, range(<span class="number">5</span>), lock=<span class="keyword">True</span>)</span><br><span class="line">A = Array(Point, [(<span class="number">1.875</span>, <span class="number">-6.25</span>), (<span class="number">-5.75</span>, <span class="number">2.0</span>)], lock=lock)</span><br><span class="line">p = Process(target=modify, args=(n, b, s, arr, A))</span><br><span class="line">p.start()</span><br><span class="line">p.join()</span><br><span class="line"><span class="keyword">print</span> n.value</span><br><span class="line"><span class="keyword">print</span> b.value</span><br><span class="line"><span class="keyword">print</span> s.value</span><br><span class="line"><span class="keyword">print</span> arr[:]</span><br><span class="line"><span class="keyword">print</span> [(a.x, a.y) <span class="keyword">for</span> a <span class="keyword">in</span> A]</span><br></pre></td></tr></table></figure></p>
<p>有2点需要注意：</p>
<ul>
<li>并不是只支持typecode_to_type中指定那些类型，只要在ctypes里面的类型就可以。</li>
<li>arr是一个int的数组，但是和array模块生成的数组以及list是不一样的，它是一个SynchronizedArray对象，支持的方法很有限，比如append/extend等方法是没有的。<br>输出结果如下：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">❯ python shared_memory.py</span><br><span class="line">49</span><br><span class="line">True</span><br><span class="line">HELLO WORLD</span><br><span class="line">[10, 1, 2, 3, 4]</span><br><span class="line">[(3.515625, 39.0625), (33.0625, 4.0)]</span><br></pre></td></tr></table></figure>
<h4 id="管道（pipe-fifo）"><a href="#管道（pipe-fifo）" class="headerlink" title="管道（pipe, fifo）"></a>管道（pipe, fifo）</h4><h5 id="1-pipe无名管道"><a href="#1-pipe无名管道" class="headerlink" title="1. pipe无名管道"></a>1. pipe无名管道</h5><p>管道是Linux中很重要的一种通信方式，是把一个程序的输出直接连接到另一个程序的输入，无名管道只能用于具有亲缘关系的进程之间，这是它与有名管道的最大区别。管道是Linux支持的最初Unix IPC形式之一，具有以下特点</p>
<ol>
<li>管道是半双工的，数据只能向一个方向流动; 需要双方通信时，需要建立起两个管道  </li>
<li>只能用于父子进程或者兄弟进程之间(具有亲缘关系的进程)</li>
<li>单独构成一种独立的文件系统: 管道对于管道两端的进程而言，就是一个文件，但它不是普通的文件，它不属于某种文件系统，而是自立门户，单独构成一种文件系统，并且只存在与内存中 </li>
<li>数据的读出和写入: 一个进程向管道中写的内容被管道另一端的进程读出。写入的内容每次都添加在管道缓冲区的末尾，并且每次都是从缓冲区的头部读出数据 </li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pipe</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(conn)</span>:</span></span><br><span class="line">    conn.send([<span class="string">'hello'</span>])</span><br><span class="line">    conn.close()</span><br><span class="line">    </span><br><span class="line">parent_conn, child_conn = Pipe()</span><br><span class="line">p = Process(target=f, args=(child_conn,))</span><br><span class="line">p.start()</span><br><span class="line"><span class="keyword">print</span> parent_conn.recv()</span><br><span class="line">p.join()</span><br></pre></td></tr></table></figure>
<p>其中Pipe返回的是管道2边的对象：「父连接」和「子连接」。当子连接发送一个带有hello字符串的列表，父连接就会收到，所以parent_conn.recv()就会打印出来。这样就可以简单的实现在多进程之间传输Python内置的数据结构了。</p>
<h5 id="2-fifo命名管道"><a href="#2-fifo命名管道" class="headerlink" title="2. fifo命名管道"></a>2. fifo命名管道</h5><p>命名管道使用文件系统，由mkfifo()方法创建。一旦创建了，两个独立的进程都可以访问它，一个读，另外一个写。</p>
<p>命名管道支持阻塞读和阻塞写操作： 如果一个进程打开文件读，它会阻塞直到另外一个进程写。 但是我们可以指定O_NONBLOCK选项来启用非阻塞模式。</p>
<p>命名管道必须以只读或者只写的模式打开，它不能以读+写的模式打开，因为它时单向通信。如果要实现双向通信，必须打开两个命名管道。<br>看下面例子：</p>
<p><em>pipe_test_1.py</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> cPickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#communicate with another process through named pipe</span></span><br><span class="line"><span class="comment">#one for receive command, the other for send command</span></span><br><span class="line"></span><br><span class="line">wfPath = <span class="string">"./p1"</span></span><br><span class="line">rfPath = <span class="string">"./p2"</span></span><br><span class="line"></span><br><span class="line">wp = open(wfPath, <span class="string">'w'</span>)</span><br><span class="line">wp.write(<span class="string">"P1: How are you?"</span>)        </span><br><span class="line">wp.close()</span><br><span class="line"></span><br><span class="line">rp = open(rfPath, <span class="string">'r'</span>)</span><br><span class="line">response = rp.read()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"P1 hear %s"</span> % response</span><br><span class="line">rp.close()</span><br><span class="line"></span><br><span class="line">wp = open(wfPath, <span class="string">'w'</span>)</span><br><span class="line">wp.write(<span class="string">"P1: I'm fine too."</span>)       </span><br><span class="line">wp.close()</span><br></pre></td></tr></table></figure></p>
<p><em>pipe_test_2.py</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> cPickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#communicate with another process through named pipe</span></span><br><span class="line"><span class="comment">#one for receive command, the other for send command</span></span><br><span class="line"></span><br><span class="line">rfPath = <span class="string">"./p1"</span></span><br><span class="line">wfPath = <span class="string">"./p2"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    os.mkfifo(wfPath)</span><br><span class="line">    os.mkfifo(rfPath)</span><br><span class="line"><span class="keyword">except</span> OSError:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">rp = open(rfPath, <span class="string">'r'</span>)</span><br><span class="line">response = rp.read()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"P2 hear %s"</span> % response</span><br><span class="line">rp.close()</span><br><span class="line"></span><br><span class="line">wp = open(wfPath, <span class="string">'w'</span>)</span><br><span class="line">wp.write(<span class="string">"P2: I'm fine, thank you! And you?"</span>)       </span><br><span class="line">wp.close()</span><br><span class="line"></span><br><span class="line">rp = open(rfPath, <span class="string">'r'</span>)</span><br><span class="line">response = rp.read()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"P2 hear %s"</span> % response</span><br><span class="line">rp.close()</span><br></pre></td></tr></table></figure></p>
<p>运行上面的例子代码需要：</p>
<ol>
<li>打开一个终端, 运行 pipe_test_2.py</li>
<li>启动另一个终端，运行pipe_test_1.py</li>
</ol>
<p>需要注意要先执行pipe_test_2.py 否则会报错，打不开管道。</p>
<h4 id="消息队列（queue）"><a href="#消息队列（queue）" class="headerlink" title="消息队列（queue）"></a>消息队列（queue）</h4><p>多线程有Queue模块实现队列，多进程模块也包含了Queue类，它是线程和进程安全的。现在我们给下面的生产者/消费者的例子添加点难度，也就是用2个队列：一个队列用于存储待完成的任务，另外一个用于存储任务完成后的结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, JoinableQueue, Queue</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">tasks_queue = JoinableQueue()</span><br><span class="line">results_queue = Queue()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n * <span class="number">2</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(in_queue)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        wt = random()</span><br><span class="line">        time.sleep(wt)</span><br><span class="line">        in_queue.put((double, wt))</span><br><span class="line">        <span class="keyword">if</span> wt &gt; <span class="number">0.9</span>:</span><br><span class="line">            in_queue.put(<span class="keyword">None</span>)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'stop producer'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(in_queue, out_queue)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        task = in_queue.get()</span><br><span class="line">        <span class="keyword">if</span> task <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        func, arg = task</span><br><span class="line">        result = func(arg)</span><br><span class="line">        in_queue.task_done()</span><br><span class="line">        out_queue.put(result)</span><br><span class="line">        </span><br><span class="line">processes = []</span><br><span class="line">p = Process(target=producer, args=(tasks_queue,))</span><br><span class="line">p.start()</span><br><span class="line">processes.append(p)</span><br><span class="line"></span><br><span class="line">p = Process(target=consumer, args=(tasks_queue, results_queue))</span><br><span class="line">p.start()</span><br><span class="line">processes.append(p)</span><br><span class="line"></span><br><span class="line">tasks_queue.join()</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">    p.join()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> results_queue.empty():</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    result = results_queue.get()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Result:'</span>, result</span><br></pre></td></tr></table></figure></p>
<p>咋眼看去，和线程的那个队列例子已经变化很多了：</p>
<ul>
<li>生产者已经不会持续的生产任务了，如果随机到的结果大于0.9就会给任务队列tasks_queue put一个None，然后把循环结束掉</li>
<li>消费者如果收到一个值为None的任务，就结束，否则执行从tasks_queue获取的任务，并把结果put进results_queue</li>
<li>生产者和消费者都结束后（又join方法保证），从results_queue挨个获取执行结果并打印出来</li>
</ul>
<p>进程的Queue类并不支持task_done和join方法，需要使用特别的JoinableQueue，而搜集结果的队列results_queue使用Queue就足够了。</p>
<h4 id="socket（TCP-IP）"><a href="#socket（TCP-IP）" class="headerlink" title="socket（TCP/IP）"></a>socket（TCP/IP）</h4><p>我会专门列一个关于socket的专题出来整理，此处不在阐述。</p>
<h4 id="远程过程调用（rpc）"><a href="#远程过程调用（rpc）" class="headerlink" title="远程过程调用（rpc）"></a>远程过程调用（rpc）</h4><p>RPC是一个应用层的协议，分为client端和server端，server端写好了具体的函数实现，client端远程调用该函数，返回函数的结果。<br>其实底层依旧是socket。<br>看以下例子：</p>
<p><em>Server code</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xmlrpc.server <span class="keyword">import</span> SimpleXMLRPCServer</span><br><span class="line"><span class="keyword">from</span> xmlrpc.server <span class="keyword">import</span> SimpleXMLRPCRequestHandler</span><br><span class="line"></span><br><span class="line"><span class="comment"># Restrict to a particular path.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestHandler</span><span class="params">(SimpleXMLRPCRequestHandler)</span>:</span></span><br><span class="line">    rpc_paths = (<span class="string">'/RPC2'</span>,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create server</span></span><br><span class="line"><span class="keyword">with</span> SimpleXMLRPCServer((<span class="string">"localhost"</span>, <span class="number">8000</span>),</span><br><span class="line">                        requestHandler=RequestHandler) <span class="keyword">as</span> server:</span><br><span class="line">    server.register_introspection_functions()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Register pow() function; this will use the value of</span></span><br><span class="line">    <span class="comment"># pow.__name__ as the name, which is just 'pow'.</span></span><br><span class="line">    server.register_function(pow)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Register a function under a different name</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adder_function</span><span class="params">(x,y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    server.register_function(adder_function, <span class="string">'add'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Register an instance; all the methods of the instance are</span></span><br><span class="line">    <span class="comment"># published as XML-RPC methods (in this case, just 'mul').</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyFuncs</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">mul</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line">    server.register_instance(MyFuncs())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Run the server's main loop</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure></p>
<p><em>client code</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xmlrpc.client</span><br><span class="line"></span><br><span class="line">s = xmlrpc.client.ServerProxy(<span class="string">'http://localhost:8000'</span>)</span><br><span class="line">print(s.pow(<span class="number">2</span>,<span class="number">3</span>))  <span class="comment"># Returns 2**3 = 8</span></span><br><span class="line">print(s.add(<span class="number">2</span>,<span class="number">3</span>))  <span class="comment"># Returns 5</span></span><br><span class="line">print(s.mul(<span class="number">5</span>,<span class="number">2</span>))  <span class="comment"># Returns 5*2 = 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Print list of available methods</span></span><br><span class="line">print(s.system.listMethods())</span><br></pre></td></tr></table></figure></p>
<h4 id="manager-模块"><a href="#manager-模块" class="headerlink" title="manager 模块"></a>manager 模块</h4><p>manger是进程间通信的高级封装模块，主要有以下：</p>
<ol>
<li>Namespace。创建一个可分享的命名空间。</li>
<li>Value/Array。和上面共享ctypes对象的方式一样。</li>
<li>dict/list。创建一个可分享的dict/list，支持对应数据结构的方法。</li>
<li>Condition/Event/Lock/Queue/Semaphore。创建一个可分享的对应同步原语的对象。</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager, Process</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify</span><span class="params">(ns, lproxy, dproxy)</span>:</span></span><br><span class="line">    ns.a **= <span class="number">2</span></span><br><span class="line">    lproxy.extend([<span class="string">'b'</span>, <span class="string">'c'</span>])</span><br><span class="line">    dproxy[<span class="string">'b'</span>] = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">manager = Manager()</span><br><span class="line">ns = manager.Namespace()</span><br><span class="line">ns.a = <span class="number">1</span></span><br><span class="line">lproxy = manager.list()</span><br><span class="line">lproxy.append(<span class="string">'a'</span>)</span><br><span class="line">dproxy = manager.dict()</span><br><span class="line">dproxy[<span class="string">'b'</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">p = Process(target=modify, args=(ns, lproxy, dproxy))</span><br><span class="line">p.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'PID:'</span>, p.pid</span><br><span class="line">p.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> ns.a</span><br><span class="line"><span class="keyword">print</span> lproxy</span><br><span class="line"><span class="keyword">print</span> dproxy</span><br></pre></td></tr></table></figure>
<p>在id为8341的进程中就可以修改共享状态了：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">❯ python manager.py</span><br><span class="line">PID: 8341</span><br><span class="line">1</span><br><span class="line">['a', 'b', 'c']</span><br><span class="line">&#123;'b': 0&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="分布式进程"><a href="#分布式进程" class="headerlink" title="分布式进程"></a>分布式进程</h3><p>有时候没有必要舍近求远的选择更复杂的方案，其实使用Manager和Queue就可以实现简单的分布式的不同服务器的不同进程间的通信（C/S模式）。</p>
<p>首先在远程服务器上写如下的一个程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing.managers <span class="keyword">import</span> BaseManager</span><br><span class="line"></span><br><span class="line">host = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">9030</span></span><br><span class="line">authkey = <span class="string">'secret'</span></span><br><span class="line"></span><br><span class="line">shared_list = []</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RemoteManager</span><span class="params">(BaseManager)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">RemoteManager.register(<span class="string">'get_list'</span>, callable=<span class="keyword">lambda</span>: shared_list)</span><br><span class="line">mgr = RemoteManager(address=(host, port), authkey=authkey)</span><br><span class="line"></span><br><span class="line">server = mgr.get_server()</span><br><span class="line">server.serve_forever()</span><br></pre></td></tr></table></figure></p>
<p>现在希望其他代理可以修改和获取到shared_list的值，那么写这么一个客户端程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing.managers <span class="keyword">import</span> BaseManager</span><br><span class="line"></span><br><span class="line">host = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">9030</span></span><br><span class="line">authkey = <span class="string">'secret'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RemoteManager</span><span class="params">(BaseManager)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">RemoteManager.register(<span class="string">'get_list'</span>)</span><br><span class="line">mgr = RemoteManager(address=(host, port), authkey=authkey)</span><br><span class="line">mgr.connect()</span><br><span class="line"></span><br><span class="line">l = mgr.get_list()</span><br><span class="line"><span class="keyword">print</span> l</span><br><span class="line">l.append(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> mgr.get_list()</span><br></pre></td></tr></table></figure></p>
<p>注意，在client上的注册没有添加callable参数。<br>此处有一个利用分布式进程实现的百科爬虫的小demo。<br>(<a href="https://github.com/hehanlin/baikeSpiderDistributed" target="_blank" rel="noopener">https://github.com/hehanlin/baikeSpiderDistributed</a>)</p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python--多线程]]></title>
      <url>/2017/04/15/python-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>多进程和多线程都可以执行多个任务，我们先介绍多线程。<br>线程是进程的一部分。线程的特点是线程之间可以共享内存和变量，资源消耗少（不过在Unix环境中，多进程和多线程资源调度消耗差距不明显，Unix调度较快）。python使用操作系统提供的内核级线程一比一模型，但是有一把GIL.<br><a id="more"></a></p>
<h3 id="GIL"><a href="#GIL" class="headerlink" title="GIL"></a>GIL</h3><p>Python（特指CPython）的多线程的代码并不能利用多核的优势，而是通过著名的全局解释锁（GIL）来进行处理的。如果是一个计算型的任务，使用多线程GIL就会让多线程变慢。我们举个计算斐波那契数列的例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">import</span> time</span><br><span class="line">        start = time.time()</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">        end   = time.time()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'COST: &#123;&#125;'</span>.format(end - start)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n&lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@profile</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nothread</span><span class="params">()</span>:</span></span><br><span class="line">    fib(<span class="number">35</span>)</span><br><span class="line">    fib(<span class="number">35</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@profile</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hasthread</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        t = threading.Thread(target=fib, args=(<span class="number">35</span>,))</span><br><span class="line">        t.start()</span><br><span class="line">        </span><br><span class="line">    main_thread = threading.currentThread()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threading.enumerate():</span><br><span class="line">        <span class="keyword">if</span> t <span class="keyword">is</span> main_thread:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        t.join()</span><br><span class="line">        </span><br><span class="line">nothread()</span><br><span class="line">hasthread()</span><br></pre></td></tr></table></figure></p>
<p>运行的结果你猜猜会怎么样：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ python profile_thread.py</span><br><span class="line">COST: 5.05716490746</span><br><span class="line">COST: 6.75599503517</span><br></pre></td></tr></table></figure></p>
<p>这种情况还不如不用多线程！</p>
<p>GIL是必须的，这是Python设计的问题：Python解释器是非线程安全的。这意味着当从线程内尝试安全的访问Python对象的时候将有一个全局的强制锁。 在任何时候，仅仅一个单一的线程能够获取Python对象或者C API。每100个字节的Python指令解释器将重新获取锁，这（潜在的）阻塞了I/O操作。因为锁，CPU密集型的代码使用线程库时，不会获得性能的提高（但是当它使用之后介绍的多进程库时，性能可以获得提高）。</p>
<p>那是不是由于GIL的存在，多线程库就是个「鸡肋」呢？当然不是。事实上我们平时会接触非常多的和网络通信或者数据输入/输出相关的程序，比如网络爬虫、文本处理等等。这时候由于网络情况和I/O的性能的限制，Python解释器会等待读写数据的函数调用返回，这个时候就可以利用多线程库提高并发效率了。</p>
<h3 id="同步机制"><a href="#同步机制" class="headerlink" title="同步机制"></a>同步机制</h3><p>如果多个线程共同对某个数据修改，则可能出现不可预料的结果，为了保证数据的正确性，需要对多个线程进行同步。</p>
<h4 id="1-Lock"><a href="#1-Lock" class="headerlink" title="(1)Lock"></a>(1)Lock</h4><p>Lock也可以叫做互斥锁，其实相当于信号量为1。我们先看一个不加锁的例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line">value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getlock</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> value</span><br><span class="line">    new = value + <span class="number">1</span></span><br><span class="line">    time.sleep(<span class="number">0.001</span>)  <span class="comment"># 使用sleep让线程有机会切换</span></span><br><span class="line">    value = new</span><br><span class="line">    </span><br><span class="line">threads = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    t = Thread(target=getlock)</span><br><span class="line">    t.start()</span><br><span class="line">    threads.append(t)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">    t.join()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">print</span> value</span><br></pre></td></tr></table></figure></p>
<p>执行一下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ python nolock.py</span><br><span class="line">16</span><br></pre></td></tr></table></figure></p>
<p>不加锁的情况下，结果会远远的小于100。很明显是错的，那我们加上互斥锁看看：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line">value = <span class="number">0</span></span><br><span class="line">lock = Lock()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getlock</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> value</span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        new = value + <span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">0.001</span>)</span><br><span class="line">        value = new</span><br><span class="line">        </span><br><span class="line">threads = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    t = Thread(target=getlock)</span><br><span class="line">    t.start()</span><br><span class="line">    threads.append(t)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">    t.join()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">print</span> value</span><br></pre></td></tr></table></figure></p>
<p>我们对value的自增加了锁，就可以保证了结果了：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ python lock.py</span><br><span class="line">100</span><br></pre></td></tr></table></figure></p>
<h4 id="2-RLock"><a href="#2-RLock" class="headerlink" title="(2)RLock"></a>(2)RLock</h4><p>RLock是可重入锁（自旋锁），提供和lock对象相同的方法，可重入锁的特点是：</p>
<ul>
<li>记录锁住自己的线程 t ，这样 t 可以多次调用 acquire() 方法而不会被阻塞，比如 t 可以多次声明自己对某个资源的需求。</li>
<li>可重入锁必须由锁住自己的线程释放（rl.release()）</li>
<li>rlock内部有一个计数器，只有锁住自己的线程 t 调用的 release() 方法和之前调用 acquire() 方法的次数相同时，才会真正解锁一个rlock。</li>
</ul>
<h4 id="3-Semaphore（信号量）"><a href="#3-Semaphore（信号量）" class="headerlink" title="(3)Semaphore（信号量）"></a>(3)Semaphore（信号量）</h4><p>信号量同步基于内部计数器，每调用一次acquire()，计数器减1；每调用一次release()，计数器加1.当计数器为0时，acquire()调用被阻塞。所以信号量可以对资源数量进行控制。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Semaphore</span><br><span class="line"></span><br><span class="line">sema = Semaphore(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(tid)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> sema:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'&#123;&#125; acquire sema'</span>.format(tid)</span><br><span class="line">        wt = random() * <span class="number">2</span></span><br><span class="line">        time.sleep(wt)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'&#123;&#125; release sema'</span>.format(tid)</span><br><span class="line">    </span><br><span class="line">threads = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    t = Thread(target=foo, args=(i,))</span><br><span class="line">    threads.append(t)</span><br><span class="line">    t.start()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">    t.join()</span><br></pre></td></tr></table></figure></p>
<p>这个例子中，我们限制了同时能访问资源的数量为3。看一下执行的效果：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">❯ python semaphore.py</span><br><span class="line">0 acquire sema</span><br><span class="line">1 acquire sema</span><br><span class="line"> 2 acquire sema</span><br><span class="line">2 release sema</span><br><span class="line"> 3 acquire sema</span><br><span class="line">1 release sema</span><br><span class="line"> 4 acquire sema</span><br><span class="line">0 release sema</span><br><span class="line">3 release sema</span><br><span class="line">4 release sema</span><br></pre></td></tr></table></figure></p>
<h4 id="4-Condition（条件）"><a href="#4-Condition（条件）" class="headerlink" title="(4)Condition（条件）"></a>(4)Condition（条件）</h4><p>一个线程等待特定条件，而另一个线程发出特定条件满足的信号。最好说明的例子就是「生产者/消费者」模型：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(cond)</span>:</span></span><br><span class="line">    t = threading.currentThread()</span><br><span class="line">    <span class="keyword">with</span> cond:</span><br><span class="line">        cond.wait()  <span class="comment"># wait()方法创建了一个名为waiter的锁，并且设置锁的状态为locked。这个waiter锁用于线程间的通讯</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'&#123;&#125;: Resource is available to consumer'</span>.format(t.name)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(cond)</span>:</span></span><br><span class="line">    t = threading.currentThread()</span><br><span class="line">    <span class="keyword">with</span> cond:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'&#123;&#125;: Making resource available'</span>.format(t.name)</span><br><span class="line">        cond.notifyAll()  <span class="comment"># 释放waiter锁，唤醒消费者</span></span><br><span class="line">        </span><br><span class="line">condition = threading.Condition()</span><br><span class="line">c1 = threading.Thread(name=<span class="string">'c1'</span>, target=consumer, args=(condition,))</span><br><span class="line">c2 = threading.Thread(name=<span class="string">'c2'</span>, target=consumer, args=(condition,))</span><br><span class="line">p = threading.Thread(name=<span class="string">'p'</span>, target=producer, args=(condition,))</span><br><span class="line">c1.start()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">c2.start()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">p.start()</span><br></pre></td></tr></table></figure></p>
<p>执行一下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ python condition.py</span><br><span class="line">p: Making resource available</span><br><span class="line">c2: Resource is available to consumer</span><br><span class="line">c1: Resource is available to consumer</span><br></pre></td></tr></table></figure>
<p>可以看到生产者发送通知之后，消费者都收到了。</p>
<h4 id="5-Event"><a href="#5-Event" class="headerlink" title="(5)Event"></a>(5)Event</h4><p>Event对象可以让任何数量的线程暂停和等待，event 对象对应一个 True 或 False 的状态（flag），刚创建的event对象的状态为False。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line">TIMEOUT = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(event, l)</span>:</span></span><br><span class="line">    t = threading.currentThread()</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        event_is_set = event.wait(TIMEOUT)</span><br><span class="line">        <span class="keyword">if</span> event_is_set:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                integer = l.pop()</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'&#123;&#125; popped from list by &#123;&#125;'</span>.format(integer, t.name)</span><br><span class="line">                event.clear()  <span class="comment"># 重置事件状态</span></span><br><span class="line">            <span class="keyword">except</span> IndexError:  <span class="comment"># 为了让刚启动时容错</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">                </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(event, l)</span>:</span></span><br><span class="line">    t = threading.currentThread()</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        integer = randint(<span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">        l.append(integer)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'&#123;&#125; appended to list by &#123;&#125;'</span>.format(integer, t.name)</span><br><span class="line">        event.set()	 <span class="comment"># 设置事件</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">event = threading.Event()</span><br><span class="line">l = []</span><br><span class="line">threads = []</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> (<span class="string">'consumer1'</span>, <span class="string">'consumer2'</span>):</span><br><span class="line">    t = threading.Thread(name=name, target=consumer, args=(event, l))</span><br><span class="line">    t.start()</span><br><span class="line">    threads.append(t)</span><br><span class="line">    </span><br><span class="line">p = threading.Thread(name=<span class="string">'producer1'</span>, target=producer, args=(event, l))</span><br><span class="line">p.start()</span><br><span class="line">threads.append(p)</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">    t.join()</span><br></pre></td></tr></table></figure></p>
<p>执行的效果是这样的：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">77 appended to list by producer1</span><br><span class="line">77 popped from list by consumer1</span><br><span class="line">46 appended to list by producer1</span><br><span class="line">46 popped from list by consumer2</span><br><span class="line">43 appended to list by producer1</span><br><span class="line">43 popped from list by consumer2</span><br><span class="line">37 appended to list by producer1</span><br><span class="line">37 popped from list by consumer2</span><br><span class="line">33 appended to list by producer1</span><br><span class="line">33 popped from list by consumer2</span><br><span class="line">57 appended to list by producer1</span><br><span class="line">57 popped from list by consumer1</span><br></pre></td></tr></table></figure></p>
<p>可以看到事件被2个消费者比较平均的接收并处理了。如果使用了wait方法，线程就会等待我们设置事件，这也有助于保证任务的完成。</p>
<h4 id="6-Queue（线程通信的常用手段）"><a href="#6-Queue（线程通信的常用手段）" class="headerlink" title="(6)Queue（线程通信的常用手段）"></a>(6)Queue（线程通信的常用手段）</h4><p>队列在并发开发中最常用的。我们借助「生产者/消费者」模式来理解：生产者把生产的「消息」放入队列，消费者从这个队列中对去对应的消息执行。</p>
<p>大家主要关心如下4个方法就好了：</p>
<ul>
<li>put: 向队列中添加一个项。</li>
<li>get: 从队列中删除并返回一个项。</li>
<li>task_done: 当某一项任务完成时调用。</li>
<li>join: 阻塞直到所有的项目都被处理完。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line">q = Queue()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n * <span class="number">2</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        wt = random()</span><br><span class="line">        time.sleep(wt)</span><br><span class="line">        q.put((double, wt))</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        task, arg = q.get()</span><br><span class="line">        <span class="keyword">print</span> arg, task(arg)</span><br><span class="line">        q.task_done()</span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span> target <span class="keyword">in</span>(producer, consumer):</span><br><span class="line">    t = threading.Thread(target=target)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure>
<p>这就是最简化的队列架构。</p>
<p>Queue模块还自带了PriorityQueue（带有优先级）和LifoQueue（后进先出）2种特殊队列。我们这里展示下线程安全的优先级队列的用法，<br>PriorityQueue要求我们put的数据的格式是(priority_number, data)，我们看看下面的例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> Queue <span class="keyword">import</span> PriorityQueue</span><br><span class="line">q = PriorityQueue()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n * <span class="number">2</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">()</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        pri = randint(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'put :&#123;&#125;'</span>.format(pri)</span><br><span class="line">        q.put((pri, double, pri))  <span class="comment"># (priority, func, args)</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> q.empty():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        pri, task, arg = q.get()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[PRI:&#123;&#125;] &#123;&#125; * 2 = &#123;&#125;'</span>.format(pri, arg, task(arg))</span><br><span class="line">        q.task_done()</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        </span><br><span class="line">t = threading.Thread(target=producer)</span><br><span class="line">t.start()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">t = threading.Thread(target=consumer)</span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure></p>
<p>其中消费者是故意让它执行的比生产者慢很多，为了节省篇幅，只随机产生5次随机结果。我们看下执行的效果：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">❯ python priority_queue.py</span><br><span class="line">put :84</span><br><span class="line">put :86</span><br><span class="line">put :16</span><br><span class="line">put :93</span><br><span class="line">put :14</span><br><span class="line">put :93</span><br><span class="line">[PRI:14] 14 * 2 = 28</span><br><span class="line">[PRI:16] 16 * 2 = 32</span><br><span class="line">[PRI:84] 84 * 2 = 168</span><br><span class="line">[PRI:86] 86 * 2 = 172</span><br><span class="line">[PRI:93] 93 * 2 = 186</span><br><span class="line">[PRI:93] 93 * 2 = 186</span><br></pre></td></tr></table></figure></p>
<p>可以看到put时的数字是随机的，但是get的时候先从优先级更高（数字小表示优先级高）开始获取的。</p>
<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>面向对象开发中，大家知道创建和销毁对象是很费时间的，因为创建一个对象要获取内存资源或者其它更多资源。无节制的创建和销毁线程是一种极大的浪费。那我们可不可以把执行完任务的线程不销毁而重复利用呢？仿佛就是把这些线程放进一个池子，一方面我们可以控制同时工作的线程数量，一方面也避免了创建和销毁产生的开销。</p>
<p>线程池在标准库中其实是有体现的，只是在官方文章中基本没有被提及：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In : from multiprocessing.dummy import Pool as ThreadPool</span><br><span class="line">In : pool = ThreadPool(5)</span><br><span class="line">In : pool.map(lambda x: x**2, range(5))</span><br><span class="line">Out: [0, 1, 4, 9, 16]</span><br></pre></td></tr></table></figure></p>
<p>当然我们也可以自己实现一个：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n * <span class="number">2</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, queue)</span>:</span></span><br><span class="line">        super(Worker, self).__init__()</span><br><span class="line">        self._q = queue</span><br><span class="line">        self.daemon = <span class="keyword">True</span></span><br><span class="line">        self.start()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            f, args, kwargs = self._q.get()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'USE: &#123;&#125;'</span>.format(self.name)  <span class="comment"># 线程名字</span></span><br><span class="line">                <span class="keyword">print</span> f(*args, **kwargs)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">print</span> e</span><br><span class="line">            self._q.task_done()</span><br><span class="line">            </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_t=<span class="number">5</span>)</span>:</span></span><br><span class="line">        self._q = Queue(num_t)</span><br><span class="line">        <span class="comment"># Create Worker Thread</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(num_t):</span><br><span class="line">            Worker(self._q)</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_task</span><span class="params">(self, f, *args, **kwargs)</span>:</span></span><br><span class="line">        self._q.put((f, args, kwargs))</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wait_complete</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._q.join()</span><br><span class="line">        </span><br><span class="line">pool = ThreadPool()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    wt = random()</span><br><span class="line">    pool.add_task(double, wt)</span><br><span class="line">    time.sleep(wt)</span><br><span class="line">    </span><br><span class="line">pool.wait_complete()</span><br></pre></td></tr></table></figure></p>
<p>执行一下:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">USE: Thread-1</span><br><span class="line">1.58762376489</span><br><span class="line">USE: Thread-2</span><br><span class="line">0.0652918738849</span><br><span class="line">USE: Thread-3</span><br><span class="line">0.997407997138</span><br><span class="line">USE: Thread-4</span><br><span class="line">1.69333900685</span><br><span class="line">USE: Thread-5</span><br><span class="line">0.726900613676</span><br><span class="line">USE: Thread-1</span><br><span class="line">1.69110052253</span><br><span class="line">USE: Thread-2</span><br><span class="line">1.89039743989</span><br><span class="line">USE: Thread-3</span><br><span class="line">0.96281118122</span><br></pre></td></tr></table></figure></p>
<p>线程池会保证同时提供5个线程工作，但是我们有8个待完成的任务，可以看到线程按顺序被循环利用了。</p>
<p>### </p>
<h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><p>当不想将变量共享给其他线程时，可以使用局部变量，但在函数中定义局部变量会使得在函数之间传递特别麻烦。ThreadLocal是非常牛逼的东西，它解决了全局变量需要枷锁，局部变量传递麻烦的两个问题。通过在线程中定义：<br>local_school = threading.local()<br>此时这个local_school就变成了一个全局变量，但这个全局变量只在该线程中为全局变量，对于其他线程来说是局部变量，别的线程不可更改。 def process_thread(name):# 绑定ThreadLocal的student: local_school.student = name</p>
<p>这个student属性只有本线程可以修改，别的线程不可以。代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">local = threading.local()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'current thread:%s'</span> % threading.currentThread().name</span><br><span class="line">    local.name = name</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"%s in %s"</span> % (local.name,threading.currentThread().name)</span><br><span class="line">    </span><br><span class="line">t1 = threading.Thread(target=func,args=(<span class="string">'haibo'</span>,))</span><br><span class="line">t2 = threading.Thread(target=func,args=(<span class="string">'lina'</span>,))</span><br><span class="line"></span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br></pre></td></tr></table></figure></p>
<p>从代码中也可以看到，可以将ThreadLocal理解成一个dict,可以绑定不同变量。<br>ThreadLocal用的最多的地方就是每一个线程处理一个HTTP请求，在Flask框架中利用的就是该原理，它使用的是基于Werkzeug的LocalStack。<br>end！！！</p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[线程的三种实现模型]]></title>
      <url>/2017/04/02/%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%89%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%A8%A1%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h3 id="线程定义"><a href="#线程定义" class="headerlink" title="线程定义"></a>线程定义</h3><p>什么是线程？《POSIX Threads Programming》中有一段话对线程的定义进行描述：</p>
<blockquote>
<p>A thread is defined as an independent stream of instructions that can be scheduled to run as such by the operating system.</p>
</blockquote>
<p>线程可以被认为是一个可以被独立调度的实体，这个实体共享进程的地址空间、文件描述符、代码和数据，且拥有自己私有的栈、寄存器上下文、和程序计数器。<br><a id="more"></a></p>
<h3 id="为什么要线程"><a href="#为什么要线程" class="headerlink" title="为什么要线程"></a>为什么要线程</h3><p>我们在 github 上面给开源项目提交代码的时候，按照 comment 格式都要写 Motivation 这部分，我们今天讨论线程这个存在，也要讨论线程为什么存在。</p>
<p>在很多应用中需要同时执行多个任务，这些任务大部分甚至全部都可以相互独立的并行的执行。比如一个网络代理，传统的实现是用一个进程作为监听器来监听网络端口，当有客户端连接进来的时候，当前进程将会 fork 一个新的进程来处理客户端的请求。这种体系结构不好的地方如下：</p>
<ul>
<li>fork 系统调用对于操作系统来说是一个非常重的操作。</li>
<li>每一个进程都有自己独立的地址空间，进程间相互通信必须要通过标准的 IPC 技术来实现，比如信号量、共享内存，这些操作是非常昂贵的、严重影响系统性能。</li>
</ul>
<p>线程的出现就是为了解决这些问题，线程之间拥有共享的进程空间用于共享数据、也有自己独立的运行空间类似一个轻量级的进程。</p>
<h3 id="用户空间与内核空间"><a href="#用户空间与内核空间" class="headerlink" title="用户空间与内核空间"></a>用户空间与内核空间</h3><p>在理解用户线程与内核线程之前、我们有必要了解一下用户空间与内核空间。现代操作系统的地址空间主要基于虚拟地址空间机制设计，和实际物理内存大小没关系，比如对于 32 位操作系统，它的寻址空间为 2 的 32 次方也就是 4G，这里的寻址空间被称为虚拟存储空间。操作系统的核心是内核，独立于普通应用程序，具有最高权限，可以访问底层硬件设备以及受保护的空间，因此这部分包括驱动程序和操作系统。操作系统的设计者为了保证内核的安全，将用户进程设计为只有一定权限的程序，它不能够操作内核以及硬件。操作系统将虚拟存储空间划分为两部分，一部分是内核空间，一部分是用户空间。针对 Linux 操作系统而言，最高的 1G 字节供内核使用，称为内核空间，较低的 3G 字节供给各个进程使用，被称为用户空间。进程可以通过系统调用进入内核，Linux 内核由所有进程共享。用户空间和内核空间示意图如下：</p>
<p><img src="/images/image_threadsdafasdfsd.png" alt="upload successful"></p>
<h3 id="用户态与内核态"><a href="#用户态与内核态" class="headerlink" title="用户态与内核态"></a>用户态与内核态</h3><p>每个进程都拥有所有的虚拟地址空间，当进程运行用户代码的时候是运行在用户地址空间的，这时候 CPU 运行所需要的指令和数据都保存在用户空间，进程可以认为是指令 + 数据 + CPU，因此这个时候我们把这个状态的进程叫做用户进程。当用户执行系统调用而陷入内核代码中执行的时候，当前进程运行的指令和数据都在内核空间，因此我们把这个状态的进程叫内核进程。用户进程和内核进程不是独立的两个进程的意思，而是进程运行的不同状态。值得注意的是，用户进程不能访问内核虚拟地址空间，内核进程可以访问全部的虚拟地址空间，因此用户进程和内核进程进行数据交换只能通过内核进程从用户地址空间取数据，然后放入用户地址空间。</p>
<p>系统调用涉及到进程从用户态到内核态的切换（mode switch），这个时候涉及到的切换主要是寄存器上下文的切换，和通常所说的进程上下文切换不同，mode switch 的消耗相对要小很多。</p>
<h3 id="用户线程与内核线程"><a href="#用户线程与内核线程" class="headerlink" title="用户线程与内核线程"></a>用户线程与内核线程</h3><p>上面可以看出，用户线程与内核线程的区别主要在于指令与数据运行于不同虚拟地址空间，用户线程和内核线程也可以叫做用户空间线程和内核空间线程。用户线程由用户代码支持，内核线程由操作系统内核支持。</p>
<h3 id="线程上下文切换"><a href="#线程上下文切换" class="headerlink" title="线程上下文切换"></a>线程上下文切换</h3><p>线程上下文切换和线程模态切换不是一个维度的东东，线程上下文切换讲的是多线程之间因为调度器的调度，而从一个线程正在被调度切换到另外一个线程被调度的事情。线程上下文切换必须要保存线程执行的寄存器状态、栈信息、线程正文、数据等，因此相对模态切换是比较重的操作。</p>
<h3 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h3><p>线程模型在不同的操作系统下的实现通常有三种，每种模型都有其优点与缺点，下面我们来看看这三种线程模型。</p>
<h4 id="用户空间线程模型（M-1）"><a href="#用户空间线程模型（M-1）" class="headerlink" title="用户空间线程模型（M : 1）"></a>用户空间线程模型（M : 1）</h4><p>一个多线程子系统有可能全部由用户代码实现，这些线程的调度与切换全部发生在用户地址空间，这种模型通常是由一个内核线程和多个用户线程组成。典型的实现是基于 POSIX 线程 draft 4，OSF’DCE 是其中一种具体实现。一个用户空间库负责线程的创建、终止、调度与同步。这些线程对于操作系统内核是透明的。</p>
<p>这种模型的好处是线程上下文切换都发生在用户空间，避免的模态切换（mode switch），从而对于性能有积极的影响。然而不好的地方是所有的线程基于一个内核调度实体即内核线程，这意味着只有一个处理器可以被利用，在多处理环境下这是不能够被接受的，本质上，用户线程只解决了并发问题，但是没有解决并行问题。</p>
<p>还有一点，如果线程因为 I/O 操作陷入了内核态，内核态线程阻塞等待 I/O 数据，则所有的线程都将会被阻塞，用户空间也可以使用非阻塞而 I/O，但是还是有性能及复杂度问题。</p>
<p><img src="/images/image_thread12dssfsdsaf.png" alt="upload successful"></p>
<p>内核空间线程模型（1：1）<br>对于用户空间线程模型，所有的用户线程都和特定的内核线程进行交互，而内核空间线程模型是每个用户线程都和一个特定的内核线程进行交互，用户线程和内核线程是 1：1 的关系。典型的实现是将每个用户线程映射到一个内核线程上。</p>
<p>每个线程由内核调度器独立的调度，所以如果一个线程阻塞则不影响其他的线程。然而，创建、终止和同步线程都会发生在内核地址空间，这可能会带来较大的性能问题。在创建线程的时候内核必须要进行内存锁的申请，并负责调度线程，而且每个线程都要消耗有限的内核资源，当大量的线程被创建的时候，体现的尤为明显。值得夸奖的是，在多核处理器的硬件的支持下，内核空间线程模型支持了真正的并行，下面是内核空间模型示意图：</p>
<p><img src="/images/image_thread34sdfasdf.png" alt="upload successful"></p>
<p>内核用户空间线程模型（M : N）<br>内核用户空间线程模型中，内核线程和用户线程的数量比为 M : N，因此也通常被叫做 M : N 线程模型，内核用户空间综合了前两种的优点。</p>
<p>这种模型需要内核线程调度器和用户空间线程调度器相互操作，本质上是多个线程被绑定到了多个内核线程上，这使得大部分的线程上下文切换都发生在用户空间，而多个内核线程又可以充分利用处理器资源，模型图如下：005851_eUxh_1759553</p>
<p>内核用户空间线程模型</p>
<p><img src="/images/image_thread46123123.png" alt="upload successful"></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[https概述]]></title>
      <url>/2017/02/28/https%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<p><img src="/images/pasted-0.png" alt="upload successful"></p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>在进行 HTTP 通信时，信息可能会监听、服务器或客户端身份伪装等安全问题，HTTPS 则能有效解决这些问题。在使用原始的HTTP连接的时候，因为服务器与用户之间是直接进行的明文传输，导致了用户面临着很多的风险与威胁。攻击者可以用中间人攻击来轻易的 截获或者篡改传输的数据。攻击者想要做些什么并没有任何的限制，包括窃取用户的Session信息、注入有害的代码等，乃至于修改用户传送至服务器的数据。<br><a id="more"></a><br>我们并不能替用户选择所使用的网络，他们很有可能使用一个开放的，任何人都可以窃听的网络，譬如一个咖啡馆或者机场里面的开放WiFi网络。普通的 用户很有可能被欺骗地随便连上一个叫免费热点的网络，或者使用一个可以随便被插入广告的网路当中。如果攻击者会窃听或者篡改网路中的数据，那么用户与服务 器交换的数据就好不可信了，幸好我们还可以使用HTTPS来保证传输的安全性。HTTPS最早主要用于类似于经融这样的安全要求较高的敏感网络，不过现在日渐被各种各样的网站锁使用，譬如我们常用的社交网络或者搜索引擎。 HTTPS协议使用的是TLS协议，一个优于SSL协议的标准来保障通信安全。只要配置与使用得当，就能有效抵御窃听与篡改，从而有效保护我们将要去访问 的网站。用更加技术化的方式说，HTTPS能够有效保障数据机密性与完整性，并且能够完成用户端与客户端的双重验证。</p>
<p>随着面临的风险日渐增多，我们应该将所有的网络数据当做敏感数据并且进行加密传输。已经有很多的浏览器厂商宣称要废弃所有的非HTTPS的请求，乃 至于当用户访问非HTTPS的网站的时候给出明确的提示。很多基于HTTP/2的实现都只支持基于TLS的通信，所以我们现在更应当在全部地方使用 HTTPS。目前如果要大范围推广使用HTTPS还是有一些障碍的，在一个很长的时间范围内使用HTTPS会被认为造成很多的计算资源的浪费，不过随着现代硬件 与浏览器的发展，这点计算资源已经不足为道。早期的SSL协议与TLS协议只支持一个IP地址分配一个整数，不过现在这种限制所谓的SNI的协议扩展来解 决。另外，从一个证书认证机构获取证书也会打消一些用户使用HTTPS的念头，不过下面我们介绍的像Let’s Encrypt这样的免费的服务就可以打破这种障碍。</p>
<h4 id="why-https"><a href="#why-https" class="headerlink" title="why https?"></a>why https?</h4><p>HTTP日常使用极为广泛的协议，它很优秀且方便，但还是存在一些问题，如：</p>
<ul>
<li>明文通信，内容可以直接被窃听</li>
<li>验证报文的完整性，可能被篡改</li>
<li>通信方身份不验证，可能遇到假的客户端或服务器</li>
<li>中间人攻击与内容窃听<br>HTTP 不会对请求和响应的内容进行加密，报文直接使用明文发送。报文在服务器与客户端流转中间，会经过若干个结点，这些结点中随时都可能会有窃听行为。因为通信一定会经过中间很多个结点，所以就算是报文经过了加密，也一样会被窃听到，不过是窃听到加密后的内容。要窃听相同段上的通信还是很简单的，比如可以使用常用的抓包工具 Wireshark。这种情况下，保护信息安全最常用的方式就是采取加密了，加密方式可以根据加密对象分以下几种：<br>（1）通信加密</li>
</ul>
<p>HTTP 协议基于 TCP/IP 协议族，它没有加密机制。但可以通过 SSL（Secure Socket Layer，安全套接层）建立安全的通信线路，再进行 HTTP 通信，这种与 SSL 结合使用的称为 HTTPS（HTTP Secure，超文本传安全协议）。</p>
<p>（2）内容加密</p>
<p>还可以对通信内容本身加密。HTTP 协议中没有加密机制，但可以对其传输的内容进行加密，也就是对报文内容进行加密。这种加密方式要求客户端对 HTTP 报文进行加密处理后再发送给服务器端，服务器端拿到加密后的报文再进行解密。这种加密方式不同于 SSL 将整个通信线路进行加密，所以它还是有被篡改的风险的。</p>
<p>报文篡改</p>
<p>（1）接收到的内容可能被做假</p>
<p>HTTP 协议是无法证明通信报文的完整性的。因此请求或响应在途中随时可能被篡改而不自知，也就是说，没有任何办法确认，发出的请求/响应和接收到的请求/响应是前后相同的。比如浏览器从某个网站上下载一个文件，它是无法确定下载的文件和服务器上有些话的文件是同一个文件的。文件在传输过程中被掉包了也是不知道的。这种请求或响应在传输途中，被拦截、篡改的攻击就是中间人攻击。比如某运营商或者某些DNS提供商会偷偷地在你的网页中插入广告脚本，就是典型的例子。</p>
<p>（2） 防篡改</p>
<p>也有一些 HTTP 协议确定报文完整性的方法，不过这些方法很不方便，也不太可靠。用得最多的就是 MD5 等散列值校验的方法。很多文件下载服务的网站都会提供相应文件的 MD5 散列值，一来得用户亲自去动手校验（中国估计只有 0.1% 不到的用户懂得怎么做吧），二来如果网站提供的 MD5 值也被改写的话呢？所以这种方法不方便也不可靠。</p>
<p>仿冒服务器/客户端</p>
<p>（1） DDOS攻击与钓鱼网站</p>
<p>在 HTTP 通信时，由于服务器不确认请求发起方的身份，所以任何设备都可以发起请求，服务器会对每一个接收到的请求进行响应（当然，服务器可以限制 IP 地址和端口号）。由于服务器会响应所有接收到的请求，所以有人就利用这一点，给服务器发起海量的无意义的请求，造成服务器无法响应正式的请求，这就是 Dos 攻击（Denial Of Service，拒绝服务攻击）。由于客户端也不会验证服务器是否真实，所以遇到来自假的服务器的响应时，客户端也不知道，只能交由人来判断。钓鱼网站就是利用了这一点。</p>
<p>（2） 身份认证</p>
<p>HTTP 协议无法确认通信方，而 SSL 则是可以的。SSL 不仅提供了加密处理，还提供了叫做“证书”的手段，用于确定通信方的身份。证书是由值得信任的第三方机构颁发（已获得社会认可的企业或组织机构）的，用以证明服务器和客户端的身份。而且伪造证书从目前的技术来看，是一件极为难的事情，所以证书往往可以确定通信方的身份。以客户端访问网页为例。客户端在开始通信之前，先向第三机机构确认 Web 网站服务器的证书的有效性，再得到其确认后，再开始与服务器进行通信。</p>
<h4 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h4><p>HTTPS = HTTP + 加密 + 认证 + 完整性保护，HTTPS 也就是 HTTP 加上加密处理、认证以及完整性保护。使用 HTTPS 通信时，用的是 <a href="https://，而不是" target="_blank" rel="noopener">https://，而不是</a> <a href="http://。另外，当浏览器访问" target="_blank" rel="noopener">http://。另外，当浏览器访问</a> HTTPS 的 Web 网站时，浏览器地址栏会出现一个带锁的标记。要注意，HTTPS 并非是应用层的新协议，而是 HTTP 通信接口部分用 SSL 协议代替而已。本来，HTTP 是直接基于 TCP 通信。在 HTTPS 中，它先和 SSL 通信，SSL 再和 TCP 通信。所以说 HTTPS 是披了层 SSL 外壳的 HTTP。SSL 是独立于 HTTP 的协议，所以其他类似于 HTTP 的应用层 SMTP 等协议都可以配合 SSL 协议使用，也可以给它们增强安全性。整个架构如下图所示：</p>
<p><img src="/images/pasted-1.png" alt="upload successful"></p>
<h4 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h4><p>HTTPS 使用 SSL 通信，所以它的处理速度会比 HTTP 要慢。</p>
<p>一是通信慢。它和 HTTP 相比，网络负载会变慢 2 到 100倍。除去和 TCP 连接、发送 HTTP 请求及响应外，还必须进行 SSL 通信，因此整体上处理通信量会不可避免的增加。</p>
<p>二是 SSL 必须进行加密处理。在服务器和客户端都需要进行加密和解密的去处处理。所以它比 HTTP 会更多地消耗服务器和客户端的硬件资源。</p>
<h3 id="SSL-TLS-Protocol"><a href="#SSL-TLS-Protocol" class="headerlink" title="SSL/TLS Protocol"></a>SSL/TLS Protocol</h3><p>SSL协议，是一种安全传输协议，最初是由 Netscape 在1996年发布，由于一些安全的原因SSL v1.0和SSL v2.0都没有公开，直到1996年的SSL v3.0。TLS是SSL v3.0的升级版，目前市面上所有的Https都是用的是TLS，而不是SSL。本文中很多地方混用了SSL与TLS这个名词，大家能够理解就好。</p>
<p>下图描述了在TCP/IP协议栈中TLS(各子协议）和HTTP的关系：</p>
<p><img src="/images/ssl_tls.png" alt="upload successful"><br>其中Handshake protocol，Change Ciper Spec protocol和Alert protocol组成了SSL Handshaking Protocols。</p>
<p>Record Protocol有三个连接状态(Connection State)，连接状态定义了压缩，加密和MAC算法。所有的Record都是被当前状态（Current State）确定的算法处理的。</p>
<p>TLS Handshake Protocol和Change Ciper Spec Protocol会导致Record Protocol状态切换。<br>初始当前状态（Current State）没有指定加密，压缩和MAC算法，因而在完成TLS Handshaking Protocols一系列动作之前，客户端和服务端的数据都是明文传输的；当TLS完成握手过程后，客户端和服务端确定了加密，压缩和MAC算法及其参数，数据（Record）会通过指定算法处理。</p>
<p>密码学原理</p>
<p>数据在传输过程中，很容易被窃听。加密就是保护数据安全的措施。一般是利用技术手段把数据变成乱码（加密）传送，到达目的地后，再利用对应的技术手段还原数据（解密）。加密包含算法和密钥两个元素。算法将要加密的数据与密钥（一串数字）相结合，产生不可理解的密文。由此可见，密钥与算法同样重要。对数据加密技术可以分为两类：对称加密（对称密钥加密）和非对称加密（非对称密钥加密）。SSL 采用了 非对称加密（Public-key cryptography）的加密处理方式。</p>
<p>现在的加密方法中，加密算法都是公开的，网上都有各种算法原理解析的内容。加密算法虽然是公开的，算法用到的密钥却是保密的，以此来保持加密方法的安全性。加密和解密都会用到密钥。有了密钥就可以解密了，如果密钥被攻击者获得，加密也就没有意义了。</p>
<p>对称加密/非公开密钥加密</p>
<p>对称加密的意思就是，加密数据用的密钥，跟解密数据用的密钥是一样的。对称加密的优点在于加密、解密效率通常比较高。缺点在于，数据发送方、数据接收方需要协商、共享同一把密钥，并确保密钥不泄露给其他人。此外，对于多个有数据交换需求的个体，两两之间需要分配并维护一把密钥，这个带来的成本基本是不可接受的。</p>
<p>非对称加密/公开密钥加密</p>
<p>非对称加密方式能很好地解决对称加密的困难。非对称加密方式有两把密钥。一把叫做私有密钥（private key），另一把叫做非对称（public key）。私有密钥是一方保管，而非对称则谁都可以获得。这种方式是需要发送密文的一方先获得对方的非对称，使用已知的算法进行加密处理。对方收到被加密的信息后，再使用自己的私有密钥进行解密。这种加密方式有意思是的加密算法的神奇，经过这个公开的算法加密后的密文，即使知道非对称，也是无法对密文还原的。要想对密文进行解决，必须要有私钥才行。所以非对称加密是非常安全的，即使窃听到密文和非对称，却还是无法进行解密。</p>
<blockquote>
<p>非对称加密算法用的一般是 RSA 算法（这可能是目前最重要的算法了）。这个算法由3个小伙子在1977年提出，它的主要原理是：将两个大素数相乘很简单，但想要这个乘积进行因式分解极其困难，因此可以将乘积公开作为非对称。不过随着目前的分布式计算和量子计算机的快速发展，说不定在将来也许能破解这个算法了。<br>证书</p>
</blockquote>
<p>在测试的时候我们可以自己创建配置一个证书用于HTTPS认证，不过如果你要提供服务给普通用户使用，那么还是需要从可信的第三方CA机构来获取可信的证 书。对于很多开发者而言，一个免费的CA证书是个不错的选择。当你搜索CA的时候，你可能会遇到几个不同等级的证书。最常见的就是Domain Validation(DV)，用于认证一个域名的所有者。再往上就是所谓的Organization Validation(OV)与Extended Validation(EV)，包括了验证这些证书的请求机构的信息。虽然高级别的证书需要额外的消耗，不过还是很值得的。</p>
<p>证书大概是这个样子：</p>
<p><img src="/images/image_ssl_cert.png" alt="upload successful"></p>
<ol>
<li>证书版本号(Version) 版本号指明X.509证书的格式版本，现在的值可以为：</li>
</ol>
<ul>
<li><p>v1</p>
</li>
<li><p>v2</p>
</li>
<li><p>v3<br>也为将来的版本进行了预定义</p>
</li>
</ul>
<p>证书序列号(Serial Number) 序列号指定由CA分配给证书的唯一的”数字型标识符”。当证书被取消时，实际上是将此证书的序列号放入由CA签发的CRL中，这也是序列号唯一的原因。</p>
<p>签名算法标识符(Signature Algorithm) 签名算法标识用来指定由CA签发证书时所使用的”签名算法”。算法标识符用来指定CA签发证书时所使用的：</p>
<p>公开密钥算法</p>
<p>hash算法，example: sha256WithRSAEncryption<br>须向国际知名标准组织(如ISO)注册</p>
<p>签发机构名(Issuer) 此域用来标识签发证书的CA的X.500 DN(DN-Distinguished Name)名字。包括：</p>
<ul>
<li><p>国家(C)</p>
</li>
<li><p>省市(ST)</p>
</li>
<li><p>地区(L)</p>
</li>
<li><p>组织机构(O)</p>
</li>
<li><p>单位部门(OU)</p>
</li>
<li><p>通用名(CN)</p>
</li>
<li><p>邮箱地址</p>
</li>
</ul>
<p>有效期(Validity) 指定证书的有效期，包括：</p>
<p>证书开始生效的日期时间</p>
<p>证书失效的日期和时间<br>每次使用证书时，需要检查证书是否在有效期内。</p>
<p>证书用户名(Subject) 指定证书持有者的X.500唯一名字。包括：</p>
<ul>
<li><p>国家(C)</p>
</li>
<li><p>省市(ST)</p>
</li>
<li><p>地区(L)</p>
</li>
<li><p>组织机构(O)</p>
</li>
<li><p>单位部门(OU)</p>
</li>
<li><p>通用名(CN)</p>
</li>
<li><p>邮箱地址</p>
</li>
</ul>
<p>证书持有者公开密钥信息(Subject Public Key Info) 证书持有者公开密钥信息域包含两个重要信息：</p>
<p>证书持有者的公开密钥的值</p>
<p>公开密钥使用的算法标识符。此标识符包含公开密钥算法和hash算法。</p>
<p>扩展项(extension) X.509 V3证书是在v2的基础上一标准形式或普通形式增加了扩展项，以使证书能够附带额外信息。标准扩展是指由X.509 V3版本定义的对V2版本增加的具有广泛应用前景的扩展项，任何人都可以向一些权威机构，如ISO，来注册一些其他扩展，如果这些扩展项应用广泛，也许以后会成为标准扩展项。</p>
<p>签发者唯一标识符(Issuer Unique Identifier) 签发者唯一标识符在第2版加入证书定义中。此域用在当同一个X.500名字用于多个认证机构时，用一比特字符串<br>来唯一标识签发者的X.500名字。可选。</p>
<p>证书持有者唯一标识符(Subject Unique Identifier) 持有证书者唯一标识符在第2版的标准中加入X.509证书定义。此域用在当同一个X.500名字用于多个证书持有者时，<br>用一比特字符串来唯一标识证书持有者的X.500名字。可选。</p>
<p>签名算法(Signature Algorithm) 证书签发机构对证书上述内容的签名算法，example: sha256WithRSAEncryption</p>
<p>签名值(Issuer’s Signature) 证书签发机构对证书上述内容的签名值</p>
<p>CA：第三方可信证书颁发机构</p>
<p>其实，非对称加密方式还存在一个很大的问题：它无法证明非对称本身是真实的非对称。比如，打算跟银行的服务器建立非对称加密方式的通信时，怎么证明收到的非对称就是该服务器的密钥呢？毕竟，要调包非对称是极为简单的。这时，数字证书认证机构（CA，Certificated Authority）就出场了。</p>
<p>数字证书认证机构是具有权威性、公正性的机构。它的业务流程是：首先，服务器的开发者向数字证书认证机构提出非对称（服务器非对称）的申请。数字证书认证机构在核实申请者的身份之后，会用自己的非对称（数字签名非对称）对申请的非对称做数字签名，再将 服务器非对称、数字签名以及申请者身份等信息放入公钥证书。服务器则将这份由数字证书认证机构颁发的公钥证书发送给客户端，以进行非对称加密方式通信。公钥证书也可做数字证书或简称为为证书。证书就相当于是服务器的身份证。</p>
<p>客户端接到证书后，使用 数字签名非对称 对数字签名进行验证，当验证通过时，也就证明了：1、真实有效的数字证书认证机构。2、真实有效的服务器非对称。然后就可能与服务器安全通信了。其实这里还是有一个问题的。那就是如何将 数字签名非对称 安全地转给客户端？难道再去另一个认证机制那确认（现在是真有的）？无疑，安全转交是一件困难的事。因此，常用的认证机关的非对称会被很多浏览器内置在里面。</p>
<p>Extended Validation SSL Certificate</p>
<p>证书作用这一是证明服务器是否规范，另一个作用是可以确认服务器背后的企业是否真实。具有这种特性的证书就是 EV SSL （Extended Validation SSL Certificate）证书。EV SSL 证书是基于国际标准的严格身份验证颁发的证书。通过认证的网站能获得更高的认可度。</p>
<p>EV SSL 证书在视觉上最大的特色在于激活浏览器的地址栏的背景色是绿色。而且在地址栏中显示了 SSL 证书中记录的组织名称。这个机制原本是为了防止用户被钓鱼攻击的，但效果如何还真不知道，目前来看，很多用户根本不清楚这是啥玩意儿。</p>
<p>EV SSL</p>
<p>混合加密</p>
<p>非对称加密很安全，但与对称加密相比，由于非对称加密的算法复杂性，导致它的加密和解密处理速度都比对称加密慢很多，效率很低。所以可以充分利用它们各自的优势，结合起来。先用非对称加密，交换对称加密会用的密钥，之后的通信交换则使用对称方式。这就是混合加密。</p>
<p>使用非对称加密方式安全地交换在稍后的对称加密中要使用的密钥</p>
<p>确保交换的密钥是安全的前提下，使用对称加密方式进行通信</p>
<p>而下面所讲的具体的SSL协议的过程就是混合加密的一种体现。</p>
<p>TLS HandShake</p>
<p>TLS的握手阶段是发生在TCP握手之后。握手实际上是一种协商的过程，对协议所必需的一些参数进行协商。</p>
<p><img src="/images/image_tls1.png" alt="upload successful"><br>上图中的方括号为可选信息。</p>
<p>握手过程</p>
<p>（1）Client Hello</p>
<p>由于客户端(如浏览器)对一些加解密算法的支持程度不一样，但是在TLS协议传输过程中必须使用同一套加解密算法才能保证数据能够正常的加解密。在TLS 握手阶段，客户端首先要告知服务端，自己支持哪些加密算法，所以客户端需要将本地支持的加密套件(Cipher Suite)的列表传送给服务端。除此之外，客户端还要产生一个随机数，这个随机数一方面需要在客户端保存，另一方面需要传送给服务端，客户端的随机数需 要跟服务端产生的随机数结合起来产生后面要讲到的Master Secret。</p>
<p>（2）Server Hello</p>
<p>从Server Hello到Server Done，有些服务端的实现是每条单独发送，有服务端实现是合并到一起发送。Sever Hello和Server Done都是只有头没有内容的数据。</p>
<p>服务端在接收到客户端的Client Hello之后，服务端需要将自己的证书发送给客户端。这个证书是对于服务端的一种认证。例如，客户端收到了一个来自于称自己是 www.alipay.com的数据，但是如何证明对方是合法的alipay支付宝呢？这就是证书的作用，支付宝的证书可以证明它是alipay，而不是 财付通。证书是需要申请，并由专门的数字证书认证机构(CA)通过非常严格的审核之后颁发的电子证书。颁发证书的同时会产生一个私钥和公钥。私钥由服务端 自己保存，不可泄漏。公钥则是附带在证书的信息中，可以公开的。证书本身也附带一个证书电子签名，这个签名用来验证证书的完整性和真实性，可以防止证书被 串改。另外，证书还有个有效期。</p>
<p>在服务端向客户端发送的证书中没有提供足够的信息的时候，还可以向客户端发送一个Server Key Exchange。 此外，对于非常重要的保密数据，服务端还需要对客户端进行验证，以保证数据传送给了安全的合法的客户端。服务端可以向客户端发出Cerficate Request消息，要求客户端发送证书对客户端的合法性进行验证。跟客户端一样，服务端也需要产生一个随机数发送给客户端。客户端和服务端都需要使用这两个随机数来产生Master Secret。</p>
<p>最后服务端会发送一个Server Hello Done消息给客户端，表示Server Hello消息结束了。</p>
<p>（3）Client Key Exchange</p>
<p>如果服务端需要对客户端进行验证，在客户端收到服务端的Server Hello消息之后，首先需要向服务端发送客户端的证书，让服务端来验证客户端的合法性。</p>
<p>在此之前的所有TLS握手信息都是明文传送的。在收到服务端的证书等信息之后，客户端会使用一些加密算法(例如：RSA, Diffie-Hellman)产生一个48个字节的Key，这个Key叫PreMaster Secret，很多材料上也被称作PreMaster Key, 最终通过Master secret生成session secret， session secret就是用来对应用数据进行加解密的。PreMaster secret属于一个保密的Key，只要截获PreMaster secret，就可以通过之前明文传送的随机数，最终计算出session secret，所以PreMaster secret使用RSA非对称加密的方式，使用服务端传过来的公钥进行加密，然后传给服务端。</p>
<p>接着，客户端需要对服务端的证书进行检查，检查证书的完整性以及证书跟服务端域名是否吻合。ChangeCipherSpec是一个独立的协议，体现在数据包中就是一个字节的数据，用于告知服务端，客户端已经切换到之前协商好的加密套件的状态，准备使用之前协商好的加密套件加密数据并传输了。在ChangecipherSpec传输完毕之后，客户端会使用之前协商好的加密套件和session secret加密一段Finish的数据传送给服务端，此数据是为了在正式传输应用数据之前对刚刚握手建立起来的加解密通道进行验证。</p>
<p>（4）Server Finish</p>
<p>服务端在接收到客户端传过来的PreMaster加密数据之后，使用私钥对这段加密数据进行解密，并对数据进行验证，也会使用跟 客户端同样的方式生成session secret，一切准备好之后，会给客户端发送一个ChangeCipherSpec，告知客户端已经切换到协商过的加密套件状态，准备使用加密套件和 session secret加密数据了。之后，服务端也会使用session secret加密后一段Finish消息发送给客户端，以验证之前通过握手建立起来的加解密通道是否成功。</p>
<p>根据之前的握手信息，如果客户端和服务端都能对Finish信息进行正常加解密且消息正确的被验证，则说明握手通道已经建立成功，接下来，双方可以使用上面产生的session secret对数据进行加密传输了。</p>
<p>基于RSA的握手</p>
<p><img src="/images/image_tls2.png" alt="upload successful"></p>
<ol>
<li><p>[明文] 客户端发送随机数client_random和支持的加密方式列表</p>
</li>
<li><p>[明文] 服务器返回随机数server_random ，选择的加密方式和服务器证书链</p>
</li>
<li><p>[RSA] 客户端验证服务器证书，使用证书中的公钥加密premaster secret 发送给服务端</p>
</li>
<li><p>服务端使用私钥解密premaster secret</p>
</li>
<li><p>两端分别通过client_random，server_random 和premaster secret 生成master secret，用于对称加密后续通信内容</p>
</li>
</ol>
<p>基于Diffie–Hellman的握手</p>
<p><img src="/images/image_tls3.png" alt="upload successful"></p>
<h3 id="HTTPS-Tools"><a href="#HTTPS-Tools" class="headerlink" title="HTTPS Tools"></a>HTTPS Tools</h3><h6 id="OpenSSL"><a href="#OpenSSL" class="headerlink" title="OpenSSL"></a>OpenSSL</h6><p>OpenSSL 是用 C 写的一套 SSL 和 TLS 开源实现。这也就意味着人人都可以基于这个构建属于自己的认证机构，然后给自己的颁发服务器证书。不过然并卵，其证书不可在互联网上作为证书使用。这种自认证机构给自己颁发的证书，叫做自签名证书。自己给自己作证，自然是算不得数的。所以浏览器在访问这种服务器时，会显示“无法确认连接安全性”等警告消息。</p>
<p>OpenSSL 在2014年4月，被爆出一个内存溢出引出的 BUG，骇客利用这点能拿到服务器很多信息，其中就包括私钥，也就使得 HTTPS 形同虚设。当时全世界大概有一百万左右的服务器有受到此漏洞的影响。由于 OpenSSL 举足轻重的作用，再加上足够致命的问题，使得这个 BUG 被形容为“互联网心脏出血”。这是近年来互联网最严重的安全事件。</p>
<p>记得OpenSSL的Heartbleed漏洞才出来的时候，笔者所在的安全公司忙成了一团糟，到处帮忙修补漏洞。</p>
<h6 id="Let’s-Encrypt-免费SSL"><a href="#Let’s-Encrypt-免费SSL" class="headerlink" title="Let’s Encrypt:免费SSL"></a>Let’s Encrypt:免费SSL</h6><p>Let’s Encrypt是由ISRG（Internet Security Research Group）提供的免费SSL项目，现由Linux基金会托管，他的来头很大，由Mozilla、思科、Akamai、IdenTrust和EFF等组织 发起，现在已经得到Google、Facebook等大公司的支持和赞助，目的就是向网站免费签发和管理证书，并且通过其自身的自动化过程，消除了购买、 安装证书的复杂性，只需几行命令，就可以完成证书的生成并投入使用，甚至十几分钟就可以让自己的http站点华丽转变成Https站点。</p>
<h3 id="使用证书"><a href="#使用证书" class="headerlink" title="使用证书"></a>使用证书</h3><p>如果是自己配置的Nginx的，需要以下配置 ：<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">server</span></span><br><span class="line">&#123;</span><br><span class="line">    listen <span class="number">443</span> ssl;   /</span><br><span class="line">    server_name xxx.com;     <span class="comment">//这里是你的域名</span></span><br><span class="line">    <span class="keyword">index</span> <span class="keyword">index</span>.html <span class="keyword">index</span>.htm <span class="keyword">index</span>.php <span class="keyword">default</span>.html <span class="keyword">default</span>.htm <span class="keyword">default</span>.php;</span><br><span class="line">    root /opt/wwwroot/        <span class="comment">//网站目录</span></span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/test.com/fullchain.pem;    <span class="comment">//前面生成的证书，改一下里面的域名就行，不建议更换路径</span></span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/test.com/privkey.pem;   <span class="comment">//前面生成的密钥，改一下里面的域名就行，不建议更换路径 </span></span><br><span class="line">    ........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[我这一年，下一年]]></title>
      <url>/2017/02/20/%E8%BF%99%E4%B8%80%E5%B9%B4%EF%BC%8C%E4%B8%8B%E4%B8%80%E5%B9%B4/</url>
      <content type="html"><![CDATA[<p>光阴似箭，日月如梭，2016年就这样急匆匆地走了，我21周岁了。<br><a id="more"></a><br>依旧记得上半年在理工大努力地复习高数，数据结构及C语言，尤其是数据结构地学习使我对编程的理解上了一个小台阶，仿佛田老师还在给我们讲课，她画的一系列原理图历历在目，功夫不负有心人，6月份我以第一名的成绩考回了吕院，也算是弥补了三年高中没好好读书的恶果。</p>
<p>6月中旬来到北京，进入智电互动实习，接触了工作了十余年的技术总监，帅帅的产品经理，来自名校科班出身的学生，在北京将近两个月的生活，让我进一步认清了自己，我更对自己抱有信心，同时认识到自己必须增强与人沟通能力，要与人为善，与人为伴，尽早展示出自己的leadership。</p>
<p>9月份，我回到吕院读计算机科学与技术专业，乔说我们的时间很短，望同学们珍惜，我对此深表认同，只是对于只能自学的环境稍有抱怨，但环境就是这样，我相信越努力越幸运这句话。</p>
<p>上半学期主要学习了操作系统，计算机网络，以及python这门语言，时间赶得很紧，有收获有遗憾，操作系统理论课程紧跟着清华大学向勇老师的mooc走了一遍，遗憾的是并没有实现ucore实验操作系统。计算机网络跟着哈尔滨工业大学李全龙老师的mooc，结合《TCP/IP详解：卷一》。对这两门理论课程的学习促进了我对于python中并发模型（多线程，多进程，协程）以及网络编程（socket，http，dns，email，ftp，wsgi等）的理解，在python中的一系列实践反哺理论课的深度理解。</p>
<p>期末考试的结果有点不满意，操作系统只考了80.86分，或许与自己过于注重理解原理而缺少题型训练不无关系，java考了95分，java的课程基本没听过，但结果也是意料之中的。</p>
<p>假期之前同舍友一起去陕西游玩，华山的险，骊山之秀，兵马俑的壮观，华清宫之丽，舍友之情，历历在目。</p>
<p>寒假来到，每天三点一线，陪着白发苍苍的爷爷唠嗑散步，陪我那位女士去吃遍家乡的美食，而下午和晚上则会继续鼓捣专业知识，读了郭欣老师的《构建高性能web站点》，斯坦福的《数据库系统基础教程》，感受到了关系代数的魅力，并找了一系列的sql测试题，测试自己编写复杂sql的能力，对之前不懂的触发器，存储过程，函数一一排查，学会为止。</p>
<p>总结下来，2016年的我，不算努力，不算堕落，倒也对得起父母的辛苦。</p>
<p>开学第一天了，学校依旧如常，我并没有加入考研的队伍，究其原因，我觉得现在的我依旧没有想清楚考上研究生竟要做什么，大城市的生活依旧吸引着我，或许过几年我又会回到母校，重走考研之路。不管怎样，选择没有对错，自己选的路就要义无反顾地走下去。</p>
<h3 id="2017年有如下事必须要做："><a href="#2017年有如下事必须要做：" class="headerlink" title="2017年有如下事必须要做："></a>2017年有如下事必须要做：</h3><ol>
<li>学习英语，至少要能读懂英文文档。</li>
<li>算法分析课程。</li>
<li>大数据课程。</li>
<li>短时间复习一遍计算机网络（因为这学期要考试）。</li>
<li>python博客生成器+分布式发布。</li>
<li>结合hadoop，python，写出一个基本的搜索引擎模型。</li>
<li>书单：<blockquote>
<p>《程序员修炼之道》<br>《python标准库》<br>《数据库系统设计与实现》<br>《python源码分析》<br>《大型网站技术架构》<br>《守望的距离》<br>《安静》</p>
</blockquote>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[保持与自我沟通]]></title>
      <url>/2017/02/15/%E4%B8%8E%E8%87%AA%E6%88%91%E6%B2%9F%E9%80%9A/</url>
      <content type="html"><![CDATA[<p>从记事起至今，已有整整十年未曾写过日记，小时候郭老师每天为我们批阅日记的情景依旧历历在目，其实当时我是讨厌写日记的，那时的我整个人都迷恋于数学的海洋中。究其原因，是因为数学能给我自己带来满足感，这种满足感是是复杂情感的混合体，来自很多方面，其中包括可以更多的受到来自老师，家长的表扬，以及同学的羡慕，说得直白一点，就是虚荣。而语文并不能满足自己内心的虚荣，那时的自己目光短浅（虽然现在好了一丢丢），并不知记日记的妙处，以至于小学一毕业就开始高兴，终于不用每天写日记了。当然让自己讨厌记日记的原因是多方面的，试想每天晚上的作业繁多，又怎能整理好心思去写一篇文章呢？<br>这种状态一直持续到今天，也可以这么说，已经有十年的时间未曾与自我沟通，高中时段，由于中考不得志，学校环境等原因，曾在内心迷茫的阶段，写过一些关于人生的思考，也未曾留存下来。<br>其实这种状态是这个社会（起码是我生存的这个社会）多数人的状态，大多数人都每天忙碌于自己的事业，却未曾于自己的内心深处那一束快要熄绵的光沟通，那束光主导着整个人，指引着个人的行动，然自己却不知那束光到底想要追求什么？是金钱？名车？北京三环的顶层？又或者仰慕已久的女神跪拜在你面前？<br>整整十年，我反复思考着这个问题，却忘记自己小时候就知道如何与那束光沟通的唯一路径，那就是记日记。<br>或许那束光的追求并不是刚才陈述的那些，它在乎的应该是过程，是态度，是充实而沉稳又不乏坚定的眼神，是为人处世时的恭敬有礼，举止大方得体，是陪伴家人时细心体贴，是工作时的负责敬业，是当别人阿谀奉承，拉帮结派时的不随波逐流。<br>这么多精神财富，如果不记日记，它会随着岁月流逝而永远消失，更为重要的是，自己失去了与内心沟通的机会，从而越发消沉空虚，丧失自我，人如果丧失了自我，那它也就不能称之为人。</p>
<p><strong>感谢周国平老师给我的启发。</strong></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[python--装饰器]]></title>
      <url>/2016/11/01/python-%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>python 是一门优雅的语言，有些使用方法就像魔法一样。装饰器(decorator)就是一种化腐朽性为神奇的技巧。最近一直都在使用 Tornado 框架，一直还是念念不忘 Flask 。Flask 是我最喜欢的 Python 框架，最早被它吸引也是源自它使用装饰器这个语法糖（Syntactic sugar）来做 Router，让代码看上去就感觉甜甜的。<br><a id="more"></a><br>Tornado 中的 Router 略显平淡，怀念 Flask 的味道，于是很好奇的想知道 Flask 是如何使用这个魔法。通过阅读 Flask 的源码，我们也可以为 Tornado 实现了一个装饰器 Router。</p>
<p>当然对于刚接触 Python 的人，也许很容易理解装饰器本质是设计模式中的装饰器模式。可是 Python 通过@一个实现装饰器的语法糖。本文的目的就是让 @ 不再神秘。</p>
<h3 id="一切都是对象"><a href="#一切都是对象" class="headerlink" title="一切都是对象"></a>一切都是对象</h3><p>Python 里一切都是对象，当然这不代表一切都是女朋友。函数也是对象，因而可以当成参数传递，例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_english</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'hello'</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_chinese</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'你好'</span></span><br><span class="line"> </span><br><span class="line">say_english()           <span class="comment"># hello</span></span><br><span class="line">say_chinese()           <span class="comment"># 你好</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">(say)</span>:</span></span><br><span class="line">    say()</span><br><span class="line"> </span><br><span class="line">greet(say_english)      <span class="comment"># hello</span></span><br><span class="line">greet(say_chinese)      <span class="comment"># 你好</span></span><br></pre></td></tr></table></figure>
<p>我们的 greet 函数的参数，也是一个函数对象。可以传递这个参数对象。我们调用greet的时候，greet 内部进行函数参数的调用。</p>
<h3 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h3><p>装饰模式，顾名思义，就是在调用目标函数之前，对这个函数对象进行装饰。比如一个对数据库操作的方法，我们在查询数据之前，需要连接一下数据库，当查询结束之后，需要再把连接断开关闭。正常的逻辑如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect_db</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'connect db'</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close_db</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'close db'</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_user</span><span class="params">()</span>:</span></span><br><span class="line"> </span><br><span class="line">    connect_db()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'query the user'</span></span><br><span class="line">    close_db()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">query_user()            <span class="comment"># connect db</span></span><br><span class="line">                        <span class="comment"># query the user</span></span><br><span class="line">                        <span class="comment"># close db</span></span><br></pre></td></tr></table></figure></p>
<p>我们把 连接数据库(connect_db) 和 关闭连接 (close_db)都封装成了函数。 query_data 方法执行我们查询的具体逻辑。这样需要不同的查询方法，只需要把查询的逻辑也封装成一个方法就Ok啦<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'query some user'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_data</span><span class="params">(query)</span>:</span></span><br><span class="line"></span><br><span class="line">    connect_db()</span><br><span class="line">    query()</span><br><span class="line">    close_db()</span><br><span class="line"></span><br><span class="line">query_data(query_user)</span><br></pre></td></tr></table></figure></p>
<p>把查询的函数对象传进来，符合开篇说的一切都是对象。装饰器完成啦。对，就这么简单，query_data 就是对 query_user 的装饰，当然你还可以写出 query_blog 等方法。</p>
<p>等等，设想一种情况，在我们使用装饰函数之前，项目的代码已经有了大量的 query_user方法的调用。如果使用了query_data 包装。我们就不得不把之前 query_user() 的地方统统替换成 query_data(query_user)。怎么样才能减少对代码的改动呢？</p>
<p>我们的出发点是为了保持之前的 query_user() 不改动，现在实际情况是调用 query_data(query_user)。如果 query_data 调用的时候，返回一个函数呢？例如下面的代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'query some user'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_data</span><span class="params">(query)</span>:</span></span><br><span class="line">    <span class="string">""" 定义装饰器，返回一个函数，对query进行wrapper包装 """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        connect_db()</span><br><span class="line">        query()</span><br><span class="line">        close_db()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="comment"># 这里调用query_data进行实际装饰（注意装饰是动词）</span></span><br><span class="line">query_user = query_data(query_user)</span><br><span class="line"><span class="comment"># 调用被装饰后的函数query_user</span></span><br><span class="line">query_user()</span><br></pre></td></tr></table></figure></p>
<p>这样一个完整的装饰器就完成了，比起前面的版本，我们不需要改动之前写好的 query_user 代码。一个关键点在于query_data 调用的时候，返回了一个 wrapper 函数，而这个wrapper 函数执行 query 函数调用前后的一些逻辑。另外一个关键就是调用装饰器 query_data 装饰函数。</p>
<h3 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖@"></a>语法糖@</h3><p>前面的代码，可以使用 python的装饰器语法糖@，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_data</span><span class="params">(query)</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        connect_db()</span><br><span class="line">        query()</span><br><span class="line">        close_db()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 @ 调用装饰器进行装饰</span></span><br><span class="line"><span class="meta">@query_data</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'query some user'</span></span><br><span class="line"> </span><br><span class="line">query_user()</span><br></pre></td></tr></table></figure></p>
<p>前面的 装饰器 调用进行装饰的时候，python 有一个语法糖。<br>如果给装饰器函数前面加一个@，我们可以理解为调用了一些装饰器函数，即 @query_data 等于 query_data()。当实际上，并不是这么使用，而是这么一个整体：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@query_data</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'query some user'</span></span><br></pre></td></tr></table></figure></p>
<p>等价于<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">query_user</span> = query_data(query_user)</span><br></pre></td></tr></table></figure></p>
<h3 id="被装饰函数参数"><a href="#被装饰函数参数" class="headerlink" title="被装饰函数参数"></a>被装饰函数参数</h3><p>我们被装饰的函数，往往带有参数，因此通过装饰器如何传递参数呢？回想一下，装饰器函数针对被装饰的函数进行装饰，使用的是返回一个 wrapper 函数。其实这个函数可以等同于被装饰的函数，只不过 wrapper 还做了更多的事情。被装饰的函数参数可以通过 wrapper 传递。如下：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def query_data(<span class="keyword">query</span>):</span><br><span class="line"> </span><br><span class="line">    def wrapper(<span class="keyword">count</span>):</span><br><span class="line">        connect_db()</span><br><span class="line">        <span class="keyword">query</span>(<span class="keyword">count</span>)</span><br><span class="line">        close_db()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"> </span><br><span class="line">@query_data</span><br><span class="line">def query_user(<span class="keyword">count</span>):</span><br><span class="line">    <span class="keyword">print</span> '<span class="keyword">query</span> some user limit  &#123;<span class="keyword">count</span>&#125;'.<span class="keyword">format</span>(<span class="keyword">count</span>=<span class="keyword">count</span>)</span><br><span class="line"> </span><br><span class="line">query_user(<span class="keyword">count</span>=100)       # connect <span class="keyword">db</span></span><br><span class="line">                            # <span class="keyword">query</span> some user limit  100</span><br><span class="line">                            # <span class="keyword">close</span> <span class="keyword">db</span></span><br></pre></td></tr></table></figure></p>
<p>这样就实现了被装饰的函数传递参数。当然，位置参数和关键字参数，可变参数都可以。</p>
<h3 id="装饰器参数"><a href="#装饰器参数" class="headerlink" title="装饰器参数"></a>装饰器参数</h3><p>在 flask 中，对视图函数的装饰是装饰器中传递 url 正则，即在装饰器中传递参数，和被装饰器的参数还不一样。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@app.router(<span class="string">'/user'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_page</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'user page'</span></span><br></pre></td></tr></table></figure></p>
<p>我们如何定义router这个装饰器呢？其实只要在原先的装饰器外面再包裹一层，也就是针对装饰器进行装饰。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">router</span><span class="params">(url)</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'router invoke url'</span>, url</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query_data</span><span class="params">(query)</span>:</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">print</span> <span class="string">'query_data invoke url'</span>, url</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(count)</span>:</span></span><br><span class="line">            connect_db()</span><br><span class="line">            query(count)</span><br><span class="line">            close_db()</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> query_data</span><br><span class="line"> </span><br><span class="line"><span class="meta">@router('/user')          # 首先调用了router函数， 输出 router invoke url /user， 进行@装饰，输出 'query_data invoke url', url</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_user</span><span class="params">(count)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'query some user limit  &#123;count&#125;'</span>.format(count=count)</span><br><span class="line"> </span><br><span class="line">query_user(count=<span class="number">100</span>)   <span class="comment"># connect db</span></span><br><span class="line">                        <span class="comment"># query some user limit  100</span></span><br><span class="line">                        <span class="comment"># close db</span></span><br></pre></td></tr></table></figure></p>
<p>@router() 这个语法糖看上去让人迷惑，其实也很好理解。这里可以看成两个步骤<br>第一步是调用 router 这个函数:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">query_data</span> =  router(<span class="string">'/user'</span>)</span><br></pre></td></tr></table></figure></p>
<p>第二步则进行装饰:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@query_data</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p>
<p>连起来的效果就是<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query_user = router()(<span class="name">query_data</span>(<span class="name">query_user</span>))</span><br></pre></td></tr></table></figure></p>
<p>现在回想，@ 这个语法糖很甜吧。并且和python一样很好理解，也十分常用。</p>
<p>当然，我们使用 装饰器是为了实现一些需要包装的方法，例如前面提到的 flask 的 router</p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python--元类实现orm]]></title>
      <url>/2016/09/21/python-%E5%85%83%E7%B1%BB%E5%AE%9E%E7%8E%B0orm/</url>
      <content type="html"><![CDATA[<p>准备工作，创建一个Field类<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Field</span>(<span class="title">object</span>):</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, column_type)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.column_type = column_type</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;%s:%s&gt;'</span> % (<span class="keyword">self</span>.__class_<span class="number">_</span>.__name_<span class="number">_</span>, <span class="keyword">self</span>.name)</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>它的作用是<br>在Field类实例化时将得到两个参数，name和column_type，它们将被绑定为Field的私有属性，如果要将Field转化为字符串时，将返回“Field:XXX” ， XXX是传入的name名称。</p>
<p>准备工作：创建StringField和IntergerField<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringField</span>(<span class="title">Field</span>):</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">super</span>(StringField, <span class="keyword">self</span>).__init_<span class="number">_</span>(name, <span class="string">'varchar(100)'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntegerField</span>(<span class="title">Field</span>):</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">super</span>(IntegerField, <span class="keyword">self</span>).__init_<span class="number">_</span>(name, <span class="string">'bigint'</span>)</span><br></pre></td></tr></table></figure></p>
<p>它的作用是<br>在StringField,IntegerField实例初始化时，时自动调用父类的初始化方式。</p>
<h3 id="道生一"><a href="#道生一" class="headerlink" title="道生一"></a>道生一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelMetaclass</span><span class="params">(type)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, attrs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> name==<span class="string">'Model'</span>:</span><br><span class="line">            <span class="keyword">return</span> type.__new__(cls, name, bases, attrs)</span><br><span class="line">        print(<span class="string">'Found model: %s'</span> % name)</span><br><span class="line">        mappings = dict()</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> attrs.items():</span><br><span class="line">            <span class="keyword">if</span> isinstance(v, Field):</span><br><span class="line">                print(<span class="string">'Found mapping: %s ==&gt; %s'</span> % (k, v))</span><br><span class="line">                mappings[k] = v</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> mappings.keys():</span><br><span class="line">            attrs.pop(k)</span><br><span class="line">        attrs[<span class="string">'__mappings__'</span>] = mappings <span class="comment"># 保存属性和列的映射关系</span></span><br><span class="line">        attrs[<span class="string">'__table__'</span>] = name <span class="comment"># 假设表名和类名一致</span></span><br><span class="line">        <span class="keyword">return</span> type.__new__(cls, name, bases, attrs)</span><br></pre></td></tr></table></figure>
<p>它做了以下几件事</p>
<ol>
<li>创建一个新的字典mapping<br>2 .将每一个类的属性，通过.items()遍历其键值对。如果值是Field类，则打印键值，并将这一对键值绑定到mapping字典上。</li>
<li>将刚刚传入值为Field类的属性删除。</li>
<li>创建一个专门的<strong>mappings</strong>属性，保存字典mapping。</li>
<li>创建一个专门的<strong>table</strong>属性，保存传入的类的名称。</li>
</ol>
<h3 id="一生二"><a href="#一生二" class="headerlink" title="一生二"></a>一生二</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span><span class="params">(dict, metaclass=ModelMetaclass)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kwarg)</span>:</span></span><br><span class="line">        super(Model, self).__init__(**kwarg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self[key]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">"'Model' object has no attribute '%s'"</span> % key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        self[key] = value</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模拟建表操作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">        fields = []</span><br><span class="line">        args = []</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.__mappings__.items():</span><br><span class="line">            fields.append(v.name)</span><br><span class="line">            args.append(getattr(self, k, <span class="keyword">None</span>))</span><br><span class="line">        sql = <span class="string">'insert into %s (%s) values (%s)'</span> % (self.__table__, <span class="string">','</span>.join(fields), <span class="string">','</span>.join([str(i) <span class="keyword">for</span> i <span class="keyword">in</span> args]))</span><br><span class="line">        print(<span class="string">'SQL: %s'</span> % sql)</span><br><span class="line">        print(<span class="string">'ARGS: %s'</span> % str(args))</span><br></pre></td></tr></table></figure>
<p>如果从Model创建一个子类User：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Model)</span>:</span></span><br><span class="line">    <span class="comment"># 定义类的属性到列的映射：</span></span><br><span class="line">    id = IntegerField(<span class="string">'id'</span>)</span><br><span class="line">    name = StringField(<span class="string">'username'</span>)</span><br><span class="line">    email = StringField(<span class="string">'email'</span>)</span><br><span class="line">    password = StringField(<span class="string">'password'</span>)</span><br></pre></td></tr></table></figure></p>
<p>这时<br>id= IntegerField(‘id’)就会自动解析为：</p>
<p>Model.<strong>setattr</strong>(self, ‘id’, IntegerField(‘id’))</p>
<p>因为IntergerField(‘id’)是Field的子类的实例，自动触发元类的<strong>new</strong>，所以将IntergerField(‘id’)存入<strong>mappings</strong>并删除这个键值对。</p>
<h3 id="二生三、三生万物"><a href="#二生三、三生万物" class="headerlink" title="二生三、三生万物"></a>二生三、三生万物</h3><p>当你初始化一个实例的时候并调用save()方法时候<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u = User(<span class="attribute">id</span>=12345, <span class="attribute">name</span>=<span class="string">'Batman'</span>, <span class="attribute">email</span>=<span class="string">'batman@nasa.org'</span>, <span class="attribute">password</span>=<span class="string">'iamback'</span>)</span><br><span class="line">u.save()</span><br></pre></td></tr></table></figure></p>
<p>这时先完成了二生三的过程：</p>
<ol>
<li>先调用Model.<strong>setattr</strong>，将键值载入私有对象</li>
<li>然后调用元类的“天赋”，ModelMetaclass.<strong>new</strong>，将Model中的私有对象，只要是Field的实例，都自动存入u.<strong>mappings</strong>。</li>
</ol>
<p>接下来完成了三生万物的过程：</p>
<p>通过u.save()模拟数据库存入操作。这里我们仅仅做了一下遍历<strong>mappings</strong>操作，虚拟了sql并打印，在现实情况下是通过输入sql语句与数据库来运行。</p>
<p>输出结果为<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Found <span class="string">model:</span> User</span><br><span class="line">Found <span class="string">mapping:</span> name ==&gt; &lt;<span class="string">StringField:</span>username&gt;</span><br><span class="line">Found <span class="string">mapping:</span> password ==&gt; &lt;<span class="string">StringField:</span>password&gt;</span><br><span class="line">Found <span class="string">mapping:</span> id ==&gt; &lt;<span class="string">IntegerField:</span>id&gt;</span><br><span class="line">Found <span class="string">mapping:</span> email ==&gt; &lt;<span class="string">StringField:</span>email&gt;</span><br><span class="line"><span class="string">SQL:</span> insert into User (username,password,id,email) values (Batman,iamback,<span class="number">12345</span>,batman<span class="meta">@nasa</span>.org)</span><br><span class="line"><span class="string">ARGS:</span> [<span class="string">'Batman'</span>, <span class="string">'iamback'</span>, <span class="number">12345</span>, <span class="string">'batman@nasa.org'</span>]</span><br></pre></td></tr></table></figure></p>
<p>end！！！</p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python--元类]]></title>
      <url>/2016/09/15/python-%E5%85%83%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p>千万不要被所谓“元类是99%的python程序员不会用到的特性”这类的说辞吓住。因为每个中国人，都是天生的元类使用者<br>学懂元类，你只需要知道两句话：</p>
<ul>
<li>道生一，一生二，二生三，三生万物</li>
<li>我是谁？我从哪来里？我要到哪里去？<a id="more"></a>
</li>
</ul>
<p>在python世界，拥有一个永恒的道，那就是“type”，请记在脑海中，type就是道。如此广袤无垠的python生态圈，都是由type产生出来的。</p>
<p>道生一，一生二，二生三，三生万物。</p>
<ol>
<li>道 即是 type</li>
<li>一 即是 metaclass(元类，或者叫类生成器)</li>
<li>二 即是 class(类，或者叫实例生成器)</li>
<li>三 即是 instance(实例)</li>
<li>万物 即是 实例的各种属性与方法，我们平常使用python时，调用的就是它们。</li>
</ol>
<p>道和一，是我们今天讨论的命题，而二、三、和万物，则是我们常常使用的类、实例、属性和方法，用hello world来举例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个Hello类，拥有属性say_hello ----二的起源</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">(self, name=<span class="string">'world'</span>)</span>:</span></span><br><span class="line">        print(<span class="string">'Hello, %s.'</span> % name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从Hello类创建一个实例hello ----二生三</span></span><br><span class="line">hello = Hello()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用hello调用方法say_hello ----三生万物</span></span><br><span class="line">hello.say_hello()</span><br></pre></td></tr></table></figure></p>
<p>输出效果：<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Hello,</span> world.</span><br></pre></td></tr></table></figure></p>
<p>这就是一个标准的“二生三，三生万物”过程。 从类到我们可以调用的方法，用了这两步。</p>
<p>那我们不由自主要问，类从何而来呢？回到代码的第一行。<br>class Hello其实是一个函数的“语义化简称”，只为了让代码更浅显易懂，它的另一个写法是：<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def fn(self, <span class="keyword">name</span>=<span class="string">'world'</span>): # 假如我们有一个函数叫fn</span><br><span class="line">    print(<span class="string">'Hello, %s.'</span> % <span class="keyword">name</span>)</span><br><span class="line">    </span><br><span class="line">Hello = <span class="keyword">type</span>(<span class="string">'Hello'</span>, (<span class="keyword">object</span>,), dict(say_hello=fn)) # 通过<span class="keyword">type</span>创建Hello <span class="keyword">class</span> ---- 神秘的“道”，可以点化一切，这次我们直接从“道”生出了“二”</span><br></pre></td></tr></table></figure></p>
<p>这样的写法，就和之前的Class Hello写法作用完全相同，你可以试试创建实例并调用<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从Hello类创建一个实例hello ----二生三，完全一样</span></span><br><span class="line">hello = Hello()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用hello调用方法say_hello ----三生万物，完全一样</span></span><br><span class="line">hello.say_hello()</span><br></pre></td></tr></table></figure></p>
<p>输出效果：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, world. <span class="comment">----调用结果完全一样。</span></span><br></pre></td></tr></table></figure></p>
<p>我们回头看一眼最精彩的地方，道直接生出了二：<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Hello</span> = <span class="keyword">type</span>(‘<span class="type">Hello</span>’, (object,), dict(say_hello=fn))</span><br></pre></td></tr></table></figure></p>
<p>这就是“道”，python世界的起源，你可以为此而惊叹。<br>注意它的三个参数！暗合人类的三大永恒命题：我是谁，我从哪里来，我要到哪里去。</p>
<ul>
<li>第一个参数：我是谁。 在这里，我需要一个区分于其它一切的命名，以上的实例将我命名为“Hello”</li>
<li>第二个参数：我从哪里来在这里.我需要知道从哪里来，也就是我的“父类”，以上实例中我的父类是“object”——python中一种非常初级的类。</li>
<li>第三个参数：我要到哪里去. 在这里，我们将需要调用的方法和属性包含到一个字典里，再作为参数传入。以上实例中，我们有一个say_hello方法包装进了字典中。</li>
</ul>
<p>值得注意的是，三大永恒命题，是一切类，一切实例，甚至一切实例属性与方法都具有的。理所应当，它们的“创造者”，道和一，即type和元类，也具有这三个参数。但平常，类的三大永恒命题并不作为参数传入，而是以如下方式传入<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span>(<span class="title">object</span>)&#123;</span></span><br><span class="line"><span class="comment"># class 后声明“我是谁”</span></span><br><span class="line"><span class="comment"># 小括号内声明“我来自哪里”</span></span><br><span class="line"><span class="comment"># 中括号内声明“我要到哪里去”</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>造物主，可以直接创造单个的人，但这是一件苦役。造物主会先创造“人”这一物种，再批量创造具体的个人。并将三大永恒命题，一直传递下去。</li>
<li>“道”可以直接生出“二”，但它会先生出“一”，再批量地制造“二”。</li>
<li>type可以直接生成类（class），但也可以先生成元类（metaclass），再使用元类批量定制类（class）。<h3 id="元类——道生一，一生二"><a href="#元类——道生一，一生二" class="headerlink" title="元类——道生一，一生二"></a>元类——道生一，一生二</h3>一般来说，元类均被命名后缀为Metalass。想象一下，我们需要一个可以自动打招呼的元类，它里面的类方法呢，有时需要say_Hello，有时需要say_Hi，有时又需要say_Sayolala，有时需要say_Nihao。</li>
</ul>
<p>如果每个内置的say_xxx都需要在类里面声明一次，那将是多么可怕的苦役！ 不如使用元类来解决问题。</p>
<p>以下是创建一个专门“打招呼”用的元类代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SayMetaClass</span><span class="params">(type)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, attrs)</span>:</span></span><br><span class="line">        attrs[<span class="string">'say_'</span>+name] = <span class="keyword">lambda</span> self,value,saying=name: print(saying+<span class="string">','</span>+value+<span class="string">'!'</span>)</span><br><span class="line">        <span class="keyword">return</span> type.__new__(cls, name, bases, attrs)</span><br></pre></td></tr></table></figure></p>
<p>记住两点：</p>
<ol>
<li><p>元类是由“type”衍生而出，所以父类需要传入type。【道生一，所以一必须包含道】</p>
</li>
<li><p>元类的操作都在 <strong>new</strong>中完成，它的第一个参数是将创建的类，之后的参数即是三大永恒命题：我是谁，我从哪里来，我将到哪里去。 它返回的对象也是三大永恒命题，接下来，这三个参数将一直陪伴我们。</p>
</li>
</ol>
<p>在<strong>new</strong>中，我只进行了一个操作，就是<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">attrs[<span class="string">'say_'</span>+name] = lambda self,<span class="keyword">value</span>,saying=name: print(saying+<span class="string">','</span>+<span class="keyword">value</span>+<span class="string">'!'</span>)</span><br></pre></td></tr></table></figure></p>
<p>它跟据类的名字，创建了一个类方法。比如我们由元类创建的类叫“Hello”，那创建时就自动有了一个叫“say_Hello”的类方法，然后又将类的名字“Hello”作为默认参数saying，传到了方法里面。然后把hello方法调用时的传参作为value传进去，最终打印出来。</p>
<p>那么，一个元类是怎么从创建到调用的呢？<br>来！一起根据道生一、一生二、二生三、三生万物的准则，走进元类的生命周期吧!<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 道生一：传入type</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SayMetaClass</span><span class="params">(type)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 传入三大永恒命题：类名称、父类、属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, attrs)</span>:</span></span><br><span class="line">        <span class="comment"># 创造“天赋”</span></span><br><span class="line">        attrs[<span class="string">'say_'</span>+name] = <span class="keyword">lambda</span> self,value,saying=name: print(saying+<span class="string">','</span>+value+<span class="string">'!'</span>)</span><br><span class="line">        <span class="comment"># 传承三大永恒命题：类名称、父类、属性</span></span><br><span class="line">        <span class="keyword">return</span> type.__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一生二：创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">(object, metaclass=SayMetaClass)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二生三：创建实列</span></span><br><span class="line">hello = Hello()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三生万物：调用实例方法</span></span><br><span class="line">hello.say_Hello(<span class="string">'world!'</span>)</span><br></pre></td></tr></table></figure></p>
<p>输出为<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Hello,</span> world!</span><br></pre></td></tr></table></figure></p>
<p>注意：通过元类创建的类，第一个参数是父类，第二个参数是metaclass</p>
<p>普通人出生都不会说话，但有的人出生就会打招呼说“Hello”，“你好”,“sayolala”，这就是天赋的力量。它会给我们面向对象的编程省下无数的麻烦。</p>
<p>现在，保持元类不变，我们还可以继续创建Sayolala， Nihao类，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一生二：创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sayolala</span><span class="params">(object, metaclass=SayMetaClass)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二生三：创建实列</span></span><br><span class="line">s = Sayolala()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三生万物：调用实例方法</span></span><br><span class="line">s.say_Sayolala(<span class="string">'japan!'</span>)</span><br></pre></td></tr></table></figure></p>
<p>输出<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Sayolala,</span> japan!</span><br></pre></td></tr></table></figure></p>
<p>也可以说中文<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一生二：创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nihao</span><span class="params">(object, metaclass=SayMetaClass)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二生三：创建实列</span></span><br><span class="line">n = Nihao()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三生万物：调用实例方法</span></span><br><span class="line">n.say_Nihao(<span class="string">'中华!'</span>)</span><br></pre></td></tr></table></figure></p>
<p>输出<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Nihao,</span> 中华!</span><br></pre></td></tr></table></figure></p>
<p>再来一个小例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 道生一</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListMetaclass</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, attrs)</span>:</span></span><br><span class="line">        <span class="comment"># 天赋：通过add方法将值绑定</span></span><br><span class="line">        attrs[<span class="string">'add'</span>] = <span class="keyword">lambda</span> self, value: self.append(value)</span><br><span class="line">        <span class="keyword">return</span> type.__new__(cls, name, bases, attrs)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 一生二</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span><span class="params">(list, metaclass=ListMetaclass)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 二生三</span></span><br><span class="line">L = MyList()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三生万物</span></span><br><span class="line">L.add(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p>
<p>现在我们打印一下L<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(L)</span></span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; [<span class="number">1</span>]</span><br></pre></td></tr></table></figure></p>
<p>而普通的list没有add()方法<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L2 = <span class="keyword">list</span>()</span><br><span class="line">L2.<span class="built_in">add</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;AttributeError: <span class="string">'list'</span> object <span class="built_in">has</span> <span class="keyword">no</span> attribute <span class="string">'add'</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[6月面php开发常见题总结]]></title>
      <url>/2016/06/16/6%E6%9C%88%E9%9D%A2php%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<ol>
<li><p>php是什么？</p>
<p>php，超文本处理语言，我个人觉得php是为处理http报文而出现的.下为详细：</p>
<p>(1). 它实现了日常开发中最常用的数据结构及操作函数（诸如字符串，栈，队列，hash等），并保持变量弱类型的灵活，处理垃圾回收。屏蔽了大部分的细节。</p>
<p>(2). 它将http报文及服务器端的许多重要信息（诸如url,get参数，post参数，cookie,session，用户浏览器信息，服务器信息等）封装成了便于php层开发者操作的数据结构和函数，使得上手及开发速度提升。</p>
<p>(3). 内部实现了大量操作文件，日期，字符编码，json，xml等函数。</p>
<p>(4). 对外提供扩展接口，一大批实用的扩展应运而生，phper操作数据库，缓存，处理图片等任务变得简单。</p>
<a id="more"></a></li>
<li><p>有多少种方法在HTML页面嵌入PHP代码？</p>
<p>使用标记嵌入，&lt;?php ?&gt;或者短标记&lt;?  ?&gt;。</p>
</li>
<li><p>php.ini的作用是什么？</p>
<p>php.ini是php的配置文件：</p>
<p>(1). 更改自带功能的配置，比如更改是否显示错误(display_errors)，更改错误级别(error_reporting)，输出错误日志(log_errors)，更改错误日志位置(error_log)，脚本最大执行时间(max_execution_time)，session存储方式及位置，时区，语言，默认编码，禁用函数(disable_functions)，类(disable_classes)，上传文件大小等.</p>
<p>(2). 载入其他扩展，更改其他模块的配置，比如是否允许mysql持久连接(max_links)，更改扩展的载入路径等。</p>
</li>
<li><p>php是区分大小写的语言吗？</p>
<p>(1).php变量名</p>
<p> (包括$_GET,$_POST,$_REQUEST, $_COOKIE,$_SESSION,$_SERVER,$_FILES,$_ENV,$GLOBALS这些)，常量名区分大小写。</p>
<p>(2). php函数名，方法名，类名不区分大小写。</p>
<p>(3). 魔术常量__LINE__，__FILE__，__DIR__, __FUNCTION__, __CLASS__, __METHOD__, __NAMESPACE__不区分大小写。</p>
<p>(4). NULL，TRUE，FALSE不区分大小写。</p>
<p>(5). 类型转换int,double,bool,string,array,object不区分大小写。</p>
<p>(6). windows下包含文件不区分大小写,linux下区分大小写。</p>
</li>
<li><p>PHP预定义常量有哪些？</p>
<p>(1). 魔术常量__LINE__，__FILE__，__DIR__, __FUNCTION__, __CLASS__, __METHOD__, __NAMESPACE__.</p>
<p>(2). 真假值TRUE,FALSE.</p>
<p>(3). 其他常用常量（php核心常量，标准预定义常量）</p>
<p>PHP_VERSION,PHP_OS,PHP_EOL,E_WARNING,E_ERROR,E_PARSE,E_NOTICE,LOCK_EX(独占锁写锁),LOCK_UN(释放锁),LOCK_SH(共享锁读锁)，LOCK_NB(不希望锁定是阻塞)。</p>
</li>
<li><p>php变量类型有哪些？</p>
<p>(1). NULL</p>
<p>(2). int, double, bool, string</p>
<p>(3). array, object</p>
<p>(4). Resource</p>
<p>(5). callback</p>
</li>
<li><p>php变量命名规则是什么？</p>
<p>$ 打头，可以是字母，数字，下划线，但不能以数字开头。</p>
<p>一般遵循驼峰法或者下划线分割法。</p>
</li>
<li><p>NULL是什么？</p>
<p>一般指空指针常量，php中为一种数据类型，表示空值。不区分大小写，NULL需注意以下几点：</p>
<ol>
<li><p>如果变量未赋值，被unset(),被显式赋值为NULL，则该变量为NULL。</p>
</li>
<li><p>NULL==0,NULL==false, NULL==&#39;&#39; 均为真，但===为假。(&#39;0&#39;不一样）</p>
</li>
<li><p>对于is_null(),只有是NULL值(包括未被赋值的变量)才会为TRUE，其他为FALSE。</p>
</li>
</ol>
</li>
<li><p>php预定义常量有哪些？</p>
<p>(1). 魔术常量__LINE__，__FILE__，__DIR__, __FUNCTION__, __CLASS__, __METHOD__, __NAMESPACE__.</p>
<p>(2). 真假值TRUE,FALSE.</p>
<p>(3). 其他常用常量（php核心常量，标准预定义常量）</p>
<p>PHP_VERSION,PHP_OS,PHP_EOL,E_WARNING,E_ERROR,E_PARSE,E_NOTICE,LOCK_EX(独占锁写锁),LOCK_UN(释放锁),LOCK_SH(共享锁读锁)，LOCK_NB(不希望锁定是阻塞)。</p>
</li>
<li><p>php怎么连接两个字符串？</p>
<p>(1).  $str3 = $str1.$str2;</p>
<p>(2).  $str = &#39;hello&#39;;</p>
<pre><code>$str .=  &amp;#39;world&amp;#39;;
</code></pre></li>
<li><p>php怎么判断一个字符串长度？</p>
<p>(1). 对于纯英文字符，直接用strlen()判断。</p>
<p>(2). 对于含有诸如中文字符，应使用mb_strlen($str,&#39;字符编码&#39;)。(需要mb_string扩展)</p>
</li>
<li><p>php怎样判断一个字符串是否包含在另一个字符串中？</p>
<p>(1). 对于纯英文字符，直接用strpos()判断。</p>
<p>(2). 对于含有诸如中文字符：</p>
<p>   $str1 = iconv(&#39;GBK, &#39;UTF-8&#39; ,&#39;中文&#39;)；//当不知道字符串编码时使用mb_convert_encoding( &#39;中文&#39;, &#39;UTF-8&#39;, &#39;auto&#39;)可以自动识别编码</p>
<p>   $str2 = iconv(&#39;GBK&#39;, &#39;UTF-8&#39; ,&quot;中&quot;);</p>
<p>   if( mb_strpos($str1, $str2) !== false  ) {</p>
</li>
</ol>
<p>//说明包含关系</p>
<pre><code>}
</code></pre><ol>
<li><p>php怎么获取用户使用的浏览器？</p>
<p>通过判断$_SERVER[&#39;HTTP_USER_AGENT&#39;]可以判断用户浏览器信息。下为详细：</p>
<p>function browserInfo() {</p>
<p>  $userAgent = $_SERVER[&#39;HTTP_USER_AGENT&#39;];</p>
<p>$browserName = &#39;&#39;;</p>
<p>$browserVersion = &#39;&#39;;</p>
<p>$temp = array();</p>
<p>If(ereg(&quot;MSIE([0-9].[0-9]{1,2})&quot;, $userAgent, $temp)) {</p>
</li>
</ol>
<p>$browserVersion = $temp[1];</p>
<p>$browserName = &quot;IE&quot;;</p>
<p> } else if(ereg(&quot;Opera/([0-9]{1,2}.[0-9]{1,2})&quot;, $userAgent, $temp)) {</p>
<p>$browserVersion = $temp[1];</p>
<p>$browserName = &quot;Opera&quot;;</p>
<p> } else if(ereg(&quot;Firefox/([0-9.]{1,5}))&quot;, $userAgent, $temp)) {</p>
<p>$browserVersion = $temp[1];</p>
<pre><code>$browserName = &amp;quot;Firefox&amp;quot;;
</code></pre><p> } else if(ereg(&quot;Chrome/([0-9.]{1,3})&quot;, $userAgent, $temp)) {</p>
<p>$browserVersion = $temp[1];</p>
<pre><code>$browserName = &amp;quot;Chrome&amp;quot;;
</code></pre><p> } else if(ereg(&quot;Safari/([0-9.]{1,3})&quot;, $userAgent, $temp)) {</p>
<p>$browserVersion = $temp[1];</p>
<pre><code>$browserName = &amp;quot;Safari&amp;quot;;
</code></pre><p> } else {</p>
<p>$browserVersion = &quot;&quot;;</p>
<pre><code>$browserName = &amp;quot;Unknown&amp;quot;;
</code></pre><p> }</p>
<p> return $browserName . &quot;&quot; . $browserVersion;</p>
<p>   }</p>
<ol>
<li><p>php怎么获取随机数？</p>
<p>通常使用mt_rand()函数</p>
<p>echo mt_rand(10,100)</p>
</li>
<li><p>php怎么重定向页面？</p>
<p>(1). 使用header函数重定向，使用时前面不能有任何输出，及session，cookie设置，手动开启缓冲区除外。</p>
<pre><code>&amp;lt;?php

Header(&amp;quot;location: [http://www.xxx.com](./../)%3B) [&amp;quot;](./../)%3B) [);](./../)%3B)
</code></pre><p>(2). 使用html meta标签跳转</p>
<pre><code>&amp;lt;?php

$url = &amp;quot;www.xxx.com&amp;quot;;

Echo &amp;quot;&amp;lt;meta htto-equiv=\&amp;quot;refresh\&amp;quot; content=\&amp;quot;0;url=$url\&amp;quot;&amp;gt;&amp;quot;;
</code></pre><p>(3). 使用js跳转</p>
<pre><code>&amp;lt;?php

$url = &amp;quot;www.xxx.com&amp;quot;;
</code></pre><p>   Echo &quot;&lt;script type=\&quot;text/javascript\&quot;&gt;&quot;;</p>
<p>   Echo &quot;location.href=\&quot;$url\&quot;&quot;;</p>
<p>   Echo &quot;&lt;/script&gt;&quot;;</p>
</li>
<li><p>怎么显示文件下载对话框？</p>
<p>通过header函数改变Content-type来显示文件下载对话框，如果需要隐藏文件真实地址，可以先读取到内存，再传给客户端。下为详细：</p>
<p>Function showDownload($file_path) {</p>
<p>  If(!file_exists($file_path)) {</p>
<pre><code>echo &amp;quot;file not found&amp;quot;;

exit;
</code></pre><p>  }else {</p>
<pre><code>$file = fopen($file\_path,&amp;quot;r&amp;quot;);
</code></pre></li>
</ol>
<p>header(&quot;Content-type: application/octet-stream&quot;);</p>
<p>header(&quot;Accept-Length: filesize($file_path)&quot;);</p>
<p>header(&quot;Content-Disposition: attachment; filename=$file_path&quot;);</p>
<p>echo fread($file,filesize($file_path));</p>
<p>fclose($file);</p>
<p>exit;</p>
<pre><code>}
</code></pre><p>  }</p>
<ol>
<li>php怎样获取通过GET,POST发送的信息？</li>
</ol>
<p>$_GET，$_POST, $_REQUEST</p>
<p>一般情况下要检测下key值是否合法，比如：</p>
<p>$test = isset($_GET[&#39;test&#39;]) ? $_GET[&#39;test&#39;] : &#39;&#39;;</p>
<ol>
<li>php的$_REQUEST变量包含哪些获取信息的方法？</li>
</ol>
<p>$_REQUEST变量中默认包含了$_GET,$_POST,$_COOKIE的数组，如果key相同，则遵循php.ini中request_order=&quot;GPC&quot;的设置覆盖，默认后者会覆盖前者。</p>
<ol>
<li>php怎样创建一个数组？</li>
</ol>
<p>$arr = array(&#39;k&#39;=&gt;&#39;v&#39;);</p>
<p>$arr = [&#39;k&#39;=&gt;&#39;v&#39;]; //5.4开始</p>
<ol>
<li>php怎样对数组进行排序?</li>
</ol>
<p>(1). 对数字，字母简单顺序排列用sort($arr),倒序排列用rsort($arr).会删除原有的key.</p>
<p>(2). 根据key顺序排列用ksort($arr),倒序排列用krsort($arr).保留原有的key.</p>
<p>(3). 根据value顺序排列用asort($arr),倒序排列用asort($arr).保留原有的key.</p>
<p>(4). 以上均会改变原数组，以上函数有第二个可选参数sort_flags，分别是：</p>
<pre><code>SORT\_REGULAR，SORT\_NUMERIC, SORT\_STRING, SORT\_LOCALE\_STRING.
</code></pre><ol>
<li>php单引号字符串与双引号字符串的区别是什么？</li>
</ol>
<p>(1). 一般两者通用，但是双引号内部变量会解析，单引号中则不解析。所以内部是纯字符串的时候用单引号（速度快一点）。</p>
<p>(2). 有的时候需要用php生成文本文件，最好用双引号，单引号会把\n直接当字符输出。</p>
<p>(3). 最好html中尽量双引号，这样如果需要拷贝大段的html代码到php中，只需在两头加单引号就ok。</p>
<ol>
<li>php如何包含另一个php文件？</li>
</ol>
<p>(1). include(),include_once()函数如果有错误报警告，脚本继续执行。Include_once()会检测该文件是否已包含过，如果包含过则不会再次包含。</p>
<p>(1). require(),require_once()函数如果有错误报致命错误，脚本停止执行。require_once()会检测该文件是否已包含过，如果包含过则不会再次包含。</p>
<ol>
<li><p>php include()函数和require()函数的区别是什么？</p>
<p>(1). require()函数执行发生在php脚本执行前段，该语句会被最终替换为要包含的内容，有错误停止脚本执行。</p>
<p>(2). Include()函数执行发生在该行代码执行时，有错误继续执行。</p>
<p>(3). require()是不会受到条件判断约束的，如果需要循环一组文件包含或者通过条件判断包含，则需要用include().</p>
</li>
<li><p>php怎样以只读模式打开一个文件？</p>
<p>将fopen设置的第二参数设置为&quot;r&quot;,file_get_contents()也可以。</p>
<p>$file = fopen($file_path,&#39;r&#39;);</p>
<p>echo fread($file,filesize($file_path));</p>
<p>fclose($file);</p>
</li>
<li><p>php怎样获取一个文件的大小？</p>
<p>利用filesize()函数来获取，而对于是远程文件，可以使用get_headers()函数来获取文件大小。</p>
<p>function _getFileSize($file_path, $type = 1 ) {</p>
<pre><code>$size = false;

if($type === 1) {
</code></pre></li>
</ol>
<p>$size = @filesize(&quot;$file_path&quot;);</p>
<pre><code>} else {

     $header\_arr = get\_headers($url,true);

     $size = $header\_arr[&amp;#39;Content-type&amp;#39;];

}

return $size;
</code></pre><p>   }</p>
<ol>
<li>php怎么判断一个文件是否存在？</li>
</ol>
<p>对于本地文件利用file_exists()来获取，远程文件依旧使用get_headers()函数。</p>
<p>详细如下：</p>
<p> function _fileExists($file_path, $type = 1 ) {</p>
<pre><code>$flag = false;

if($type === 1) {
</code></pre><p>$flag = file_exists(&quot;$file_path&quot;);</p>
<pre><code>} else {

     $flag = (bool)get\_headers($url,true);

}

return $flag;
</code></pre><p>   }</p>
<ol>
<li>php怎样设置和获取cookie?</li>
</ol>
<p>(1).设置cookie</p>
<ol>
<li><p>可以使用setcookie()函数来设置cookie，依次需要以下参数(第一个为必选)：</p>
<p>name: cookie名称，value: 值, expire: 过期时间(时间戳)，path：服务端有效路径(默认为/), domain: cookie有效域名。</p>
<p>setcookie(&#39;key&#39;,&#39;value&#39;,time()+3600*24*7,&#39;/&#39;,&#39;xxx.com&#39;);</p>
<p>setcookie前不能有任何输出(除非设置缓冲区),setcookie()后，当前页输出刚刚设置的cookie不会输出结果。</p>
</li>
</ol>
<ol>
<li><p>(2). 获取cookie</p>
<pre><code>$name  = isset($\_COOKIE[&amp;#39;name&amp;#39;]) ? $\_COOKIE[&amp;#39;name&amp;#39;] : &amp;#39;&amp;#39;;
</code></pre></li>
<li><p>php怎样检测一个变量是否设置？</p>
</li>
</ol>
<p>使用isset()函数</p>
<ol>
<li><p>php怎样发送邮件？</p>
<p>(1). 使用mail()函数(需要smtp服务器)  (2). 使用封装好的php mailer邮件类。</p>
</li>
<li><p>php怎样访问已经被上传到temp的文件？</p>
<p>$tmp_dir = ini_get(&quot;upload_tmp_dir&quot;);</p>
<p>$file_path = $tmp_dir . $_FILES[&#39;name&#39;][&#39;tmp_name&#39;];</p>
<p>echo file_get_contents($file_path);</p>
</li>
<li><p>php preg_match()函数是怎样使用的？</p>
</li>
</ol>
<p>preg_match()函数对字符串执行正则匹配，成功返回TRUE，失败返回FALSE;</p>
<p>var_dump(preg_match(&quot;/app/&quot;, &#39;apple&#39;));</p>
<ol>
<li>php在发生异常错误时怎样捕获异常信息？</li>
</ol>
<p>当发生异常时利用try{}catch(Exception $e){}捕获异常信息。</p>
<ol>
<li><p>php创建一个Mysql连接，进行一次查询，然后关闭连接操作?</p>
<p>$connect = mysql_connect($dbhost, $username, $password) or die(&quot; connect error!&quot;);</p>
<p>mysql_select_db($dbname, $connect);</p>
<p>$result = mysql_query(&quot;select name from table1&quot;);</p>
<p>print_r(mysql_fetch_row($result));</p>
<p>mysql_close($connect);</p>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[自己封装jquery]]></title>
      <url>/2016/04/11/%E8%87%AA%E5%B7%B1%E5%B0%81%E8%A3%85jquery/</url>
      <content type="html"><![CDATA[<p>为梳理javascript知识，我觉得有必要亲自实现一遍jquery，虽说自己仅是学生一枚，底层知识不牢，但应用层的东西还是敢去尝试下的，目前代码已放到了github上，有兴趣的童鞋一起学习啊。如果你看见了我笨拙的代码，没错！那就是我写的！<br>github:<a href="https://github.com/hehanlin/hquery" target="_blank" rel="noopener">https://github.com/hehanlin/hquery</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[http cache详解]]></title>
      <url>/2016/02/23/http-cache%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h3 id="1-缓存的分类"><a href="#1-缓存的分类" class="headerlink" title="1. 缓存的分类"></a>1. 缓存的分类</h3><p>缓存分为服务端侧（server side，比如 Nginx、Apache）和客户端侧（client side，比如 web browser）。<br><a id="more"></a><br>服务端缓存又分为 代理服务器缓存 和 反向代理服务器缓存（也叫网关缓存，比如 Nginx反向代理、Squid等），其实广泛使用的 CDN 也是一种服务端缓存，目的都是让用户的请求走”捷径“，并且都是缓存图片、文件等静态资源。</p>
<p>客户端侧缓存一般指的是浏览器缓存，目的就是加速各种静态资源的访问，想想现在的大型网站，随便一个页面都是一两百个请求，每天 pv 都是亿级别，如果没有缓存，用户体验会急剧下降、同时服务器压力和网络带宽都面临严重的考验。<br>下面我们重点介绍客户端缓存</p>
<h3 id="2-浏览器缓存控制机制有两种：HTML-Meta标签-vs-HTTP头信息"><a href="#2-浏览器缓存控制机制有两种：HTML-Meta标签-vs-HTTP头信息" class="headerlink" title="2. 浏览器缓存控制机制有两种：HTML Meta标签 vs. HTTP头信息"></a>2. 浏览器缓存控制机制有两种：HTML Meta标签 vs. HTTP头信息</h3><p>浏览器缓存机制，其实主要就是HTTP协议定义的缓存机制（如： Expires； Cache-control等）。但是也有非HTTP协议定义的缓存机制，如使用HTML Meta 标签，Web开发者可以在HTML页面的<head>节点中加入<meta>标签，代码如下：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;META <span class="attribute">HTTP-EQUIV</span>=<span class="string">"Pragma"</span> <span class="attribute">CONTENT</span>=<span class="string">"no-cache"</span>&gt;</span><br></pre></td></tr></table></figure></head></p>
<p>上述代码的作用是告诉浏览器当前页面不被缓存，每次访问都需要去服务器拉取。使用上很简单，但只有部分浏览器可以支持，而且所有缓存代理服务器都不支持，因为代理不解析HTML内容本身。而广泛应用的还是 HTTP头信息 来控制缓存，下面我主要介绍HTTP协议定义的缓存机制。</p>
<h4 id="2-1-几个重要概念解释"><a href="#2-1-几个重要概念解释" class="headerlink" title="2.1 几个重要概念解释"></a>2.1 几个重要概念解释</h4><ul>
<li><p>Expires策略：Expires是Web服务器响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。不过Expires 是HTTP 1.0的东西，现在默认浏览器均默认使用HTTP 1.1，所以它的作用基本忽略。Expires 的一个缺点就是，返回的到期时间是服务器端的时间，这样存在一个问题，如果客户端的时间与服务器的时间相差很大（比如时钟不同步，或者跨时区），那么误差就很大，所以在HTTP 1.1版开始，使用Cache-Control: max-age=秒替代。</p>
</li>
<li><p>Cache-control策略（重点关注）：Cache-Control与Expires的作用一致，都是指明当前资源的有效期，控制浏览器是否直接从浏览器缓存取数据还是重新发请求到服务器取数据。只不过Cache-Control的选择更多，设置更细致，如果同时设置的话，其优先级高于Expires。</p>
</li>
</ul>
<ul>
<li><p>Pragma行是为了兼容HTTP1.0，作用与Cache-Control: no-cache是一样的。优先级高于上述两项。</p>
</li>
<li><p>Last-Modified/If-Modified-Since：<br>Last-Modified：标示这个响应资源的最后修改时间。web服务器在响应请求时，告诉浏览器资源的最后修改时间。<br>If-Modified-Since：当资源过期时（使用Cache-Control标识的max-age），发现资源具有Last-Modified声明，则再次向web服务器请求时带上头 If-Modified-Since，表示请求时间。web服务器收到请求后发现有头If-Modified-Since 则与被请求资源的最后修改时间进行比对。若最后修改时间较新，说明资源又被改动过，则响应整片资源内容（写在响应消息包体内），HTTP 200；若最后修改时间较旧，说明资源无新修改，则响应HTTP 304 (无需包体，节省浏览)，告知浏览器继续使用所保存的cache。</p>
</li>
<li><p>Etag/If-None-Match：<br>Etag：web服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）。Apache中，ETag的值，默认是对文件的索引节（INode），大小（Size）和最后修改时间（MTime）进行Hash后得到的。<br>If-None-Match：当资源过期时（使用Cache-Control标识的max-age），发现资源具有Etage声明，则再次向web服务器请求时带上头If-None-Match （Etag的值）。web服务器收到请求后发现有头If-None-Match 则与被请求资源的相应校验串进行比对，决定返回200或304。</p>
</li>
</ul>
<blockquote>
<p>Last-Modified标注的最后修改只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，它将不能准确标注文件的修改时间<br>如果某些文件会被定期生成，当有时内容并没有任何变化，但Last-Modified却改变了，导致文件没法使用缓存<br>有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形.<br>Etag是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符，能够更加准确的控制缓存。Last-Modified与ETag一起使用时，服务器会优先验证ETag。<br>yahoo的Yslow法则中则提示谨慎设置Etag：需要注意的是分布式系统里多台机器间文件的last-modified必须保持一致，以免负载均衡到不同机器导致比对失败，Yahoo建议分布式系统尽量关闭掉Etag(每台机器生成的etag都会不一样，因为除了 last-modified、inode 也很难保持一致)。</p>
</blockquote>
<h4 id="2-2-浏览器缓存机制处理流程："><a href="#2-2-浏览器缓存机制处理流程：" class="headerlink" title="2.2 浏览器缓存机制处理流程："></a>2.2 浏览器缓存机制处理流程：</h4><p><img src="/images/3591261680.png" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[linux系统调用的三种方法]]></title>
      <url>/2016/02/15/linux%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>系统调用（System Call）是操作系统为在用户态运行的进程与硬件设备（如CPU、磁盘、打印机等）进行交互提供的一组接口。当用户进程需要发生系统调用时，CPU 通过软中断切换到内核态开始执行内核系统调用函数。下面介绍Linux 下三种发生系统调用的方法：<br><a id="more"></a></p>
<h2 id="通过-glibc-提供的库函数"><a href="#通过-glibc-提供的库函数" class="headerlink" title="通过 glibc 提供的库函数"></a>通过 glibc 提供的库函数</h2><p>glibc 是 Linux 下使用的开源的标准 C 库，它是 GNU 发布的 libc 库，即运行时库。glibc 为程序员提供丰富的 API（Application Programming Interface），除了例如字符串处理、数学运算等用户态服务之外，最重要的是封装了操作系统提供的系统服务，即系统调用的封装。那么glibc提供的系统调用API与内核特定的系统调用之间的关系是什么呢？</p>
<ul>
<li>通常情况，每个特定的系统调用对应了至少一个 glibc 封装的库函数，如系统提供的打开文件系统调用 sys_open 对应的是 glibc 中的 open 函数；</li>
<li>其次，glibc 一个单独的 API 可能调用多个系统调用，如 glibc 提供的 printf 函数就会调用如 sys_open、sys_mmap、sys_write、sys_close 等等系统调用；</li>
<li>另外，多个 API 也可能只对应同一个系统调用，如glibc 下实现的 malloc、calloc、free 等函数用来分配和释放内存，都利用了内核的 sys_brk 的系统调用。</li>
</ul>
<p>举例来说，我们通过 glibc 提供的chmod 函数来改变文件 etc/passwd 的属性为 444：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rc;</span><br><span class="line"></span><br><span class="line">        rc = chmod(<span class="string">"/etc/passwd"</span>, <span class="number">0444</span>);</span><br><span class="line">        <span class="keyword">if</span> (rc == <span class="number">-1</span>)</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"chmod failed, errno = %d\n"</span>, errno);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"chmod success!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在普通用户下编译运用，输出结果为：<br><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">chmod failed, errno </span>=<span class="string"> 1</span></span><br></pre></td></tr></table></figure></p>
<p>上面系统调用返回的值为-1，说明系统调用失败，错误码为1，在 <code>/usr/include/asm-generic/errno-base.h</code> 文件中有如下错误代码说明：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPERM       1                <span class="comment">/* Operation not permitted */</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="使用-syscall-直接调用"><a href="#使用-syscall-直接调用" class="headerlink" title="使用 syscall 直接调用"></a>使用 syscall 直接调用</h2><p>使用上面的方法有很多好处，首先你无须知道更多的细节，如 chmod 系统调用号，你只需了解 glibc 提供的 API 的原型；其次，该方法具有更好的移植性，你可以很轻松将该程序移植到其他平台，或者将 glibc 库换成其它库，程序只需做少量改动。<br>但有点不足是，如果 glibc 没有封装某个内核提供的系统调用时，我就没办法通过上面的方法来调用该系统调用。如我自己通过编译内核增加了一个系统调用，这时 glibc 不可能有你新增系统调用的封装 API，此时我们可以利用 glibc 提供的syscall 函数直接调用。该函数定义在 unistd.h 头文件中，函数原型如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">int</span> <span class="title">syscall</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">int</span> sysno, ...)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>sysno 是系统调用号，每个系统调用都有唯一的系统调用号来标识。在 sys/syscall.h 中有所有可能的系统调用号的宏定义。</li>
<li>… 为剩余可变长的参数，为系统调用所带的参数，根据系统调用的不同，可带0~5个不等的参数，如果超过特定系统调用能带的参数，多余的参数被忽略。</li>
<li>返回值 该函数返回值为特定系统调用的返回值，在系统调用成功之后你可以将该返回值转化为特定的类型，如果系统调用失败则返回 -1，错误代码存放在 errno 中。</li>
</ul>
<p>还以上面修改 /etc/passwd 文件的属性为例，这次使用 syscall 直接调用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rc;</span><br><span class="line">        rc = syscall(SYS_chmod, <span class="string">"/etc/passwd"</span>, <span class="number">0444</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rc == <span class="number">-1</span>)</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"chmod failed, errno = %d\n"</span>, errno);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"chmod succeess!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="通过-int-指令陷入"><a href="#通过-int-指令陷入" class="headerlink" title="通过 int 指令陷入"></a>通过 int 指令陷入</h2><p>如果我们知道系统调用的整个过程的话，应该就能知道用户态程序通过软中断指令int 0x80 来陷入内核态（在Intel Pentium II 又引入了sysenter指令），参数的传递是通过寄存器，eax 传递的是系统调用号，ebx、ecx、edx、esi和edi 来依次传递最多五个参数，当系统调用返回时，返回值存放在 eax 中。</p>
<p>仍然以上面的修改文件属性为例，将调用系统调用那段写成内联汇编代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> rc;</span><br><span class="line">        <span class="keyword">char</span> *file_name = <span class="string">"/etc/passwd"</span>;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">short</span> mode = <span class="number">0444</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">asm</span>(</span><br><span class="line">                <span class="string">"int $0x80"</span></span><br><span class="line">                : <span class="string">"=a"</span> (rc)</span><br><span class="line">                : <span class="string">"0"</span> (SYS_chmod), <span class="string">"b"</span> ((<span class="keyword">long</span>)file_name), <span class="string">"c"</span> ((<span class="keyword">long</span>)mode)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)rc &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>)<span class="number">-132</span>) &#123;</span><br><span class="line">                errno = -rc;</span><br><span class="line">                rc = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rc == <span class="number">-1</span>)</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"chmode failed, errno = %d\n"</span>, errno);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"success!\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果 eax 寄存器存放的返回值（存放在变量 rc 中）在 -1~-132 之间，就必须要解释为出错码（在<code>/usr/include/asm-generic/errno.h</code>文件中定义的最大出错码为 132），这时，将错误码写入 errno 中，置系统调用返回值为 -1；否则返回的是 eax 中的值。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[git常用命令及flow]]></title>
      <url>/2016/02/03/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8Aflow/</url>
      <content type="html"><![CDATA[<p>git 现在的火爆程度非同一般，它被广泛地用在大型开源项目，团队开发，以及独立开发者，学生之中。</p>
<h3 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1. 安装git"></a>1. 安装git</h3><ul>
<li>Linux – 打开控制台，然后通过包管理安装，在Ubuntu上命令是：<br>sudo apt-get install git-all</li>
<li>Windows – 推荐使用git for windows，它包括了图形工具以及命令行模拟器。</li>
<li>OS X – 最简单的方式是使用homebrew安装，命令行执行<br>brew install git<a id="more"></a>
<h3 id="2-配置Git"><a href="#2-配置Git" class="headerlink" title="2. 配置Git"></a>2. 配置Git</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global user.name <span class="string">"My Name"</span></span><br><span class="line">$ git<span class="built_in"> config </span>--global user.email myEmail@example.com</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>配置好这两项，用户就能知道谁做了什么</p>
<h3 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3. 常用命令"></a>3. 常用命令</h3><ul>
<li>git commit</li>
<li>git add [–all]</li>
<li>git push</li>
<li>git fetch</li>
<li>git rebase</li>
<li>git pull</li>
<li>git branch [-d]</li>
<li>git merge</li>
<li>git cherry-pick</li>
<li>git checkout [-b] BRANCH_NAME</li>
<li>git stash<br><strong>&gt;详见<code>man git</code></strong></li>
</ul>
<h3 id="4-git-flow"><a href="#4-git-flow" class="headerlink" title="4. git flow"></a>4. git flow</h3><p><img src="/images/2224012334.jpg" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx配置及优化（中文）]]></title>
      <url>/2016/01/30/nginx%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="一、Nginx常用命令："><a href="#一、Nginx常用命令：" class="headerlink" title="一、Nginx常用命令："></a>一、Nginx常用命令：</h3><a id="more"></a>
<blockquote>
<ol>
<li>启动 Nginx          /usr/local/nginx/sbin/nginx<br>poechant@ubuntu:sudo ./sbin/nginx</li>
<li>停止 Nginx<br>poechant@ubuntu:sudo ./sbin/nginx -s stop<br>poechant@ubuntu:sudo ./sbin/nginx -s quit<br>-s都是采用向 Nginx 发送信号的方式。</li>
<li>Nginx 重载配置<br>poechant@ubuntu:sudo ./sbin/nginx -s reload<br>上述是采用向 Nginx 发送信号的方式，或者使用：<br>poechant@ubuntu:service nginx reload</li>
<li>指定配置文件<br>poechant@ubuntu:sudo ./sbin/nginx -c /usr/local/nginx/conf/nginx.conf<br>-c表示configuration，指定配置文件。</li>
<li>查看 Nginx 版本<br>有两种可以查看 Nginx 的版本信息的参数。第一种如下：<br>poechant@ubuntu:/usr/local/nginx ./sbin/nginx -v<br>nginx: nginx version: nginx/1.0.0<br>另一种显示的是详细的版本信息：<br>poechant@ubuntu:/usr/local/nginx ./sbin/nginx -V<br>nginx: nginx version: nginx/1.0.0<br>nginx: built by gcc 4.3.3 (Ubuntu 4.3.3-5ubuntu4)<br>nginx: TLS SNI support enabled<br>nginx: configure arguments: –with-http_ssl_module –with-openssl=/home/luming/openssl-1.0.0d/</li>
<li>检查配置文件是否正确<br>poechant@ubuntu:/usr/local/nginx ./sbin/nginx -t<br>nginx: [alert] could not open error log file: open() “/usr/local/nginx/logs/error.log” failed (13: Permission denied)<br>nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok<br>2012/01/09 16:45:09 [emerg] 23898#0: open() “/usr/local/nginx/logs/nginx.pid” failed (13: Permission denied)<br>nginx: configuration file /usr/local/nginx/conf/nginx.conf test failed<br>如果出现如上的提示信息，表示没有访问错误日志文件和进程，可以sudo（super user do）一下：<br>poerchant@ubuntu:/usr/local/nginx sudo ./sbin/nginx -t<br>nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok<br>nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful<br>如果显示如上，则表示配置文件正确。否则，会有相关提示。</li>
<li>显示帮助信息<br>poechant@ubuntu:/user/local/nginx ./sbin/nginx -h<br>或者：<br>poechant@ubuntu:/user/local/nginx ./sbin/nginx -?</li>
</ol>
</blockquote>
<h3 id="二、简单的nginx-配置中文详解："><a href="#二、简单的nginx-配置中文详解：" class="headerlink" title="二、简单的nginx 配置中文详解："></a>二、简单的nginx 配置中文详解：</h3><blockquote>
<p>定义Nginx运行的用户和用户组<br>user www www;<br>nginx进程数，建议设置为等于CPU总核心数。<br>worker_processes 8;<br>全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]<br>error_log /var/log/nginx/error.log info;<br>进程文件<br>pid /var/run/nginx.pid;<br>一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。<br>worker_rlimit_nofile 65535;<br>工作模式与连接数上限<br>events<br>{<br>参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。<br>use epoll;<br>单个进程最大连接数（最大连接数=连接数<em>进程数）<br>worker_connections 65535;<br>}<br>设定http服务器<br>http<br>{<br>include mime.types; #文件扩展名与文件类型映射表<br>default_type application/octet-stream; #默认文件类型<br>charset utf-8; #默认编码<br>server_names_hash_bucket_size 128; #服务器名字的hash表大小<br>client_header_buffer_size 32k; #上传文件大小限制<br>large_client_header_buffers 4 64k; #设定请求缓<br>client_max_body_size 8m; #设定请求缓<br>sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，<br>　　　　　　　　　#可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。<br>autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。<br>tcp_nopush on; #防止网络阻塞<br>tcp_nodelay on; #防止网络阻塞<br>keepalive_timeout 120; #长连接超时时间，单位是秒<br>FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。<br>fastcgi_connect_timeout 300;<br>fastcgi_send_timeout 300;<br>fastcgi_read_timeout 300;<br>fastcgi_buffer_size 64k;<br>fastcgi_buffers 4 64k;<br>fastcgi_busy_buffers_size 128k;<br>fastcgi_temp_file_write_size 128k;<br>gzip模块设置<br>gzip on; #开启gzip压缩输出<br>gzip_min_length 1k; #最小压缩文件大小<br>gzip_buffers 4 16k; #压缩缓冲区<br>gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）<br>gzip_comp_level 2; #压缩等级<br>gzip_types text/plain application/x-javascript text/css application/xml;<br>压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。<br>gzip_vary on;<br>limit_zone crawler binary_remote_addr 10m; #开启限制IP连接数的时候需要使用<br>upstream blog.ha97.com {<br>upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。<br>server 192.168.80.121:80 weight=3;<br>server 192.168.80.122:80 weight=2;<br>server 192.168.80.123:80 weight=3;<br>}<br>虚拟主机的配置<br>server<br>{<br>监听端口<br>listen 80;<br>域名可以有多个，用空格隔开<br>server_name www.ha97.com ha97.com;<br>index index.html index.htm index.php;<br>root /data/www/ha97;<br>location ~ .</em>.(php|php5)?<br>{<br>fastcgi_pass 127.0.0.1:9000;<br>fastcgi_index index.php;<br>include fastcgi.conf;<br>}<br>图片缓存时间设置<br>location ~ .<em>.(gif|jpg|jpeg|png|bmp|swf)<br>{<br>expires 10d;<br>}<br>JS和CSS缓存时间设置<br>location ~ .</em>.(js|css)?<br>{<br>expires 1h;<br>}<br>日志格式设定<br>log_format access ‘remote_addr - remote_user [time_local] “request” ‘<br>‘status body_bytes_sent “http_referer” ‘<br>‘“http_user_agent” http_x_forwarded_for’;<br>定义本虚拟主机的访问日志<br>access_log /var/log/nginx/ha97access.log access;<br>对 “/“ 启用反向代理<br>location / {<br>proxy_pass <a href="http://127.0.0.1:88" target="_blank" rel="noopener">http://127.0.0.1:88</a>;<br>proxy_redirect off;<br>proxy_set_header X-Real-IP remote_addr;<br>后端的Web服务器可以通过X-Forwarded-For获取用户真实IP<br>proxy_set_header X-Forwarded-For proxy_add_x_forwarded_for;<br>以下是一些反向代理的配置，可选。<br>proxy_set_header Host host;<br>client_max_body_size 10m; #允许客户端请求的最大单文件字节数<br>client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，<br>proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)<br>proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)<br>proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)<br>proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小<br>proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置<br>proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers<em>2）<br>proxy_temp_file_write_size 64k;<br>设定缓存文件夹大小，大于这个值，将从upstream服务器传<br>}<br>设定查看Nginx状态的地址<br>location /NginxStatus {<br>stub_status on;<br>access_log on;<br>auth_basic “NginxStatus”;<br>auth_basic_user_file conf/htpasswd;<br>htpasswd文件的内容可以用apache提供的htpasswd工具来产生。<br>}<br>本地动静分离反向代理配置<br>所有jsp的页面均交由tomcat或resin处理<br>location ~ .(jsp|jspx|do)? {<br>proxy_set_header Host host;<br>proxy_set_header X-Real-IP remote_addr;<br>proxy_set_header X-Forwarded-For proxy_add_x_forwarded_for;<br>proxy_pass <a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a>;<br>}<br>所有静态文件由nginx直接读取不经过tomcat或resin<br>location ~ .</em>.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)<br>{ expires 15d; }<br>location ~ .*.(js|css)?<br>{ expires 1h; }<br>}<br>}</p>
</blockquote>
<h3 id="三、nginx-配置文件中对优化比较有作用的为以下几项："><a href="#三、nginx-配置文件中对优化比较有作用的为以下几项：" class="headerlink" title="三、nginx 配置文件中对优化比较有作用的为以下几项："></a>三、nginx 配置文件中对优化比较有作用的为以下几项：</h3><blockquote>
<p>worker_processes 8;<br>nginx 进程数，建议按照cpu 数目来指定，一般为它的倍数。</p>
<p>worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000;<br>为每个进程分配cpu，上例中将8 个进程分配到8 个cpu，当然可以写多个，或者将一<br>个进程分配到多个cpu。</p>
<p>worker_rlimit_nofile 102400;<br>这个指令是指当一个nginx 进程打开的最多文件描述符数目，理论值应该是最多打开文<br>件数（ulimit -n）与nginx 进程数相除，但是nginx 分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</p>
<p>use epoll;<br>使用epoll 的I/O 模型</p>
<p>worker_connections 102400;<br>每个进程允许的最多连接数， 理论上每台nginx 服务器的最大连接数为worker_processes*worker_connections。</p>
<p>keepalive_timeout 60;<br>keepalive 超时时间。</p>
<p>client_header_buffer_size 4k;<br>客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置，一般一个请求<br>头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE 取得。</p>
<p>open_file_cache max=102400 inactive=20s;<br>这个将为打开文件指定缓存，默认是没有启用的，max 指定缓存数量，建议和打开文件数一致，inactive 是指经过多长时间文件没被请求后删除缓存。</p>
<p>open_file_cache_valid 30s;<br>这个是指多长时间检查一次缓存的有效信息。</p>
<p>open_file_cache_min_uses 1;<br>open_file_cache 指令中的inactive 参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive 时间内一次没被使用，它将被移除。</p>
</blockquote>
<h4 id="关于内核参数的优化："><a href="#关于内核参数的优化：" class="headerlink" title="关于内核参数的优化："></a>关于内核参数的优化：</h4><blockquote>
<p>net.ipv4.tcp_max_tw_buckets = 6000<br>timewait 的数量，默认是180000。</p>
<p>net.ipv4.ip_local_port_range = 1024 65000<br>允许系统打开的端口范围。</p>
<p>net.ipv4.tcp_tw_recycle = 1<br>启用timewait 快速回收。</p>
<p>net.ipv4.tcp_tw_reuse = 1<br>开启重用。允许将TIME-WAIT sockets 重新用于新的TCP 连接。</p>
<p>net.ipv4.tcp_syncookies = 1<br>开启SYN Cookies，当出现SYN 等待队列溢出时，启用cookies 来处理。</p>
<p>net.core.somaxconn = 262144<br>web 应用中listen 函数的backlog 默认会给我们内核参数的net.core.somaxconn 限制到128，而nginx 定义的NGX_LISTEN_BACKLOG 默认为511，所以有必要调整这个值。</p>
<p>net.core.netdev_max_backlog = 262144<br>每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。</p>
<p>net.ipv4.tcp_max_orphans = 262144<br>系统中最多有多少个TCP 套接字不被关联到任何一个用户文件句柄上。如果超过这个数字，孤儿连接将即刻被复位并打印出警告信息。这个限制仅仅是为了防止简单的DoS 攻击，不能过分依靠它或者人为地减小这个值，更应该增加这个值(如果增加了内存之后)。</p>
<p>net.ipv4.tcp_max_syn_backlog = 262144<br>记录的那些尚未收到客户端确认信息的连接请求的最大值。对于有128M 内存的系统而言，缺省值是1024，小内存的系统则是128。</p>
<p>net.ipv4.tcp_timestamps = 0<br>时间戳可以避免序列号的卷绕。一个1Gbps 的链路肯定会遇到以前用过的序列号。时间戳能够让内核接受这种“异常”的数据包。这里需要将其关掉。</p>
<p>net.ipv4.tcp_synack_retries = 1<br>为了打开对端的连接，内核需要发送一个SYN 并附带一个回应前面一个SYN 的ACK。也就是所谓三次握手中的第二次握手。这个设置决定了内核放弃连接之前发送SYN+ACK 包的数量。</p>
<p>net.ipv4.tcp_syn_retries = 1<br>在内核放弃建立连接之前发送SYN 包的数量。</p>
<p>net.ipv4.tcp_fin_timeout = 1<br>如果套接字由本端要求关闭，这个参数决定了它保持在FIN-WAIT-2 状态的时间。对端可以出错并永远不关闭连接，甚至意外当机。缺省值是60<br>秒。2.2 内核的通常值是180 秒，3你可以按这个设置，但要记住的是，即使你的机器是一个轻载的WEB<br>服务器，也有因为大量的死套接字而内存溢出的风险，FIN- WAIT-2 的危险性比FIN-WAIT-1 要小，因为它最多只能吃掉1.5K<br>内存，但是它们的生存期长些。</p>
<p>net.ipv4.tcp_keepalive_time = 30<br>当keepalive 起用的时候，TCP 发送keepalive 消息的频度。缺省是2 小时。</p>
</blockquote>
<h4 id="下面贴一个完整的内核优化设置："><a href="#下面贴一个完整的内核优化设置：" class="headerlink" title="下面贴一个完整的内核优化设置："></a>下面贴一个完整的内核优化设置：</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.ip_forward</span> = <span class="number">0</span></span><br><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.conf</span><span class="selector-class">.default</span><span class="selector-class">.rp_filter</span> = <span class="number">1</span></span><br><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.conf</span><span class="selector-class">.default</span><span class="selector-class">.accept_source_route</span> = <span class="number">0</span></span><br><span class="line">kernel<span class="selector-class">.sysrq</span> = <span class="number">0</span></span><br><span class="line">kernel<span class="selector-class">.core_uses_pid</span> = <span class="number">1</span></span><br><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.tcp_syncookies</span> = <span class="number">1</span></span><br><span class="line">kernel<span class="selector-class">.msgmnb</span> = <span class="number">65536</span></span><br><span class="line">kernel<span class="selector-class">.msgmax</span> = <span class="number">65536</span></span><br><span class="line">kernel<span class="selector-class">.shmmax</span> = <span class="number">68719476736</span></span><br><span class="line">kernel<span class="selector-class">.shmall</span> = <span class="number">4294967296</span></span><br><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.tcp_max_tw_buckets</span> = <span class="number">6000</span></span><br><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.tcp_sack</span> = <span class="number">1</span></span><br><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.tcp_window_scaling</span> = <span class="number">1</span></span><br><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.tcp_rmem</span> = <span class="number">4096</span> <span class="number">87380</span> <span class="number">4194304</span></span><br><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.tcp_wmem</span> = <span class="number">4096</span> <span class="number">16384</span> <span class="number">4194304</span></span><br><span class="line">net<span class="selector-class">.core</span><span class="selector-class">.wmem_default</span> = <span class="number">8388608</span></span><br><span class="line">net<span class="selector-class">.core</span><span class="selector-class">.rmem_default</span> = <span class="number">8388608</span></span><br><span class="line">net<span class="selector-class">.core</span><span class="selector-class">.rmem_max</span> = <span class="number">16777216</span></span><br><span class="line">net<span class="selector-class">.core</span><span class="selector-class">.wmem_max</span> = <span class="number">16777216</span></span><br><span class="line">net<span class="selector-class">.core</span><span class="selector-class">.netdev_max_backlog</span> = <span class="number">262144</span></span><br><span class="line">net<span class="selector-class">.core</span><span class="selector-class">.somaxconn</span> = <span class="number">262144</span></span><br><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.tcp_max_orphans</span> = <span class="number">3276800</span></span><br><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.tcp_max_syn_backlog</span> = <span class="number">262144</span></span><br><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.tcp_timestamps</span> = <span class="number">0</span></span><br><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.tcp_synack_retries</span> = <span class="number">1</span></span><br><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.tcp_syn_retries</span> = <span class="number">1</span></span><br><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.tcp_tw_recycle</span> = <span class="number">1</span></span><br><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.tcp_tw_reuse</span> = <span class="number">1</span></span><br><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.tcp_mem</span> = <span class="number">94500000</span> <span class="number">915000000</span> <span class="number">927000000</span></span><br><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.tcp_fin_timeout</span> = <span class="number">1</span></span><br><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.tcp_keepalive_time</span> = <span class="number">30</span></span><br><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.ip_local_port_range</span> = <span class="number">1024</span> <span class="number">65000</span></span><br></pre></td></tr></table></figure>
<h4 id="下面是一个简单的nginx-配置文件："><a href="#下面是一个简单的nginx-配置文件：" class="headerlink" title="下面是一个简单的nginx 配置文件："></a>下面是一个简单的nginx 配置文件：</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span> www www;</span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">8</span>;</span><br><span class="line"><span class="attribute">worker_cpu_affinity</span> <span class="number">00000001</span> <span class="number">00000010</span> <span class="number">00000100</span> <span class="number">00001000</span> <span class="number">00010000</span> <span class="number">00100000</span></span><br><span class="line"><span class="number">01000000</span>;</span><br><span class="line"><span class="attribute">error_log</span> /www/log/nginx_error.log <span class="literal">crit</span>;</span><br><span class="line"><span class="attribute">pid</span> /usr/local/nginx/nginx.pid;</span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">204800</span>;</span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line"><span class="attribute">worker_connections</span> <span class="number">204800</span>;</span><br><span class="line">&#125;</span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">include</span> mime.types;</span><br><span class="line"><span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line"><span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line"><span class="attribute">server_names_hash_bucket_size</span> <span class="number">128</span>;</span><br><span class="line"><span class="attribute">client_header_buffer_size</span> <span class="number">2k</span>;</span><br><span class="line"><span class="attribute">large_client_header_buffers</span> <span class="number">4</span> <span class="number">4k</span>;</span><br><span class="line"><span class="attribute">client_max_body_size</span> <span class="number">8m</span>;</span><br><span class="line"><span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">keepalive_timeout</span> <span class="number">60</span>;</span><br><span class="line"><span class="attribute">fastcgi_cache_path</span> /usr/local/nginx/fastcgi_cache levels=<span class="number">1</span>:<span class="number">2</span></span><br><span class="line">keys_zone=TEST:<span class="number">10m</span></span><br><span class="line">inactive=<span class="number">5m</span>;</span><br><span class="line"><span class="attribute">fastcgi_connect_timeout</span> <span class="number">300</span>;</span><br><span class="line"><span class="attribute">fastcgi_send_timeout</span> <span class="number">300</span>;</span><br><span class="line"><span class="attribute">fastcgi_read_timeout</span> <span class="number">300</span>;</span><br><span class="line"><span class="attribute">fastcgi_buffer_size</span> <span class="number">4k</span>;</span><br><span class="line"><span class="attribute">fastcgi_buffers</span> <span class="number">8</span> <span class="number">4k</span>;</span><br><span class="line"><span class="attribute">fastcgi_busy_buffers_size</span> <span class="number">8k</span>;</span><br><span class="line"><span class="attribute">fastcgi_temp_file_write_size</span> <span class="number">8k</span>;</span><br><span class="line"><span class="attribute">fastcgi_cache</span> TEST;</span><br><span class="line"><span class="attribute">fastcgi_cache_valid</span> <span class="number">200</span> <span class="number">302</span> <span class="number">1h</span>;</span><br><span class="line"><span class="attribute">fastcgi_cache_valid</span> <span class="number">301</span> <span class="number">1d</span>;</span><br><span class="line"><span class="attribute">fastcgi_cache_valid</span> any <span class="number">1m</span>;</span><br><span class="line"><span class="attribute">fastcgi_cache_min_uses</span> <span class="number">1</span>;</span><br><span class="line"><span class="attribute">fastcgi_cache_use_stale</span> <span class="literal">error</span> timeout invalid_header http_500;</span><br><span class="line"><span class="attribute">open_file_cache</span> max=<span class="number">204800</span> inactive=<span class="number">20s</span>;</span><br><span class="line"><span class="attribute">open_file_cache_min_uses</span> <span class="number">1</span>;</span><br><span class="line"><span class="attribute">open_file_cache_valid</span> <span class="number">30s</span>;</span><br><span class="line"><span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">gzip_min_length</span> <span class="number">1k</span>;</span><br><span class="line"><span class="attribute">gzip_buffers</span> <span class="number">4</span> <span class="number">16k</span>;</span><br><span class="line"><span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">0</span>;</span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">2</span>;</span><br><span class="line"><span class="attribute">gzip_types</span> text/plain application/x-javascript text/css application/xml;</span><br><span class="line"><span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">8080</span>;</span><br><span class="line"><span class="attribute">server_name</span> backup.aiju.com;</span><br><span class="line"><span class="attribute">index</span> index.php index.htm;</span><br><span class="line"><span class="attribute">root</span> /www/html/;</span><br><span class="line"><span class="attribute">location</span> /status</span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">stub_status</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*\.(php|php5)?</span></span><br><span class="line"><span class="regexp"></span>&#123;</span><br><span class="line"><span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line"><span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line"><span class="attribute">include</span> fcgi.conf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*\.(gif|jpg|jpeg|png|bmp|swf|js|css)</span></span><br><span class="line"><span class="regexp"></span>&#123;</span><br><span class="line"><span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">log_format</span> access <span class="string">'remote_addr -- remote_user [time_local] "request" '</span></span><br><span class="line"><span class="string">'status body_bytes_sent "http_referer" '</span></span><br><span class="line"><span class="string">'"http_user_agent" http_x_forwarded_for'</span>;</span><br><span class="line"><span class="attribute">access_log</span> /www/log/access.log access;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[web开发中表单重复提交问题]]></title>
      <url>/2016/01/28/web%E5%BC%80%E5%8F%91%E4%B8%AD%E8%A1%A8%E5%8D%95%E9%87%8D%E5%A4%8D%E6%8F%90%E4%BA%A4%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="1-场景一（多次点击按钮提交表单）"><a href="#1-场景一（多次点击按钮提交表单）" class="headerlink" title="1. 场景一（多次点击按钮提交表单）"></a>1. 场景一（多次点击按钮提交表单）</h3><p>如果网速比较慢的情况下，用户提交表单后，发现服务器半天都没有响应，那么用户可能会以为是自己没有提交表单，就会再点击提交按钮重复提交表单。面对这个情况，如果只是在jsp页面，加上js判断的代码<br><a id="more"></a><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> checkSubmitFlg = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (checkSubmitFlg == <span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">            alert(<span class="string">"重复提交"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">    checkSubmitFlg = <span class="literal">true</span>;   </span><br><span class="line"></span><br><span class="line">    myform.submit();</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<p>JavaScript是可以解决这个问题的，当然还可以”用JavaScript控制Form表单只能提交一次”。只是点提交按钮后让按钮变灰类似手机端的做法。但是这种做法针对以下2,3场景确不行。</p>
<h3 id="2-场景二-（点刷新）-场景三（点后退）"><a href="#2-场景二-（点刷新）-场景三（点后退）" class="headerlink" title="2. 场景二 （点刷新）    场景三（点后退）"></a>2. 场景二 （点刷新）    场景三（点后退）</h3><p>场景二表单提交后用户点击【刷新】按钮导致表单重复提交 和 场景三用户提交表单后，点击浏览器的【后退】按钮回退到表单页面后进行再次提交，用户这样的操作为了解决重复提交表单的问题，我们可以在服务端利用session去解决。</p>
<p>具体的做法：在服务器端生成一个唯一的随机标识号，专业术语称为Token(令牌)，同时在当前用户的Session域中保存这个Token。然后将Token发送到客户端的Form表单中，在Form表单中使用隐藏域来存储这个Token，表单提交的时候连同这个Token一起提交到服务器端，然后在服务器端判断客户端提交上来的Token与服务器端生成的Token是否一致，如果不一致，那就是重复提交了，此时服务器端就可以不处理重复提交的表单。如果相同则处理表单提交，处理完后清除当前用户的Session域中存储的标识号。</p>
<p>在下列情况下，服务器程序将拒绝处理用户提交的表单请求：</p>
<blockquote>
<p>存储Session域中的Token(令牌)与表单提交的Token(令牌)不同。<br>当前用户的Session中不存在Token(令牌)。<br>用户提交的表单数据中没有Token(令牌)。</p>
</blockquote>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[开发用ubuntu初始化]]></title>
      <url>/2016/01/23/%E7%94%A8ubuntu%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      <content type="html"><![CDATA[<h3 id="1-更换国内源"><a href="#1-更换国内源" class="headerlink" title="1. 更换国内源"></a>1. 更换国内源</h3><a id="more"></a>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> xenial main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> xenial-security main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> xenial-updates main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> xenial-backports main restricted universe multiverse</span><br><span class="line"><span class="comment">##测试版源</span></span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> xenial-proposed main restricted universe multiverse</span><br><span class="line"><span class="comment"># 源码</span></span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> xenial main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> xenial-security main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> xenial-updates main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> xenial-backports main restricted universe multiverse</span><br><span class="line"><span class="comment">##测试版源</span></span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> xenial-proposed main restricted universe multiverse</span><br><span class="line"><span class="comment"># Canonical 合作伙伴和附加</span></span><br><span class="line">deb http:<span class="regexp">//</span>archive.canonical.com<span class="regexp">/ubuntu/</span> xenial partner</span><br><span class="line">deb http:<span class="regexp">//</span>extras.ubuntu.com<span class="regexp">/ubuntu/</span> xenial main</span><br></pre></td></tr></table></figure>
<h3 id="2-samba磁盘映射"><a href="#2-samba磁盘映射" class="headerlink" title="2. samba磁盘映射"></a>2. samba磁盘映射</h3><p>备份Samba的配置文件：sudo cp  /etc/samba/smb.conf  /etc/samba/smb.conf.bak<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#我在/etc/samba/smb.conf文件的末尾之添加如下字段：</span></span><br><span class="line"><span class="section">[hehanlin]</span></span><br><span class="line"><span class="attr">comment</span> = hehanlin</span><br><span class="line"><span class="attr">path</span> = yourpath</span><br><span class="line"><span class="attr">writable</span> = <span class="literal">yes</span></span><br></pre></td></tr></table></figure></p>
<p>然后执行 sudo smbpasswd  -a   hehanlin</p>
<p>####对待iptables</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">普通青年：直接在命令行敲…</span><br><span class="line">sudo<span class="built_in"> service </span> iptables stop。</span><br><span class="line">文艺青年：依次在命令行敲…</span><br><span class="line">sudo iptables -I RH-Firewall-1-INPUT 5 -m state --state NEW -m tcp -p tcp --dport 139 -j ACCEPT</span><br><span class="line">sudo iptables -I RH-Firewall-1-INPUT 5 -m state --state NEW -m tcp -p tcp --dport 445 -j ACCEPT</span><br><span class="line">sudo iptables -I RH-Firewall-1-INPUT 5 -p udp -m udp --dport 137 -j ACCEPT</span><br><span class="line">sudo iptables -I RH-Firewall-1-INPUT 5 -p udp -m udp --dport 138-j ACCEPT</span><br><span class="line">sudo iptables-save</span><br><span class="line">sudo<span class="built_in"> service </span>iptables  restart</span><br></pre></td></tr></table></figure>
<h4 id="同样，在对在selinux的问题上："><a href="#同样，在对在selinux的问题上：" class="headerlink" title="同样，在对在selinux的问题上："></a>同样，在对在selinux的问题上：</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">普通青年：直接在命令行敲…</span><br><span class="line">sudo setenforce 0</span><br><span class="line">sudo vi /etc/selinux/config</span><br><span class="line">将<span class="attribute">SELINUX</span>=enforcing改为SELINUX=disabled为开机重启后不再执行setenfore节约光阴。</span><br><span class="line">文艺青年：依次在命令行敲…</span><br><span class="line">sudo setsebool -Psamba_enable_home_dirs on</span><br><span class="line">sudo setsebool -Psamba_export_all_rw on</span><br><span class="line">完事儿之后再：getsebool  -a  | grep  samba一把，你懂得…</span><br></pre></td></tr></table></figure>
<h3 id="3-安装需要的一切环境"><a href="#3-安装需要的一切环境" class="headerlink" title="3. 安装需要的一切环境"></a>3. 安装需要的一切环境</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install <span class="keyword">python</span> <span class="keyword">python</span>-mysql nginx mysql-server php</span><br></pre></td></tr></table></figure>
<h3 id="4-pip源"><a href="#4-pip源" class="headerlink" title="4. pip源"></a>4. pip源</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#linux下运行命令sudo vi ~/.pip/pip.conf然后写入如下内容并保存</span></span><br><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">trusted-host</span> = mirrors.aliyun.com</span><br><span class="line"><span class="attr">index-url</span> = http://mirrors.aliyun.com/pypi/simple</span><br></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器解析原理]]></title>
      <url>/2016/01/16/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<p>原文链接:<a href="http://coolshell.cn/articles/9666.html" target="_blank" rel="noopener">http://coolshell.cn/articles/9666.html</a><br>废话少说，先来看个图：</p>
<p><img src="http://coolshell.cn//wp-content/uploads/2013/05/Render-Process.jpg" alt=""></p>
<a id="more"></a>
<p>从上面这个图中，我们可以看到那么几个事：</p>
<p>1）浏览器会解析三个东西：</p>
<ul>
<li><p>一个是HTML/SVG/XHTML，事实上，Webkit有三个C++的类对应这三类文档。解析这三种文件会产生一个DOM Tree。</p>
</li>
<li><p>CSS，解析CSS会产生CSS规则树。</p>
</li>
<li><p>Javascript，脚本，主要是通过DOM API和CSSOM API来操作DOM Tree和CSS Rule Tree.</p>
</li>
</ul>
<p>2）解析完成后，浏览器引擎会通过DOM Tree 和 CSS Rule Tree 来构造 Rendering Tree。注意：</p>
<ul>
<li><p>Rendering Tree 渲染树并不等同于DOM树，因为一些像Header或display:none的东西就没必要放在渲染树中了。</p>
</li>
<li><p>CSS 的 Rule Tree主要是为了完成匹配并把CSS Rule附加上Rendering Tree上的每个Element。也就是DOM结点。也就是所谓的Frame。</p>
</li>
<li><p>然后，计算每个Frame（也就是每个Element）的位置，这又叫layout和reflow过程。</p>
</li>
</ul>
<p>3）最后通过调用操作系统Native GUI的API绘制。</p>
<h3 id="DOM解析"><a href="#DOM解析" class="headerlink" title="DOM解析"></a>DOM解析</h3><p>HTML的DOM Tree解析如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Web page parsing<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Web page parsing<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is an example Web page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面这段HTML会解析成这样：</p>
<p><img src="http://coolshell.cn//wp-content/uploads/2013/05/DOM-Tree-01.jpg" alt=""></p>
<p>下面是另一个有SVG标签的情况。</p>
<p><img src="http://coolshell.cn//wp-content/uploads/2013/05/DOM-Tree-02.jpg" alt=""></p>
<h3 id="CSS解析"><a href="#CSS解析" class="headerlink" title="CSS解析"></a>CSS解析</h3><p>CSS的解析大概是下面这个样子（下面主要说的是Gecko也就是Firefox的玩法），假设我们有下面的HTML文档：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">doc</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>A few quotes<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">para</span>&gt;</span></span><br><span class="line">  Franklin said that <span class="tag">&lt;<span class="name">quote</span>&gt;</span>"A penny saved is a penny earned."<span class="tag">&lt;/<span class="name">quote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">para</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">para</span>&gt;</span></span><br><span class="line">  FDR said <span class="tag">&lt;<span class="name">quote</span>&gt;</span>"We have nothing to fear but <span class="tag">&lt;<span class="name">span</span>&gt;</span>fear itself.<span class="tag">&lt;/<span class="name">span</span>&gt;</span>"<span class="tag">&lt;/<span class="name">quote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">para</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">doc</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>于是DOM Tree是这个样子：</p>
<p><img src="http://coolshell.cn//wp-content/uploads/2013/05/DOM-Tree-Example.jpg" alt=""></p>
<p>然后我们的CSS文档是这样的：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* rule 1 */</span> <span class="selector-tag">doc</span> &#123; <span class="attribute">display</span>: block; <span class="attribute">text-indent</span>: <span class="number">1em</span>; &#125;</span><br><span class="line"><span class="comment">/* rule 2 */</span> <span class="selector-tag">title</span> &#123; <span class="attribute">display</span>: block; <span class="attribute">font-size</span>: <span class="number">3em</span>; &#125;</span><br><span class="line"><span class="comment">/* rule 3 */</span> <span class="selector-tag">para</span> &#123; <span class="attribute">display</span>: block; &#125;</span><br><span class="line"><span class="comment">/* rule 4 */</span> <span class="selector-attr">[class="emph"]</span> &#123; <span class="attribute">font-style</span>: italic; &#125;</span><br></pre></td></tr></table></figure>
<p>于是我们的CSS Rule Tree会是这个样子：</p>
<p><img src="http://coolshell.cn//wp-content/uploads/2013/05/CSS-Rule-Tree-Example.jpg" alt=""></p>
<p>注意，图中的第4条规则出现了两次，一次是独立的，一次是在规则3的子结点。所以，我们可以知道，建立CSS Rule Tree是需要比照着DOM Tree来的。CSS匹配DOM Tree主要是从右到左解析CSS的Selector，好多人以为这个事会比较快，其实并不一定。关键还看我们的CSS的Selector怎么写了。</p>
<p><strong>注意：CSS匹配HTML元素是一个相当复杂和有性能问题的事情。所以，你就会在N多地方看到很多人都告诉你，DOM树要小，CSS尽量用id和class，千万不要过渡层叠下去，……</strong></p>
<p>通过这两个树，我们可以得到一个叫Style Context Tree，也就是下面这样（把CSS Rule结点Attach到DOM Tree上）：</p>
<p><img src="http://coolshell.cn//wp-content/uploads/2013/05/CSS-Content-Tree-Example.jpg" alt=""></p>
<p>所以，Firefox基本上来说是通过CSS 解析 生成 CSS Rule Tree，然后，通过比对DOM生成Style Context Tree，然后Firefox通过把Style Context Tree和其Render Tree（Frame Tree）关联上，就完成了。注意：Render Tree会把一些不可见的结点去除掉。而<strong>Firefox中所谓的Frame就是一个DOM结点，不要被其名字所迷惑了</strong>。</p>
<p><img src="http://coolshell.cn//wp-content/uploads/2013/05/Firefox-style-context-tree.png" alt=""></p>
<p>注：Webkit不像Firefox要用两个树来干这个，Webkit也有Style对象，它直接把这个Style对象存在了相应的DOM结点上了。</p>
<h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><p>渲染的流程基本上如下（黄色的四个步骤）：</p>
<ol>
<li>计算CSS样式</li>
<li>构建Render Tree</li>
<li>Layout – 定位坐标和大小，是否换行，各种position, overflow, z-index属性 ……</li>
<li>正式开画</li>
</ol>
<p><img src="http://coolshell.cn//wp-content/uploads/2013/05/Render-Process-Skipping.jpg" alt=""></p>
<p>注意：上图流程中有很多连接线，这表示了Javascript动态修改了DOM属性或是CSS属会导致重新Layout，有些改变不会，就是那些指到天上的箭头，比如，修改后的CSS rule没有被匹配到，等。</p>
<p>这里重要要说两个概念，一个是Reflow，另一个是Repaint。这两个不是一回事。</p>
<ul>
<li><p>Repaint——屏幕的一部分要重画，比如某个CSS的背景色变了。但是元素的几何尺寸没有变。</p>
</li>
<li><p>Reflow——意味着元件的几何尺寸变了，我们需要重新验证并计算Render Tree。是Render Tree的一部分或全部发生了变化。这就是Reflow，或是Layout。（<strong>HTML使用的是flow based layout，也就是流式布局，所以，如果某元件的几何尺寸发生了变化，需要重新布局，也就叫reflow</strong>）reflow 会从<html>这个root frame开始递归往下，依次计算所有的结点几何尺寸和位置，在reflow过程中，可能会增加一些frame，比如一个文本字符串必需被包装起来。</html></p>
</li>
</ul>
<p>下面是一个打开Wikipedia时的Layout/reflow的视频（注：HTML在初始化的时候也会做一次reflow，叫 <dfn>intial reflow</dfn>），你可以感受一下：</p>
<center><object width="480" height="400" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" align="middle"><param name="src" value="http://player.youku.com/player.php/sid/XMzI5MDg0OTA0/v.swf"><param name="allowfullscreen" value="true"><param name="quality" value="high"><param name="allowscriptaccess" value="always"><embed width="480" height="400" type="application/x-shockwave-flash" src="http://player.youku.com/player.php/sid/XMzI5MDg0OTA0/v.swf" allowfullscreen="true" quality="high" allowscriptaccess="always" align="middle"></object></center>

<p>Reflow的成本比Repaint的成本高得多的多。DOM Tree里的每个结点都会有reflow方法，一个结点的reflow很有可能导致子结点，甚至父点以及同级结点的reflow。<strong>在一些高性能的电脑上也许还没什么，但是如果reflow发生在手机上，那么这个过程是非常痛苦和耗电的</strong>。</p>
<p>所以，下面这些动作有很大可能会是成本比较高的。</p>
<ul>
<li>当你增加、删除、修改DOM结点时，会导致Reflow或Repaint</li>
<li>当你移动DOM的位置，或是搞个动画的时候。</li>
<li>当你修改CSS样式的时候。</li>
<li>当你Resize窗口的时候（移动端没有这个问题），或是滚动的时候。</li>
<li>当你修改网页的默认字体时。</li>
</ul>
<p>注：display:none会触发reflow，而visibility:hidden只会触发repaint，因为没有发现位置变化。</p>
<p>多说两句关于滚屏的事，通常来说，如果在滚屏的时候，我们的页面上的所有的像素都会跟着滚动，那么性能上没什么问题，因为我们的显卡对于这种把全屏像素往上往下移的算法是很快。但是如果你有一个fixed的背景图，或是有些Element不跟着滚动，有些Elment是动画，那么这个滚动的动作对于浏览器来说会是相当相当痛苦的一个过程。你可以看到很多这样的网页在滚动的时候性能有多差。因为滚屏也有可能会造成reflow。</p>
<p>基本上来说，reflow有如下的几个原因：</p>
<ul>
<li>Initial。网页初始化的时候。</li>
<li>Incremental。一些Javascript在操作DOM Tree时。</li>
<li>Resize。其些元件的尺寸变了。</li>
<li>StyleChange。如果CSS的属性发生变化了。</li>
<li>Dirty。几个Incremental的reflow发生在同一个frame的子树上。</li>
</ul>
<p>好了，我们来看一个示例吧：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bstyle = <span class="built_in">document</span>.body.style; <span class="comment">// cache</span></span><br><span class="line"> </span><br><span class="line">bstyle.padding = <span class="string">"20px"</span>; <span class="comment">// reflow, repaint</span></span><br><span class="line">bstyle.border = <span class="string">"10px solid red"</span>; <span class="comment">//  再一次的 reflow 和 repaint</span></span><br><span class="line"> </span><br><span class="line">bstyle.color = <span class="string">"blue"</span>; <span class="comment">// repaint</span></span><br><span class="line">bstyle.backgroundColor = <span class="string">"#fad"</span>; <span class="comment">// repaint</span></span><br><span class="line"> </span><br><span class="line">bstyle.fontSize = <span class="string">"2em"</span>; <span class="comment">// reflow, repaint</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// new DOM element - reflow, repaint</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">'dude!'</span>));</span><br></pre></td></tr></table></figure>
<p>当然，我们的浏览器是聪明的，它不会像上面那样，你每改一次样式，它就reflow或repaint一次。<strong>一般来说，浏览器会把这样的操作积攒一批，然后做一次reflow，这又叫异步reflow或增量异步reflow</strong>。但是有些情况浏览器是不会这么做的，比如：resize窗口，改变了页面默认的字体，等。对于这些操作，浏览器会马上进行reflow。</p>
<p>但是有些时候，我们的脚本会阻止浏览器这么干，比如：如果我们请求下面的一些DOM值：</p>
<ol>
<li>offsetTop, offsetLeft, offsetWidth, offsetHeight</li>
<li>scrollTop/Left/Width/Height</li>
<li>clientTop/Left/Width/Height</li>
<li>IE中的 getComputedStyle(), 或 currentStyle</li>
</ol>
<p>因为，如果我们的程序需要这些值，那么浏览器需要返回最新的值，而这样一样会flush出去一些样式的改变，从而造成频繁的reflow/repaint。</p>
<h3 id="减少reflow-repaint"><a href="#减少reflow-repaint" class="headerlink" title="减少reflow/repaint"></a>减少reflow/repaint</h3><p>下面是一些Best Practices：</p>
<p><strong>1）不要一条一条地修改DOM的样式。与其这样，还不如预先定义好css的class，然后修改DOM的className。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> left = <span class="number">10</span>,</span><br><span class="line">top = <span class="number">10</span>;</span><br><span class="line">el.style.left = left + <span class="string">"px"</span>;</span><br><span class="line">el.style.top  = top  + <span class="string">"px"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Good</span></span><br><span class="line">el.className += <span class="string">" theclassname"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Good</span></span><br><span class="line">el.style.cssText += <span class="string">"; left: "</span> + left + <span class="string">"px; top: "</span> + top + <span class="string">"px;"</span>;</span><br></pre></td></tr></table></figure>
<p><strong>2）把DOM离线后修改。如：</strong></p>
<ul>
<li>使用documentFragment 对象在内存里操作DOM</li>
<li>先把DOM给display:none(有一次reflow)，然后你想怎么改就怎么改。比如修改100次，然后再把他显示出来。</li>
<li>clone一个DOM结点到内存里，然后想怎么改就怎么改，改完后，和在线的那个的交换一下。</li>
</ul>
<p>3）<strong>不要把DOM结点的属性值放在一个循环里当成循环里的变量。</strong>不然这会导致大量地读写这个结点的属性。</p>
<p>4）<strong>尽可能的修改层级比较低的DOM</strong>。当然，改变层级比较底的DOM有可能会造成大面积的reflow，但是也可能影响范围很小。</p>
<p>5）<strong>为动画的HTML元件使用fixed或absoult的position</strong>，那么修改他们的CSS是不会reflow的。</p>
<p>6）<strong>千万不要使用table布局</strong>。因为可能很小的一个小改动会造成整个table的重新布局。</p>
<blockquote>
<p>In this manner, the user agent can begin to lay out the table once the entire first row has been received. Cells in subsequent rows do not affect column widths. Any cell that has content that overflows uses the ‘overflow’ property to determine whether to clip the overflow content.</p>
<p><cite><a href="http://www.w3.org/TR/CSS21/tables.html#fixed-table-layout" target="_blank" rel="noopener">Fixed layout, CSS 2.1 Specification</a></cite></p>
<p>This algorithm may be inefficient since it requires the user agent to have access to all the content in the table before determining the final layout and may demand more than one pass.</p>
<p><cite><a href="http://www.w3.org/TR/CSS21/tables.html#auto-table-layout" target="_blank" rel="noopener">Automatic layout, CSS 2.1 Specification</a></cite></p>
</blockquote>
<h3 id="几个工具和几篇文章"><a href="#几个工具和几篇文章" class="headerlink" title="几个工具和几篇文章"></a>几个工具和几篇文章</h3><p>有时候，你会也许会发现在IE下，你不知道你修改了什么东西，结果CPU一下子就上去了到100%，然后过了好几秒钟repaint/reflow才完成，这种事情以IE的年代时经常发生。所以，我们需要一些工具帮我们看看我们的代码里有没有什么不合适的东西。</p>
<ul>
<li><p>Chrome下，Google的<a href="http://code.google.com/webtoolkit/speedtracer/" target="_blank" rel="noopener">SpeedTracer</a>是个非常强悍的工作让你看看你的浏览渲染的成本有多大。其实Safari和Chrome都可以使用开发者工具里的一个Timeline的东东。</p>
</li>
<li><p>Firefox下这个基于Firebug的叫<a href="https://addons.mozilla.org/en-US/firefox/addon/firebug-paint-events/" target="_blank" rel="noopener">Firebug Paint Events</a>的插件也不错。</p>
</li>
<li><p>IE下你可以用一个叫<a href="http://ajax.dynatrace.com/pages/" target="_blank" rel="noopener">dynaTrace</a>的IE扩展。</p>
</li>
</ul>
<p>最后，别忘了下面这几篇提高浏览器性能的文章：</p>
<ul>
<li><a href="http://code.google.com/speed/page-speed/docs/rules_intro.html" target="_blank" rel="noopener">Google – Web Performance Best Practices</a></li>
<li><a href="http://developer.yahoo.com/performance/rules.html" target="_blank" rel="noopener">Yahoo – Best Practices for Speeding Up Your Web Site</a></li>
<li><a href="http://stevesouders.com/hpws/rules.php" target="_blank" rel="noopener">Steve Souders – 14 Rules for Faster-Loading Web Sites</a></li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><p>David Baron的演讲：Fast CSS: How Browsers Lay Out Web Pages：<a href="http://dbaron.org/talks/2012-03-11-sxsw/slide-1.xhtml" target="_blank" rel="noopener">slideshow</a>, <a href="http://dbaron.org/talks/2012-03-11-sxsw/master.xhtml" target="_blank" rel="noopener">all slides</a>, <a href="http://audio.sxsw.com/2012/podcasts/11-ACC-Fast_CSS_How_Browser_Layout.mp3" target="_blank" rel="noopener">audio (MP3)</a>, <a href="http://schedule.sxsw.com/2012/events/event_IAP12909" target="_blank" rel="noopener">Session page</a>, <a href="http://lanyrd.com/2012/sxsw-interactive/spmbt/" target="_blank" rel="noopener">Lanyrd page</a></p>
</li>
<li><p>How Browsers Work: <a href="http://taligarsiel.com/Projects/howbrowserswork1.htm" target="_blank" rel="noopener">http://taligarsiel.com/Projects/howbrowserswork1.htm</a></p>
</li>
<li><p>Mozilla 的 Style System Overview：<a href="https://developer.mozilla.org/en-US/docs/Style_System_Overview" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Style_System_Overview</a></p>
</li>
<li><p>Mozilla 的 Note of reflow： <a href="http://www-archive.mozilla.org/newlayout/doc/reflow.html" target="_blank" rel="noopener">http://www-archive.mozilla.org/newlayout/doc/reflow.html</a></p>
</li>
<li><p>Rendering: repaint, reflow/relayout, restyle：<a href="http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/" target="_blank" rel="noopener">http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/</a></p>
</li>
<li><p>Effective Rendering CSS：<a href="http://css-tricks.com/efficiently-rendering-css/" target="_blank" rel="noopener">http://css-tricks.com/efficiently-rendering-css/</a></p>
</li>
<li><p>Webkit Rendering文档：<a href="http://trac.webkit.org/wiki/WebCoreRendering" target="_blank" rel="noopener">http://trac.webkit.org/wiki/WebCoreRendering</a></p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器输入网址后发生了神魔]]></title>
      <url>/2016/01/15/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E7%A5%9E%E9%AD%94/</url>
      <content type="html"><![CDATA[<blockquote>
<p>该文章取自网上别人博客,并做了少量修改和加入了一些个人的见解,本人才疏学浅,如有冒犯,请多海涵.<br>链接地址:    <a href="http://www.linux178.com/web/httprequest.html" target="_blank" rel="noopener">http://www.linux178.com/web/httprequest.html</a></p>
</blockquote>
<a id="more"></a>
<p>关于HTTP协议可以参考以下：</p>
<blockquote>
<p>HTTP协议漫谈  <a href="http://kb.cnblogs.com/page/140611/" target="_blank" rel="noopener">http://kb.cnblogs.com/page/140611/</a><br>HTTP协议概览  <a href="http://www.cnblogs.com/vamei/archive/2013/05/11/3069788.html" target="_blank" rel="noopener">http://www.cnblogs.com/vamei/archive/2013/05/11/3069788.html</a><br>了解HTTP Headers的方方面面  <a href="http://kb.cnblogs.com/page/55442/" target="_blank" rel="noopener">http://kb.cnblogs.com/page/55442/</a></p>
</blockquote>
<p>当我们在浏览器的地址栏输入 <a href="http://www.linux178.com" target="_blank" rel="noopener">www.linux178.com</a> ，然后回车，回车这一瞬间到看到页面到底发生了什么呢？</p>
<p>域名解析 –&gt; 发起TCP的3次握手 –&gt; 建立TCP连接后发起http请求 –&gt; 服务器响应http请求，浏览器得到html代码 –&gt; 浏览器解析html代码，并请求html代码中的资源（如js、css、图片等） –&gt; 浏览器对页面进行渲染呈现给用户</p>
<p>以下就是上面过程的一一分析，我们就以Chrome浏览器为例：</p>
<h1 id="一-域名解析"><a href="#一-域名解析" class="headerlink" title="一.域名解析"></a>一.域名解析</h1><p>首先Chrome浏览器会解析 www.linux178.com 这个域名（准确的叫法应该是主机名）对应的IP地址。怎么解析到对应的IP地址？</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1</span> Chrome浏览器 会首先搜索浏览器自身的DNS缓存（缓存时间比较短，大概只有<span class="number">1</span>分钟，且只能容纳<span class="number">1000</span>条缓存），看自身的缓存中是否有www.linux178.com 对应的条目，而且没有过期，如果有且没有过期则解析到此结束。</span><br><span class="line">     注：我们怎么查看Chrome自身的缓存？可以使用 chrome://net-internals/<span class="symbol">#dns</span> 来进行查看</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> 如果浏览器自身的缓存里面没有找到对应的条目，那么Chrome会搜索操作系统自身的DNS缓存,如果找到且没有过期则停止搜索解析到此结束.</span><br><span class="line">      注：怎么查看操作系统自身的DNS缓存，以Windows系统为例，可以在命令行下使用 ipconfig /displaydns 来进行查看  </span><br><span class="line"></span><br><span class="line"><span class="number">3</span> 如果在Windows系统的DNS缓存也没有找到，那么尝试读取hosts文件（位于C:\Windows\System32\drivers\etc），看看这里面有没有该域名对应的<span class="built_in">IP</span>地址，如果有则解析成功。</span><br><span class="line"></span><br><span class="line"><span class="number">4</span> 如果在hosts文件中也没有找到对应的条目，浏览器就会发起一个DNS的系统调用，就会向本地配置的首选DNS服务器（一般是电信运营商提供的，也可以使用像Google提供的DNS服务器）发起域名解析请求（通过的是UDP协议向DNS的<span class="number">53</span>端口发起请求，这个请求是递归的请求，也就是运营商的DNS服务器必须得提供给我们该域名的<span class="built_in">IP</span>地址），运营商的DNS服务器首先查找自身的缓存，找到对应的条目，且没有过期，则解析成功。如果没有找到对应的条目，则有运营商的DNS代我们的浏览器发起迭代DNS解析请求，它首先是会找根域的DNS的<span class="built_in">IP</span>地址（这个DNS服务器都内置<span class="number">13</span>台根域的DNS的<span class="built_in">IP</span>地址），找打根域的DNS地址，就会向其发起请求（请问www.linux178.com这个域名的<span class="built_in">IP</span>地址是多少啊？），根域发现这是一个顶级域com域的一个域名，于是就告诉运营商的DNS我不知道这个域名的<span class="built_in">IP</span>地址，但是我知道com域的<span class="built_in">IP</span>地址，你去找它去，于是运营商的DNS就得到了com域的<span class="built_in">IP</span>地址，又向com域的<span class="built_in">IP</span>地址发起了请求（请问www.linux178.com这个域名的<span class="built_in">IP</span>地址是多少?）,com域这台服务器告诉运营商的DNS我不知道www.linux178.com这个域名的<span class="built_in">IP</span>地址，但是我知道linux178.com这个域的DNS地址，你去找它去，于是运营商的DNS又向linux178.com这个域名的DNS地址（这个一般就是由域名注册商提供的，像万网，新网等）发起请求（请问www.linux178.com这个域名的<span class="built_in">IP</span>地址是多少？），这个时候linux178.com域的DNS服务器一查，诶，果真在我这里，于是就把找到的结果发送给运营商的DNS服务器，这个时候运营商的DNS服务器就拿到了www.linux178.com这个域名对应的<span class="built_in">IP</span>地址，并返回给Windows系统内核，内核又把结果返回给浏览器，终于浏览器拿到了www.linux178.com对应的<span class="built_in">IP</span>地址，该进行一步的动作了。</span><br><span class="line"></span><br><span class="line">注：一般情况下是不会进行以下步骤的</span><br><span class="line"></span><br><span class="line">如果经过以上的<span class="number">4</span>个步骤，还没有解析成功，那么会进行如下步骤：</span><br><span class="line"></span><br><span class="line"><span class="number">5</span> 操作系统就会查找NetBIOS name Cache（NetBIOS名称缓存，就存在客户端电脑中的），那这个缓存有什么东西呢？凡是最近一段时间内和我成功通讯的计算机的计算机名和<span class="built_in">Ip</span>地址，就都会存在这个缓存里面。什么情况下该步能解析成功呢？就是该名称正好是几分钟前和我成功通信过，那么这一步就可以成功解析。</span><br><span class="line"></span><br><span class="line"><span class="number">6</span> 如果第<span class="number">5</span>步也没有成功，那会查询WINS 服务器（是NETBIOS名称和<span class="built_in">IP</span>地址对应的服务器）</span><br><span class="line"></span><br><span class="line"><span class="number">7</span> 如果第<span class="number">6</span>步也没有查询成功，那么客户端就要进行广播查找</span><br><span class="line"></span><br><span class="line"><span class="number">8</span> 如果第<span class="number">7</span>步也没有成功，那么客户端就读取LMHOSTS文件（和HOSTS文件同一个目录下，写法也一样）</span><br><span class="line"></span><br><span class="line">如果第八步还没有解析成功，那么就宣告这次解析失败，那就无法跟目标计算机进行通信。只要这八步中有一步可以解析成功，那就可以成功和目标计算机进行通信。</span><br></pre></td></tr></table></figure>
<p>看下图抓包截图：<br> Linux虚拟机测试，使用命令 wget www.linux178.com 来请求，发现直接使用chrome浏览器请求时，干扰请求比较多，所以就使用wget命令来请求，不过使用wget命令只能把index.html请求回来，并不会对index.html中包含的静态资源（js、css等文件）进行请求。</p>
<p><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2F2071612206.png" alt="http://liqiong520-hexo.stor.sinaapp.com/img%2F2071612206.png"></p>
<p>抓包分析：</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="symbol">1 </span>号包，这个是那台虚拟机在广播，要获取<span class="number">192.168.100.254</span>（也就是网关）的MAC地址，因为局域网的通信靠的是MAC地址，它为什么需要跟网关进行通信是因为我们的DNS服务器IP是外围IP，要出去必须要依靠网关帮我们出去才行。</span><br><span class="line"><span class="symbol">2 </span>号包，这个是网关收到了虚拟机的广播之后，回应给虚拟机的回应，告诉虚拟机自己的MAC地址，于是客户端找到了路由出口。</span><br><span class="line"></span><br><span class="line"><span class="symbol">3 </span>号包，这个包是wget命令向系统配置的DNS服务器提出域名解析请求（准确的说应该是wget发起了一个DNS解析的系统调用），请求的域名www.linux178.<span class="keyword">com</span>,期望得到的是IP6的地址（AAAA代表的是IPv6地址）</span><br><span class="line"><span class="symbol">4 </span>号包，这个DNS服务器给系统的响应，很显然目前使用IPv6的还是极少数，所以得不到AAAA记录的</span><br><span class="line"><span class="symbol">5 </span>号包，这个还是请求解析IPv6地址，但是www.linux178.<span class="keyword">com</span>.leo.<span class="keyword">com</span>这个主机名是不存在的，所以得到结果就是no such <span class="keyword">name</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">6 </span>号包，这个才是请求的域名对应的IPv4地址（A记录）</span><br><span class="line"><span class="symbol">7 </span>号包，DNS服务器不管是从缓存里面，还是进行迭代查询最终得到了域名的IP地址，响应给了系统，系统再给了wget命令，wget于是得到了www.linux178.<span class="keyword">com</span>的IP地址，这里也可以看出客户端和本地的DNS服务器是递归的查询（也就是服务器必须给客户端一个结果）这就可以开始下一步了，进行TCP的三次握手。</span><br></pre></td></tr></table></figure>
<h1 id="二-发起TCP的3次握手"><a href="#二-发起TCP的3次握手" class="headerlink" title="二.发起TCP的3次握手"></a>二.发起TCP的3次握手</h1><p>拿到域名对应的IP地址之后，User-Agent（一般是指浏览器）会以一个随机端口（1024 &lt; 端口 &lt; 65535）向服务器的WEB程序（常用的有httpd,nginx等）80端口发起TCP的连接请求。这个连接请求（原始的http请求经过TCP/IP4层模型的层层封包）到达服务器端后（这中间通过各种路由设备，局域网内除外），进入到网卡，然后是进入到内核的TCP/IP协议栈（用于识别该连接请求，解封包，一层一层的剥开），还有可能要经过Netfilter防火墙（属于内核的模块）的过滤，最终到达WEB程序（本文就以Nginx为例），最终建立了TCP/IP的连接。</p>
<p>如下图：<br><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2F3920594834.png" alt="http://liqiong520-hexo.stor.sinaapp.com/img%2F3920594834.png"></p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1</span>） Client首先发送一个连接试探，ACK=<span class="number">0</span> 表示确认号无效，SYN = <span class="number">1</span> 表示这是一个连接请求或连接接受报文，同时表示这个数据报不能携带数据，seq = x 表示Client自己的初始序号（seq = <span class="number">0</span> 就代表这是第<span class="number">0</span>号包），这时候Client进入syn_sent状态，表示客户端等待服务器的回复</span><br><span class="line"><span class="number">2</span>） Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的SYN 和 ACK都置<span class="number">1</span> ，ack = x + <span class="number">1</span>表示期望收到对方下一个报文段的第一个数据字节序号是x+<span class="number">1</span>，同时表明x为止的所有数据都已正确收到（ack=<span class="number">1</span>其实是ack=<span class="number">0</span>+<span class="number">1</span>,也就是期望客户端的第<span class="number">1</span>个包），seq = y 表示Server 自己的初始序号（seq=<span class="number">0</span>就代表这是服务器这边发出的第<span class="number">0</span>号包）。这时服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待client的确认。</span><br><span class="line"><span class="number">3</span>） Client收到确认后还需再次发送确认，同时携带要发送给Server的数据。ACK 置<span class="number">1</span> 表示确认号ack= y + <span class="number">1</span> 有效（代表期望收到服务器的第<span class="number">1</span>个包），Client自己的序号seq= x + <span class="number">1</span>（表示这就是我的第<span class="number">1</span>个包，相对于第<span class="number">0</span>个包来说的），一旦收到Client的确认之后，这个TCP连接就进入Established状态，就可以发起http请求了。</span><br></pre></td></tr></table></figure>
<p>看抓包截图：</p>
<p><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2F1154594567.png" alt="http://liqiong520-hexo.stor.sinaapp.com/img%2F1154594567.png"></p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">9 </span>号包 这个就是对应上面的步骤 <span class="number">1</span>）</span><br><span class="line"><span class="symbol">10 </span>号包 这个对应的上面的步骤 <span class="number">2</span>）</span><br><span class="line"><span class="symbol">11 </span>号包 这个对应的上面的步骤 <span class="number">3</span>）</span><br></pre></td></tr></table></figure>
<p><strong>TCP 为什么需要3次握手？</strong></p>
<p>举个例子：</p>
<p>假设一个老外在故宫里面迷路了，看到了小明，于是就有下面的对话：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">老外： Excuse me，Can you <span class="keyword">Speak</span> English?</span><br><span class="line">小明： yes 。</span><br><span class="line">老外： OK,<span class="keyword">I</span> want ...</span><br></pre></td></tr></table></figure>
<p>在问路之前，老外先问小明是否会说英语，小明回答是的，这时老外才开始问路</p>
<p>2个计算机通信是靠协议（目前流行的TCP/IP协议）来实现,如果2个计算机使用的协议不一样，那是不能进行通信的，所以这个3次握手就相当于试探一下对方是否遵循TCP/IP协议，协商完成后就可以进行通信了，当然这样理解不是那么准确。</p>
<p><strong>为什么HTTP协议要基于TCP来实现？</strong></p>
<p>目前在Internet中所有的传输都是通过TCP/IP进行的，HTTP协议作为TCP/IP模型中应用层的协议也不例外，TCP是一个端到端的可靠的面向连接的协议，所以HTTP基于传输层TCP协议不用担心数据的传输的各种问题。</p>
<h1 id="三-建立TCP连接后发起http请求"><a href="#三-建立TCP连接后发起http请求" class="headerlink" title="三.建立TCP连接后发起http请求"></a>三.建立TCP连接后发起http请求</h1><p>进过TCP3次握手之后，浏览器发起了http的请求（看第⑫包），使用的http的方法 GET 方法，请求的URL是 / ,协议是HTTP/1.0</p>
<p><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2F3598482985.png" alt="http://liqiong520-hexo.stor.sinaapp.com/img%2F3598482985.png"></p>
<p>下面是第12号包的详细内容：</p>
<p><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2F765177171.png" alt="http://liqiong520-hexo.stor.sinaapp.com/img%2F765177171.png"></p>
<p>以上的报文是HTTP请求报文。</p>
<p>那么HTTP请求报文和响应报文会是什么格式呢？</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">起始行：如 <span class="builtin-name">GET</span> / HTTP/1.0 （请求的方法  请求的URL 请求所使用的协议）</span><br><span class="line">头部信息：User-Agent  Host等成对出现的值</span><br><span class="line">主体</span><br></pre></td></tr></table></figure>
<p>不管是请求报文还是响应报文都会遵循以上的格式。</p>
<p>那么起始行中的请求方法有哪些种呢？</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">GET:</span> 完整请求一个资源 （常用）</span><br><span class="line"><span class="symbol">HEAD:</span> 仅请求响应首部</span><br><span class="line">POST：提交表单  （常用）</span><br><span class="line"><span class="symbol">PUT:</span> (webdav) 上传 </span><br><span class="line">DELETE：(webdav) 删除 </span><br><span class="line">OPTIONS：返回请求的资源所支持的方法的方法 </span><br><span class="line"><span class="symbol">TRACE:</span> 追求一个资源请求中间所经过的代理</span><br></pre></td></tr></table></figure>
<p><strong>那什么是URL、URI、URN？</strong></p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">URI  <span class="built_in">Uniform</span> Resource Identifier 统一资源标识符</span><br><span class="line">URL  <span class="built_in">Uniform</span> Resource Locator 统一资源定位符 </span><br><span class="line">格式如下：  scheme:<span class="comment">//[username:password@]HOST:port/path/to/source</span></span><br><span class="line">             http:<span class="comment">//www.magedu.com/downloads/nginx-1.5.tar.gz</span></span><br><span class="line"></span><br><span class="line">URN  <span class="built_in">Uniform</span> Resource <span class="built_in">Name</span> 统一资源名称</span><br><span class="line"></span><br><span class="line">URL和URN 都属于 URI</span><br><span class="line"></span><br><span class="line">为了方便就把URL和URI暂时都通指一个东西</span><br></pre></td></tr></table></figure>
<p><strong>请求的协议有哪些种？</strong></p>
<p>有以下几种：</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http/0.9</span>: stateless</span><br><span class="line"><span class="attribute">http/1.0</span>: MIME, keep-alive (保持连接), 缓存</span><br><span class="line"><span class="attribute">http/1.1</span>: 更多的请求方法，更精细的缓存控制，持久连接(persistent connection) 比较常用</span><br></pre></td></tr></table></figure>
<p>下面是Chrome发起的http请求报文头部信息</p>
<p><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2F4111618011.png" alt="http://liqiong520-hexo.stor.sinaapp.com/img%2F4111618011.png"></p>
<p>其中</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Accept  就是告诉服务器端，我接受那些MIME类型</span><br><span class="line">Accept-Encoding  这个看起来是接受那些压缩方式的文件</span><br><span class="line">Accept-Lanague   告诉服务器能够发送哪些语言 </span><br><span class="line">Connection       告诉服务器支持keep-alive特性</span><br><span class="line">Cookie           每次请求时都会携带上Cookie以方便服务器端识别是否是同一个客户端</span><br><span class="line">Host             用来标识请求服务器上的那个虚拟主机，比如Nginx里面可以定义很多个虚拟主机</span><br><span class="line">                 那这里就是用来标识要访问那个虚拟主机。</span><br><span class="line">User-Agent       用户代理，一般情况是浏览器，也有其他类型，如：wget curl 搜索引擎的蜘蛛等     </span><br><span class="line"></span><br><span class="line">条件请求首部：</span><br><span class="line">If-Modified-Since 是浏览器向服务器端询问某个资源文件如果自从什么时间修改过，那么重新发给我，这样就保证服务器端资源</span><br><span class="line">             文件更新时，浏览器再次去请求，而不是使用缓存中的文件</span><br><span class="line">安全请求首部：</span><br><span class="line">Authorization: 客户端提供给服务器的认证信息；</span><br></pre></td></tr></table></figure>
<p><strong>什么是MIME？</strong></p>
<p>MIME（Multipurpose Internet Mail Extesions 多用途互联网邮件扩展）是一个互联网标准，它扩展了电子邮件标准，使其能够支持非ASCII字符、二进制格式附件等多种格式的邮件消息，这个标准被定义在RFC 2045、RFC 2046、RFC 2047、RFC 2048、RFC 2049等RFC中。 由RFC 822转变而来的RFC 2822，规定电子邮件标准并不允许在邮件消息中使用7位ASCII字符集以外的字符。正因如此，一些非英语字符消息和二进制文件，图像，声音等非文字消息都不能在电子邮件中传输。MIME规定了用于表示各种各样的数据类型的符号化方法。 此外，在万维网中使用的HTTP协议中也使用了MIME的框架，标准被扩展为互联网媒体类型。</p>
<p>MIME 遵循以下格式：major/minor 主类型/次类型 例如：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">image</span>/jpg</span><br><span class="line"><span class="built_in">image</span>/gif</span><br><span class="line"><span class="built_in">text</span>/html</span><br><span class="line">video/quicktime</span><br><span class="line">appliation/x-httpd-php</span><br></pre></td></tr></table></figure>
<h1 id="四-服务器端响应http请求，浏览器得到html代码"><a href="#四-服务器端响应http请求，浏览器得到html代码" class="headerlink" title="四.服务器端响应http请求，浏览器得到html代码"></a>四.服务器端响应http请求，浏览器得到html代码</h1><p>看下图 第12号包是http请求包，第32包是http响应包</p>
<p>服务器端WEB程序接收到http请求以后，就开始处理该请求，处理之后就返回给浏览器html文件。</p>
<p><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2F3221611147.png" alt="http://liqiong520-hexo.stor.sinaapp.com/img%2F3221611147.png"></p>
<p>第32号包 是服务器返回给客户端http响应包（200 ok 响应的MIME类型是text/html），代表这一次客户端发起的http请求已成功响应。200 代表是的 响应成功的状态码，还有其他的状态码如下：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1xx: 信息性状态码</span><br><span class="line">     100, 101</span><br><span class="line">2xx: 成功状态码</span><br><span class="line">     200：OK</span><br><span class="line">3xx: 重定向状态码</span><br><span class="line">     301: 永久重定向, Location响应首部的值仍为当前URL，因此为隐藏重定向;</span><br><span class="line">     302: 临时重定向，显式重定向, Location响应首部的值为新的URL</span><br><span class="line">     304：<span class="keyword">Not</span> Modified  未修改，比如本地缓存的资源文件和服务器上比较时，发现并没有修改，服务器返回一个304状态码，</span><br><span class="line">                         告诉浏览器，你不用请求该资源，直接使用本地的资源即可。</span><br><span class="line">4xx: 客户端错误状态码</span><br><span class="line">     404: <span class="keyword">Not</span> Found  请求的URL资源并不存在</span><br><span class="line">5xx: 服务器端错误状态码</span><br><span class="line">     500: Internal<span class="built_in"> Server </span><span class="builtin-name">Error</span>  服务器内部错误</span><br><span class="line">     502: Bad Gateway  前面代理服务器联系不到后端的服务器时出现</span><br><span class="line">     504：Gateway Timeout  这个是代理能联系到后端的服务器，但是后端的服务器在规定的时间内没有给代理服务器响应</span><br></pre></td></tr></table></figure>
<p>用Chrome浏览器看到的响应头信息：</p>
<p><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2F428253864.png" alt="http://liqiong520-hexo.stor.sinaapp.com/img%2F428253864.png"></p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Connection            使用keep-alive特性</span><br><span class="line">Content-Encoding      使用gzip方式对资源压缩</span><br><span class="line">Content-<span class="keyword">type</span>          MIME类型为html类型，字符集是 UTF-<span class="number">8</span></span><br><span class="line">Date                  响应的日期</span><br><span class="line">Server                使用的WEB服务器</span><br><span class="line">Transfer-<span class="symbol">Encoding:</span>chunked   分块传输编码 是http中的一种数据传输机制，允许HTTP由网页服务器发送给客户端应用（通常是网页浏览器）的数据可以分成多个部分，分块传输编码只在HTTP协议<span class="number">1.1</span>版本（HTTP/<span class="number">1.1</span>）中提供</span><br><span class="line">Vary  这个可以参考（<span class="symbol">http:</span>/<span class="regexp">/blog.csdn.net/tenfyguo</span><span class="regexp">/article/details</span><span class="regexp">/5939000）</span></span><br><span class="line"><span class="regexp">X-Pingback  参考（http:/</span><span class="regexp">/blog.sina.com.cn/s</span><span class="regexp">/blog_bb80041c0101fmfz.html）</span></span><br></pre></td></tr></table></figure>
<p><strong>那到底服务器端接收到http请求后是怎么样生成html文件？</strong></p>
<p>假设服务器端使用nginx+php(fastcgi)架构提供服务</p>
<p>1 nginx读取配置文件</p>
<p>我们在浏览器的地址栏里面输入的是 <a href="http://www.linux178.com" target="_blank" rel="noopener">http://www.linux178.com</a> （<a href="http://可以不用输入，浏览器会自动帮我们添加），其实完整的应该是[http://www.linux178.com./](http://www.linux178.com./" target="_blank" rel="noopener">http://可以不用输入，浏览器会自动帮我们添加），其实完整的应该是[http://www.linux178.com./](http://www.linux178.com./</a>) 后面还有个点（这个点代表就是根域，一般情况下我们不用输入，也不显示）,后面的/也是不用添加，浏览器会自动帮我们添加（且看第3部那个图里面的URL），那么实际请求的URL是<a href="http://www.linux178.com/" target="_blank" rel="noopener">http://www.linux178.com/</a>，那么好了Nginx在收到 浏览器 GET / 请求时，会读取http请求里面的头部信息，根据Host来匹配 自己的所有的虚拟主机的配置文件的server_name,看看有没有匹配的，有匹配那么就读取该虚拟主机的配置，发现如下配置：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root <span class="regexp">/web/</span>echo</span><br></pre></td></tr></table></figure>
<p>通过这个就知道所有网页文件的就在这个目录下 这个目录就是/ 当我们<a href="http://www.linux178.com/" target="_blank" rel="noopener">http://www.linux178.com/</a>时就是访问这个目录下面的文件，例如访问<a href="http://www.linux178.com/index.html" target="_blank" rel="noopener">http://www.linux178.com/index.html</a>,那么代表/web/echo下面有个文件叫index.html</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">index</span> <span class="keyword">index</span>.html <span class="keyword">index</span>.htm <span class="keyword">index</span>.php</span><br></pre></td></tr></table></figure>
<p>通过这个就能得知网站的首页文件是那个文件，也就是我们在入<a href="http://www.linux178.com/" target="_blank" rel="noopener">http://www.linux178.com/</a> ，nginx就会自动帮我们把index.html（假设首页是index.php 当然是会尝试的去找到该文件，如果没有找到该文件就依次往下找，如果这3个文件都没有找到，那么就抛出一个404错误）加到后面，那么添加之后的URL是/index.php,然后根据后面的配置进行处理</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*\.php(\/.*)*$</span> &#123;</span><br><span class="line">   <span class="attribute">root</span> /web/echo;</span><br><span class="line">   <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">   <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">   <span class="attribute">astcgi_param</span>  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">   <span class="attribute">include</span>        fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这一段配置指明凡是请求的URL中匹配（这里是启用了正则表达式进行匹配） *.php后缀的（后面跟的参数）都交给后端的fastcgi进程进行处理。</p>
<p>2 把php文件交给fastcgi进程去处理</p>
<p>于是nginx把/index.php这个URL交给了后端的fastcgi进程处理，等待fastcgi处理完成后（结合数据库查询出数据，填充模板生成html文件）返回给nginx一个index.html文档，Nginx再把这个index.html返回给浏览器，于是乎浏览器就拿到了首页的html代码，同时nginx写一条访问日志到日志文件中去。</p>
<p><strong>注1：nginx是怎么找index.php文件的？</strong></p>
<p>当nginx发现需要/web/echo/index.php文件时，就会向内核发起IO系统调用(因为要跟硬件打交道，这里的硬件是指硬盘，通常需要靠内核来操作，而内核提供的这些功能是通过系统调用来实现的)，告诉内核，我需要这个文件,内核从/开始找到web目录，再在web目录下找到echo目录，最后在echo目录下找到index.php文件，于是把这个index.php从硬盘上读取到内核自身的内存空间，然后再把这个文件复制到nginx进程所在的内存空间，于是乎nginx就得到了自己想要的文件了。</p>
<p><strong>注2：寻找文件在文件系统层面是怎么操作的？</strong></p>
<p>比如nginx需要得到/web/echo/index.php这个文件</p>
<p>每个分区（像ext3 ext3等文件系统，block块是文件存储的最小单元 默认是4096字节）都是包含元数据区和数据区，每一个文件在元数据区都有元数据条目（一般是128字节大小），每一个条目都有一个编号，我们称之为inode（index node 索引节点），这个inode里面包含 文件类型、权限、连接次数、属主和数组的ID、时间戳、这个文件占据了那些磁盘块也就是块的编号（block，每个文件可以占用多个block,并且block不一定是连续的，每个block是有编号的），如下图所示：</p>
<p><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2F843759812.png" alt="http://liqiong520-hexo.stor.sinaapp.com/img%2F843759812.png"></p>
<p>还有一个要点：目录其实也普通是文件，也需要占用磁盘块，目录不是一个容器。你看默认创建的目录就是4096字节，也就说只需要占用一个磁盘块，但这是不确定的。所以要找到目录也是需要到元数据区里面找到对应的条目，只有找到对应的inode就可找到目录所占用的磁盘块。</p>
<p>那到底目录里面存放着什么，难道不是文件或者其他目录吗？</p>
<p>其实目录存着这么一张表（姑且这么理解），里面放着 目录或者文件的名称和对应的inode号（暂时称之为映射表）,如下图：</p>
<p><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2F3107498415.jpg" alt="http://liqiong520-hexo.stor.sinaapp.com/img%2F3107498415.jpg"></p>
<p>假设</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/           在数据区占据 <span class="number">1</span>、<span class="number">2</span>号block ，/其实也是一个目录 里面有<span class="number">3</span>个目录  web <span class="number">111</span></span><br><span class="line">web         占据 <span class="number">5</span>号block  是目录 里面有<span class="number">2</span>个目录 echo data</span><br><span class="line">echo        占据 <span class="number">11</span>号 block  是目录  里面有<span class="number">1</span>个文件 index.php</span><br><span class="line">index.php   占据 <span class="number">15</span> <span class="number">16</span>号 block  是文件</span><br></pre></td></tr></table></figure>
<p>其在文件系统中分布如下图所示</p>
<p><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2F2531052241.png" alt="http://liqiong520-hexo.stor.sinaapp.com/img%2F2531052241.png"></p>
<p>那么内核究竟是怎么找到index.php这个文件的呢？</p>
<p>内核拿到nginx的IO系统调用要获取/web/echo/index.php这个文件请求之后</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="symbol">1 </span>内核读取元数据区 / 的inode，从inode里面读取/所对应的数据块的编号，然后在数据区找到其对应的块（<span class="number">1</span> <span class="number">2</span>号块），读取<span class="number">1</span>号块上的映射表找到web这个名称在元数据区对应的inode号</span><br><span class="line"><span class="symbol">2 </span>内核读取web对应的inode（<span class="number">3</span>号），从中得知web在数据区对应的块是<span class="number">5</span>号块，于是到数据区找到<span class="number">5</span>号块，从中读取映射表，知道echo对应的inode是<span class="number">5</span>号，于是到元数据区找到<span class="number">5</span>号inode</span><br><span class="line"><span class="symbol">3 </span>内核读取<span class="number">5</span>号inode，得到echo在数据区对应的是<span class="number">11</span>号块，于是到数据区读取<span class="number">11</span>号块得到映射表，得到index.php对应的inode是<span class="number">9</span>号</span><br><span class="line"><span class="symbol">4 </span>内核到元数据区读取<span class="number">9</span>号inode，得到index.php对应的是<span class="number">15</span>和<span class="number">16</span>号数据块，于是就到数据区域找到<span class="number">15</span> <span class="number">16</span>号块，读取其中的内容，得到index.php的完整内容</span><br></pre></td></tr></table></figure>
<h1 id="五-浏览器解析html代码，并请求html代码中的资源"><a href="#五-浏览器解析html代码，并请求html代码中的资源" class="headerlink" title="五. 浏览器解析html代码，并请求html代码中的资源"></a>五. 浏览器解析html代码，并请求html代码中的资源</h1><p>浏览器拿到index.html文件后，就开始解析其中的html代码，遇到js/css/image等静态资源时，就向服务器端去请求下载（会使用多线程下载，每个浏览器的线程数不一样），这个时候就用上keep-alive特性了，建立一次HTTP连接，可以请求多个资源，下载资源的顺序就是按照代码里的顺序，但是由于每个资源大小不一样，而浏览器又多线程请求请求资源，所以从下图看出，这里显示的顺序并不一定是代码里面的顺序。</p>
<p>浏览器在请求静态资源时（在未过期的情况下），向服务器端发起一个http请求（询问自从上一次修改时间到现在有没有对资源进行修改），如果服务器端返回304状态码（告诉浏览器服务器端没有修改），那么浏览器会直接读取本地的该资源的缓存文件。</p>
<p><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2F2521817101.png" alt="http://liqiong520-hexo.stor.sinaapp.com/img%2F2521817101.png"></p>
<h1 id="六-浏览器对页面进行渲染呈现给用户"><a href="#六-浏览器对页面进行渲染呈现给用户" class="headerlink" title="六.浏览器对页面进行渲染呈现给用户"></a>六.浏览器对页面进行渲染呈现给用户</h1><p>请见下篇, 浏览器解析原理</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ CSS之各种居中]]></title>
      <url>/2016/01/13/CSS%E4%B9%8B%E5%90%84%E7%A7%8D%E5%B1%85%E4%B8%AD/</url>
      <content type="html"><![CDATA[<p>本文讨论居中情况设定为总宽度不定,内容宽度不定的情况。（改变大小时，仍然居中）。<br><a id="more"></a><br>特别说明：在元素设置position:absolute;来设置居中效果时，除去博客下介绍的css3方法外，还可以使用负的margin来居中，这样解决了兼容性的问题，但是只适用于宽高已知的情况（因为负的偏移量为元素宽高的一半）。宽高改变时，不再是居中效果。</p>
<p>在这些布局中的子元素，因为其属性设置，都默认为内容宽度。</p>
<p>本文所有居中的例子，只讨论css的实现，html代码统一如下：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"parent"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"child"</span>&gt;demo&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="1-水平居中"><a href="#1-水平居中" class="headerlink" title="1. 水平居中"></a>1. 水平居中</h3><p><img src="https://www.linqiong.net/usr/uploads/2016/11/1630928381.jpg" alt=""></p>
<h4 id="1-1-inline-block配合text-align"><a href="#1-1-inline-block配合text-align" class="headerlink" title="1.1 inline-block配合text-align"></a>1.1 inline-block配合text-align</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>优点：兼容性非常好，只需要添加只需要在子元素的css中添加<em>display:inline和</em>zoom:1就可兼容到IE6、7；缺点：内部文字也会水平居中，需消除影响。</p>
</blockquote>
<h4 id="1-2-table配合margin"><a href="#1-2-table配合margin" class="headerlink" title="1.2 table配合margin"></a>1.2 table配合margin</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:table;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>优点：设置特别简单，只需对子元素进行设置，支持IE8+，需支持IE6，7时，可更换子元素为表格结构。</p>
</blockquote>
<h4 id="1-3-abasolute配合transform"><a href="#1-3-abasolute配合transform" class="headerlink" title="1.3 abasolute配合transform"></a>1.3 abasolute配合transform</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>优点：居中元素不对其他元素产生影响。缺点：CSS3新属性支持IE9+，低版本浏览器不支持。</p>
</blockquote>
<h3 id="2-垂直居中"><a href="#2-垂直居中" class="headerlink" title="2. 垂直居中"></a>2. 垂直居中</h3><p><img src="https://www.linqiong.net/usr/uploads/2016/11/2356646198.jpg" alt=""></p>
<h4 id="2-1-table-cell配合vertical-align"><a href="#2-1-table-cell配合vertical-align" class="headerlink" title="2.1 table-cell配合vertical-align"></a>2.1 table-cell配合vertical-align</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>优点：设置简单，只需对父元素进行设置，兼容到IE8+，需兼容地版本浏览器时，可更换div为表格结构。</p>
</blockquote>
<h4 id="2-2-absolute配合tranform"><a href="#2-2-absolute配合tranform" class="headerlink" title="2.2 absolute配合tranform"></a>2.2 absolute配合tranform</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>优点：居中元素不对其他元素产生影响。缺点：CSS3新属性支持IE9+，低版本浏览器不支持。</p>
</blockquote>
<h3 id="3-水平-垂直居中"><a href="#3-水平-垂直居中" class="headerlink" title="3. 水平+垂直居中"></a>3. 水平+垂直居中</h3><p><img src="https://www.linqiong.net/usr/uploads/2016/11/716158647.jpg" alt=""></p>
<h4 id="3-1-inline-block配合text-align加上table-cell配合vertical-align"><a href="#3-1-inline-block配合text-align加上table-cell配合vertical-align" class="headerlink" title="3.1 inline-block配合text-align加上table-cell配合vertical-align"></a>3.1 inline-block配合text-align加上table-cell配合vertical-align</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>优点：综合前两中方法，兼容性好！支持IE8+，低版本浏览器也好兼容。缺点：设置较为复杂。</p>
</blockquote>
<h4 id="3-2-absolute配合transform"><a href="#3-2-absolute配合transform" class="headerlink" title="3.2 absolute配合transform"></a>3.2 absolute配合transform</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>优点：居中元素不对其他元素产生影响。缺点：CSS3新属性支持IE9+，低版本浏览器不支持。</p>
</blockquote>
<h3 id="4-全能的flex"><a href="#4-全能的flex" class="headerlink" title="4. 全能的flex"></a>4. 全能的flex</h3><p>css3新增布局属性，布局简单，强大，性能略差，只支持IE10+，在移动端使用较多。</p>
<h4 id="4-1-水平居中"><a href="#4-1-水平居中" class="headerlink" title="4.1 水平居中"></a>4.1 水平居中</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*当父元素设置display: flex;时，子元素为flex-item，默认为内容宽度。*/</span></span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 在设置子元素为margin: 0 auto;时，可删除父元素的justify-content: center;同样可以达到居中效果*/</span></span><br><span class="line"><span class="comment">/*  .child&#123;</span></span><br><span class="line"><span class="comment">        margin: 0 auto; </span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br></pre></td></tr></table></figure>
<h4 id="4-2-垂直居中"><a href="#4-2-垂直居中" class="headerlink" title="4.2 垂直居中"></a>4.2 垂直居中</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">#### 4<span class="selector-class">.3</span> 水平垂直居中</span><br></pre></td></tr></table></figure>
<p>.parent{<br>    display: flex;<br>    justify-content: center;<br>    align-items: center;<br>}<br>/<em>如同flex布局的第一部分一样这里也可以对子元素进行下面的设置：同时删除上面的除去display外的其他属性</em>/<br>/<em>  .child{<br>        margin:auto;<br>    } </em>/<br>```</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[css(二)]]></title>
      <url>/2016/01/12/css(2)/</url>
      <content type="html"><![CDATA[<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a><strong>继承</strong></h3><p>就像你总是指望着腰缠万贯的老爸有一天会留给你一大笔遗产一样,css中的祖先元素也会向后代传递一样东西:css属性的值.</p>
<a id="more"></a>
<p>body是所有元素的老祖宗,所有标签都是它的后代,那<br><code>body{font-family: helvetica,arival,san-serif;}</code><br>那么,文档中的所有元素,无论是他在层次结构中多么靠下,都将继承这些样式.</p>
<p>css中有很多属性是可以继承的,其中相当一部分都跟文本有关,比如颜色,字体,字号.然而,也有很多不能继承,比如边框,外边距,内边距.</p>
<h3 id="层叠"><a href="#层叠" class="headerlink" title="层叠"></a><strong>层叠</strong></h3><p>层叠就是一种样式在文档层次中逐层叠加的过程,目的是让浏览器面对某个标签特定属性值得多个来源,确定最终使用哪个值.</p>
<ol>
<li><p>样式来源<br> 浏览器默认样式表<br> 用户样式表<br> 作者链接样式表(按照他们链接到页面的先后顺序)<br> 作者嵌入样式<br> 作者行内样式</p>
</li>
<li><p>层叠规则<br><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2Fcss_extends.png" alt=""></p>
</li>
<li><p>css属性值分类</p>
<ul>
<li>文本值</li>
<li>数字值(+单位,0时可不加单位)</li>
<li>颜色值<ol>
<li>颜色名</li>
<li>十六进制颜色<br> 如果三对值中的每一对是两个相同的数字也可省略为三位.</li>
<li>RGB颜色 RGBA</li>
<li>HSL颜色 HSLA</li>
</ol>
</li>
</ul>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[css(一)]]></title>
      <url>/2016/01/12/css(1)/</url>
      <content type="html"><![CDATA[<h3 id="1-为文档添加样式的三种方法"><a href="#1-为文档添加样式的三种方法" class="headerlink" title="1.为文档添加样式的三种方法"></a><strong>1.为文档添加样式的三种方法</strong></h3><a id="more"></a>
<ol>
<li>行内样式</li>
<li>嵌入样式</li>
<li>外联样式</li>
</ol>
<blockquote>
<pre><code> @import url(&apos;&apos;)
@import指令必须出现在样式表中其他样式之前,否则不会加载
</code></pre></blockquote>
<h3 id="2-结构"><a href="#2-结构" class="headerlink" title="2.结构"></a><strong>2.结构</strong></h3><p><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2Fcss_struct.png" alt=""></p>
<h3 id="3-选择符"><a href="#3-选择符" class="headerlink" title="3.选择符"></a><strong>3.选择符</strong></h3><h5 id="上下文选择符"><a href="#上下文选择符" class="headerlink" title="上下文选择符"></a><strong>上下文选择符</strong></h5><p>一般(祖先/后代选择符):<br><code>p em{font-weight: bold;}</code><br>特殊: </p>
<ul>
<li>子选择符: <code>p&gt;em{font-weight: bold;}</code></li>
<li>紧邻同胞选择符<strong>+</strong> <code>h2+p{font-voriant: small-caps;}</code></li>
<li>一般同胞选择符<strong>~</strong> <code>h2~a{color: red;}</code></li>
<li>通用选择符<strong>*</strong> <code>*{color: green;}</code></li>
</ul>
<h5 id="ID和类选择符"><a href="#ID和类选择符" class="headerlink" title="ID和类选择符"></a><strong>ID和类选择符</strong></h5><ul>
<li>类选择符<br>  格式: <code>.container{font-face: &#39;arival&#39;;}</code></li>
<li>标签带类选择符<br>  格式: <code>p.specialtext{color: red;}</code>(中间没有空格)</li>
<li>多类选择符<br>  格式: <code>.specialtext.featured{font-size: 120%;}</code>(同上)</li>
<li>ID同class</li>
</ul>
<h5 id="属性选择符"><a href="#属性选择符" class="headerlink" title="属性选择符"></a><strong>属性选择符</strong></h5><ul>
<li>属性名选择符<br>  <code>input[type]{border: 2px solid blue;}</code></li>
<li>属性值选择符<br>  <code>img[title=&quot;red&quot;]{border: 4px solid green;}</code></li>
</ul>
<h3 id="4-伪类"><a href="#4-伪类" class="headerlink" title="4.伪类"></a><strong>4.伪类</strong></h3><h5 id="UI伪类"><a href="#UI伪类" class="headerlink" title="UI伪类"></a><strong>UI伪类</strong></h5><ul>
<li>链接伪类(LoVe,HA)<br>  <code>a:link{color: black;}</code><br>  <code>a:visited{color: gray;}</code><br>  <code>a:hover{background: green;}</code><br>  <code>a:active{color: red;}</code></li>
<li>:focus伪类<br>  <code>input:focus{border: 1px solid blue;}</code></li>
<li>:target伪类<br>  <code>#more_info:target{background: #eee;}</code><br>  会在用户单击链接转向ID为more_info的元素时,为该元素添加浅灰色背景.</li>
</ul>
<h5 id="结构化伪类"><a href="#结构化伪类" class="headerlink" title="结构化伪类"></a><strong>结构化伪类</strong></h5><ul>
<li>:first-child和:last-child</li>
<li>:nth-child(n)<br>  n可为数值,表达式,odd和even</li>
</ul>
<h3 id="5-伪元素"><a href="#5-伪元素" class="headerlink" title="5.伪元素"></a><strong>5.伪元素</strong></h3><ol>
<li>::first-letter伪元素 (选择首字符)</li>
<li>::first-line伪元素 (选择首行)</li>
<li>::before和::after伪元素<br> 可用于在特定元素前后添加特殊内容.</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[web文件上传]]></title>
      <url>/2015/12/03/web%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      <content type="html"><![CDATA[<h2 id="选择文件"><a href="#选择文件" class="headerlink" title="选择文件"></a>选择文件</h2><p>谈到文件上传，不得不提 form，中文名叫表单。它可以包含一个用来选择文件的东东，叫做 file。<br><a id="more"></a><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> name=<span class="string">"uploadForm"</span> action=<span class="string">"/upload"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line"><span class="keyword">file</span>:&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"file"</span> name=<span class="string">"anyname"</span>/&gt;</span><br><span class="line">&lt;/<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>action 表示表单的数据发送的目标地址，method 表示发送表单所使用的 http 方法（get / post），enctype表示数据的编码方式，对于文件上传，必须为 multipart/form-data。</p>
<blockquote>
<p>具体的定义参见<a href="http://www.w3school.com.cn/tags/tag_form.asp" target="_blank" rel="noopener">form</a>。</p>
</blockquote>
<p>下面是对应的页面，可以看到，有一个提示选择文件的按钮<br><img src="https://www.linqiong.net/usr/uploads/2016/11/1002065082.png" alt=""></p>
<blockquote>
<p>小贴士：文件选择好之后，可以通过 <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader" target="_blank" rel="noopener">FileReader</a> 进行预览，或者简单的编辑。</p>
</blockquote>
<h2 id="如何上传"><a href="#如何上传" class="headerlink" title="如何上传"></a>如何上传</h2><p>简单的上传，只需要提交对应的 form 就可以了。是不是很简单，O(∩_∩)O哈哈哈~。</p>
<h2 id="增强实现"><a href="#增强实现" class="headerlink" title="增强实现"></a>增强实现</h2><p>上面介绍的都太简单粗暴肤浅了，实际项目中老板，客户100%会投反对票。因为实在是太简陋了。</p>
<h2 id="美化选择按钮"><a href="#美化选择按钮" class="headerlink" title="美化选择按钮"></a>美化选择按钮</h2><p>浏览器提供的原生控件实在是丑的不忍心看，可以自己画一个好看的按钮。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.chooseFile</span>&#123;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">106px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">29px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#B6E2C9</span>;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">font-family</span>: monospace;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: white;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">17px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>记得把原来的form隐藏掉。</p>
<p>接下来你需要做的是给这个按钮绑定 click listener ，当它被点击时，触发 form 中的 file 的 click 事件。</p>
<h2 id="不想刷新页面"><a href="#不想刷新页面" class="headerlink" title="不想刷新页面"></a>不想刷新页面</h2><p>有些时候，希望上传时不刷新当前页面。但是使用 form 是避免不了页面刷新的。怎么办？</p>
<p>第一个想出这个办法的肯定是个头脑灵活的家伙–使用隐藏的 iframe 上传。</p>
<p>原理是，在当前页面（父页面）中添加 iframe，iframe 的页面（子页面）中包含 form 和相关的函数（验证，预处理等等）。当用户在父页面点击选择文件的按钮时，去触发子页面中 file 控件的 click 事件。</p>
<p>当用户提交时，提交子页面中的 form。这时，子页面跳转，而父页面没有刷新。</p>
<p>这个方案有个缺点，就是需要前后端协同工作。</p>
<p>当需要使用回调函数来处理上传完成后后端返回的数据时，需要和后端预先达成约定，如，回调函数名，参数列表，等等。这对前后端完全分离的开发场景(比如，你只是开发前端UI)是一个挑战。（出现全栈工程师的原因，是不是就是因为前端工程师想把这些依赖但是却又无法完全控制的工作给抢过来？）</p>
<p>比如，父页面须定义回调函数<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadSuccess</span> <span class="params">(result)</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>后端须对action（上面form中定义的/upload）返回html，html包含对回调函数的调用，以及制定参数。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.uploadSuccess(<span class="string">'xxxxxx'</span>);</span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">sript</span>&gt;</span></span></span></span><br><span class="line"><span class="undefined">...</span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="FormData，ajax文件上传"><a href="#FormData，ajax文件上传" class="headerlink" title="FormData，ajax文件上传"></a>FormData，ajax文件上传</h2><p>你说文件上传这么常见的功能，咋就不用直接用 js 搞定呢？ 非要牵扯什么 form，什么 iframe，烦？</p>
<p>客官，看来你需要的是 FormData。</p>
<p>FormData 允许通过 js 构造 form ，然后通过 ajax 方式上传。为了方便，这里使用 jquery 的 ajax。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> FormData();</span><br><span class="line">data.append(<span class="string">'file'</span>, fileObj);</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'/upload'</span>,</span><br><span class="line">    type: <span class="string">'POST'</span>,</span><br><span class="line">    data: data,</span><br><span class="line">    cache: <span class="literal">false</span>,</span><br><span class="line">    dataType: <span class="string">'json'</span>,</span><br><span class="line">    processData: <span class="literal">false</span>, <span class="comment">// Don't process the files</span></span><br><span class="line">    contentType: <span class="literal">false</span>, <span class="comment">// Set content type to false as jQuery will tell the server its a query string request</span></span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data, textStatus, jqXHR</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data, <span class="literal">null</span>, <span class="number">4</span>));</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus, errorThrown</span>) </span>&#123;</span><br><span class="line">          <span class="comment">//jqXHR may have no responseJSON in old jquery</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(jqXHR.responseJSON, <span class="literal">null</span>, <span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>需要注意的是，processData 必须指定为false，否则，jquery 会尝试格式化formData，这会引起一些错误。</p>
<p>一些低版本的浏览器可能对 FormData 没有提供支持，所以实际项目中要谨慎使用哦。</p>
<h2 id="文件验证"><a href="#文件验证" class="headerlink" title="文件验证"></a>文件验证</h2><p>有时候，我们需要对文件进行譬如大小，类型(通过扩展名)，名称的验证，只有符合预期的才允许上传。</p>
<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>前端获取这三个属性非常简单。<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">file</span> = uploadForm.anyname.files[<span class="number">0</span>];</span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">file</span>.<span class="keyword">name</span>);</span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">file</span>.<span class="built_in">size</span>);</span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">file</span>.<span class="keyword">type</span>);</span><br></pre></td></tr></table></figure></p>
<p>更详细的介绍 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File" target="_blank" rel="noopener">file api</a></p>
<h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>相对前端来说，由于涉及到 http 报文的细节，所以稍微复杂一点(意思就是说，我讲的很有可能是片面的，错误的)。</p>
<p>http 报文，也就是你从浏览器的 network 调试窗口看到的 request 信息，它主要包括 header 和 body 两部分。header 中包含 content-length，也就是发送数据的长度，一般可以依次作为对文件大小的判断。如果后端检测到它大于预设的最大限制，则返回错误给前端。</p>
<p>http 的 body 部分会为上传文件的数据的开始和结尾插入边界，例如，chrome<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">------WebKitFormBoundarycKtZKQMmA6QfpeMW</span></span><br><span class="line">Content-Disposition: form-data; name=<span class="string">"file"</span>; filename=<span class="string">"bt.jpg"</span></span><br><span class="line">Content-<span class="keyword">Type</span>: image/jpeg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">------WebKitFormBoundarycKtZKQMmA6QfpeMW--</span></span><br></pre></td></tr></table></figure></p>
<p>并且，在文件内容之前，是文件的元数据，例如名词，类型，还有大小。</p>
<p>后端可以根据边界的检验，识别上传的文件，读取元数据中的文件属性，从而为验证提供数据。</p>
<p>有很多文件上传框架会将文件写入临时文件夹后，再做验证。其实是非常没有必要的。完全可以在 http 数据开头的一部分（数据并不是一起传送，而是类似于流的方式）抵达服务器时就完成验证，从而尽早的返回错误，避免不必要的数据操作（所谓优化–能不做，尽量不做。）。</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>除了 file 表单，file对象还可以从拖拽事件中获取。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e<span class="selector-class">.dataTransfer</span><span class="selector-class">.files</span></span><br></pre></td></tr></table></figure></p>
<p>http body中，上传文件的边界可以由程序指定</p>
<pre><code>var boundary = &apos;fdfrefdrerefdfd&apos;;
xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;multipart/form-data, boundary=&quot;+boundary); // simulate a file MIME POST request.  
xhr.setRequestHeader(&quot;Content-Length&quot;, fileSize);  

var body = &apos;&apos;;  
body += &quot;--&quot; + boundary + &quot;\r\n&quot;;  
body += &quot;Content-Disposition: form-data; name=\&quot;&quot;+dropbox.getAttribute(&apos;name&apos;)+&quot;\&quot;; filename=\&quot;&quot; + fileName + &quot;\&quot;\r\n&quot;;  
body += &quot;Content-Type: &quot;+fileType+&quot;\r\n\r\n&quot;;  
body += fileData + &quot;\r\n&quot;;  
body += &quot;--&quot; + boundary + &quot;--\r\n&quot;;  

xhr.sendAsBinary(body);
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[实现图片垂直居中的几种方法]]></title>
      <url>/2015/11/11/%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>monitor韩昨天遇到一个需要将图片显示在浏览器中间的问题，一开始我记错以为<code>&lt;img&gt;</code>的display为<code>inline-block</code>，志超提醒为<code>inline</code>，随后整理以下资料，便于以后使用。<br>大部分为搜集而来，原创见谅，小弟才疏学浅。</p>
<a id="more"></a>
<h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>把一些 div 的显示方式设置为表格，因此我们可以使用表格的 vertical-align属性。<br>结构效果如下：<br><a href="http://jsfiddle.net/hehanlin/xta6rzha/" target="_blank" rel="noopener">http://jsfiddle.net/hehanlin/xta6rzha/</a><br><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/xta6rzha/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe><br>优点：不用受内容高度的限制，简单实现垂直居中；<br>缺点：不兼容ie6,7</p>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>这个方法使用绝对定位的 div，把它的 top 设置为 50％，margin-top 设置为负的 content 高度。这意味着对象必须在 CSS 中指定固定的高度。<br>结构效果如下：<br><a href="http://jsfiddle.net/hehanlin/5j8jn109/" target="_blank" rel="noopener">http://jsfiddle.net/hehanlin/5j8jn109/</a><br><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/5j8jn109/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe><br>优点：兼容性好<br>缺点：必须知道内容盒子的高度才可以，有了这点限制；</p>
<h3 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h3><p>这个方法和方法二的原理是一样的。废话不多说看代码<br><a href="http://jsfiddle.net/hehanlin/azy9ovww/" target="_blank" rel="noopener">http://jsfiddle.net/hehanlin/azy9ovww/</a><br><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/azy9ovww/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe><br>优缺点和法二一样，缺点嘛多了个额外的标签；</p>
<h3 id="方法四："><a href="#方法四：" class="headerlink" title="方法四："></a>方法四：</h3><p>这个方法使用了一个 position:absolute，有固定宽度和高度的 div。这个 div 被设置为 top:0; bottom:0;。但是因为它有固定高度，其实并不能和上下都间距为 0，因此 margin:auto; 会使它居中。使用 margin:auto;使块级元素垂直居中是很简单的。<br>结构效果如下：<br><a href="http://jsfiddle.net/hehanlin/h5Lm4kaj/" target="_blank" rel="noopener">http://jsfiddle.net/hehanlin/h5Lm4kaj/</a><br><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/h5Lm4kaj/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe><br>优点：非常简单<br>缺点：不兼容ie6,7</p>
<h3 id="方法五："><a href="#方法五：" class="headerlink" title="方法五："></a>方法五：</h3><p>这个方法只能将单行文本置中。只需要简单地把 line-height 设置为那个对象的 height 值就可以使文本居中了。这个就不用实例了，你看就明白；</p>
<h3 id="方法六："><a href="#方法六：" class="headerlink" title="方法六："></a>方法六：</h3><p>这个方法的原理是利用元素的vertical-align,区别于方法一的是不限制在table元素中（用于图片的居中不错）；<br>结构效果如下：<br><a href="http://jsfiddle.net/hehanlin/1w134dc2/" target="_blank" rel="noopener">http://jsfiddle.net/hehanlin/1w134dc2/</a><br><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/1w134dc2/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe><br>优点：不用受内容高度的限制，兼容性好；<br>缺点：垂直居中的对象只限在行内元素范围</p>
<h3 id="方法七"><a href="#方法七" class="headerlink" title="方法七"></a>方法七</h3><p>用js轻松实现<br><a href="http://jsfiddle.net/hehanlin/hadaf59x/" target="_blank" rel="noopener">http://jsfiddle.net/hehanlin/hadaf59x/</a><br><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/hadaf59x/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最全的常用正则表达式大全]]></title>
      <url>/2015/11/07/%E5%85%A8%E7%9A%84%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%A4%A7%E5%85%A8/</url>
      <content type="html"><![CDATA[<p>很多不太懂正则的朋友，在遇到需要用正则校验数据时，往往是在网上去找很久，结果找来的还是不很符合要求。所以我最近把开发中常用的一些正则表达式整理了一下，包括校验数字、字符、一些特殊的需求等等。给自己留个底，也给朋友们做个参考。<br><a id="more"></a></p>
<h3 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h3><ul>
<li>数字：<code>^[0-9]*$</code></li>
<li>n位的数字：<code>^\d{n}$</code></li>
<li>至少n位的数字：<code>^\d{n,}$</code></li>
<li>m-n位的数字：<code>^\d{m,n}$</code></li>
<li>零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></li>
<li>非零开头的最多带两位小数的数字：<code>^([1-9][0-9]*)+(.[0-9]{1,2})?$</code></li>
<li>带1-2位小数的正数或负数：<code>^(\-)?\d+(\.\d{1,2})?$</code></li>
<li>正数、负数、和小数：<code>^(\-|\+)?\d+(\.\d+)?$</code></li>
<li>有两位小数的正实数：<code>^[0-9]+(.[0-9]{2})?$</code></li>
<li>有1~3位小数的正实数：<code>^[0-9]+(.[0-9]{1,3})?$</code></li>
<li>非零的正整数：<code>^[1-9]\d*$</code> 或 <code>^([1-9][0-9]*){1,3}$</code> 或 <code>^\+?[1-9][0-9]*$</code></li>
<li>非零的负整数：<code>^\-[1-9][]0-9″*$</code> 或 <code>^-[1-9]\d*$</code></li>
<li>非负整数：<code>^\d+$</code> 或 <code>^[1-9]\d*|0$</code></li>
<li>非正整数：<code>^-[1-9]\d*|0$</code> 或 <code>^((-\d+)|(0+))$</code></li>
<li>非负浮点数：<code>^\d+(\.\d+)?$</code> 或 <code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</code></li>
<li>非正浮点数：<code>^((-\d+(\.\d+)?)|(0+(\.0+)?))$</code> 或 <code>^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</code></li>
<li>正浮点数：<code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$</code> 或 <code>^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</code></li>
<li>负浮点数：<code>^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$</code> 或 <code>^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</code></li>
<li>浮点数：<code>^(-?\d+)(\.\d+)?$</code> 或 <code>^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</code></li>
</ul>
<h3 id="二、校验字符的表达式"><a href="#二、校验字符的表达式" class="headerlink" title="二、校验字符的表达式"></a>二、校验字符的表达式</h3><ul>
<li>汉字：<code>^[\u4e00-\u9fa5]{0,}$</code></li>
<li>英文和数字：<code>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</code></li>
<li>长度为3-20的所有字符：<code>^.{3,20}$</code></li>
<li>由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code></li>
<li>由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code></li>
<li>由26个小写英文字母组成的字符串：<code>^[a-z]+$</code></li>
<li>由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code></li>
<li>由数字、26个英文字母或者下划线组成的字符串：<code>^\w+$ 或 ^\w{3,20}$</code></li>
<li>中文、英文、数字包括下划线：<code>^[\u4E00-\u9FA5A-Za-z0-9_]+$</code></li>
<li>中文、英文、数字但不包括下划线等符号：<code>^[\u4E00-\u9FA5A-Za-z0-9]+$</code> 或 <code>^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</code></li>
<li>可以输入含有^%&amp;’,;=?$\”等字符：<code>[^%&amp;’,;=?$\x22]+</code></li>
<li>禁止输入含有~的字符：<code>[^~\x22]+</code></li>
</ul>
<h3 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h3><ul>
<li>Email地址：<code>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code></li>
<li>域名：<code>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</code></li>
<li>InternetURL：<code>[a-zA-z]+://[^\s]*</code> 或 <code>^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</code></li>
<li>手机号码：<code>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</code></li>
<li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<code>^($$\d{3,4}-)|\d{3.4}-)?\d{7,8}$</code></li>
<li>国内电话号码(0511-4405222、021-87888822)：<code>\d{3}-\d{8}|\d{4}-\d{7}</code></li>
<li>身份证号(15位、18位数字)：<code>^\d{15}|\d{18}$</code></li>
<li>短身份证号码(数字、字母x结尾)：<code>^([0-9]){7,18}(x|X)?$</code> 或 <code>^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</code></li>
<li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></li>
<li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<code>^[a-zA-Z]\w{5,17}$</code></li>
<li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：<code>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</code></li>
<li>日期格式：<code>^\d{4}-\d{1,2}-\d{1,2}</code></li>
<li>一年的12个月(01～09和1～12)：<code>^(0?[1-9]|1[0-2])$</code></li>
<li>一个月的31天(01～09和1～31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></li>
<li>钱的输入格式：<br>有四种钱的表示形式我们可以接受:”10000.00″ 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<code>^[1-9][0-9]*$</code><br>这表示任意一个不以0开头的数字，但是，这也意味着一个字符”0″不通过，所以我们采用下面的形式：<code>^(0|[1-9][0-9]*)$</code><br>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<code>^(0|-?[1-9][0-9]*)$</code><br>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉，因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：<code>^[0-9]+(.[0-9]+)?$</code><br>必须说明的是，小数点后面至少应该有1位数，所以”10.”是不通过的，但是 “10” 和 “10.2” 是通过的：<code>^[0-9]+(.[0-9]{2})?$</code><br>这样我们规定小数点后面必须有两位，如果你认为太苛刻了，可以这样：<code>^[0-9]+(.[0-9]{1,2})?$</code><br>这样就允许用户只写一位小数。下面我们该考虑数字中的逗号了，我们可以这样：<code>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</code><br>1到3个数字，后面跟着任意个 逗号+3个数字，逗号成为可选，而不是必须：<code>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</code><br>备注：这就是最终结果了，别忘了”+”可以用”*”替代。如果你觉得空字符串也可以接受的话(奇怪，为什么?)最后，别忘了在用函数时去掉去掉那个反斜杠，一般的错误都在这里</li>
<li>xml文件：<code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$</code></li>
<li>中文字符的正则表达式：<code>[\u4e00-\u9fa5]</code></li>
<li>双字节字符：<code>[^\x00-\xff]</code> (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</li>
<li>空白行的正则表达式：<code>\n\s*\r</code> (可以用来删除空白行)</li>
<li>HTML标记的正则表达式：<code>&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt;</code> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</li>
<li>首尾空白字符的正则表达式：<code>^\s*|\s*$或(^\s*)|(\s*$)</code> (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</li>
<li>腾讯QQ号：<code>[1-9][0-9]{4,}</code> (腾讯QQ号从10000开始)</li>
<li>中国邮政编码：<code>[1-9]\d{5}(?!\d)</code> (中国邮政编码为6位数字)</li>
<li>IP地址：<code>\d+\.\d+\.\d+\.\d+</code> (提取IP地址时有用)</li>
<li>IP地址：<code>((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</code></li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式在实际中的应用]]></title>
      <url>/2015/11/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9C%A8%E5%AE%9E%E9%99%85%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>[TOC=3,3]</p>
<hr>
<h3 id="1-移动手机消校验"><a href="#1-移动手机消校验" class="headerlink" title="1. 移动手机消校验"></a>1. 移动手机消校验</h3><p>首先查阅相关资料知道手机的号段有：133,134，135，136，137，138，139，150，155,157，158，159，新增3g号段为：182，189,183和188。正则表达式如下：<br><a id="more"></a><br><code>^(13[4-9]|15[01589]|18[2389])\d{8}$</code><br>php代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$moblie</span> = <span class="string">'13756439867'</span>;</span><br><span class="line"><span class="variable">$regex</span> = <span class="string">"!^(13[4-9]|15[01589]|18[2389])\d&#123;8&#125;$!"</span>;</span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="variable">$regex</span>,<span class="variable">$mobile</span>))</span><br><span class="line">&#123;</span><br><span class="line">    die(<span class="string">"错误的手机号！"</span>);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>js代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">valiMoblie</span><span class="params">(moblie)</span></span></span></span><br><span class="line"><span class="undefined">    &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> regex = <span class="regexp">/^(13[4-9]|15[01589]|18[2389])\d&#123;8&#125;$/g</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(!regex.test(moblie))</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">"手机号错误！"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="2-匹配E-mail地址"><a href="#2-匹配E-mail地址" class="headerlink" title="2. 匹配E-mail地址"></a>2. 匹配E-mail地址</h3><p><code>^\w{3,16}@(\w{1,64})+\w{2,5}$</code></p>
<hr>
<h3 id="3-URL重写与搜索引擎优化"><a href="#3-URL重写与搜索引擎优化" class="headerlink" title="3. URL重写与搜索引擎优化"></a>3. URL重写与搜索引擎优化</h3><p>以apache为例：</p>
<ol>
<li><p>首先开启rewrite模块<br>LoadModule rewrite_module modules/mod_rewrite.so<br>配置相关目录的AllowOverride All<br>编辑.htaccess文件，打开运行时重写功能：<br> RewriteEngine on</p>
</li>
<li><p>建立一条重写规则，把index.php重写为index.html<br> RewriteRule index.html index.php</p>
</li>
<li><p>把原地址<code>list.php?mode=A&amp;page=2</code>形式重写<br> RewriteRule list-([A-Z]+)(?:-page-)?(\d?).html $list.php?mode=$1&amp;page=$2 [NC]</p>
</li>
</ol>
<blockquote>
<p>[NC]表示对大小写不敏感，$1与$2是对前面匹配到的字符的反向引用，?:代表非捕获性匹配。</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
            <tag> js </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用正则表达式]]></title>
      <url>/2015/11/06/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>对于开发人员来说，正则表达式是一个非常有用的功能，它提供了 查找，匹配，替换 句子，单词，或者其他格式的字符串。<br><a id="more"></a></p>
<h2 id="验证域名检验一个字符串是否是个有效域名"><a href="#验证域名检验一个字符串是否是个有效域名" class="headerlink" title="验证域名检验一个字符串是否是个有效域名."></a>验证域名检验一个字符串是否是个有效域名.</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$url</span> = <span class="string">"http://www.baidu.com/"</span>; </span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">'/^(http|https|ftp)://([A-Z0-9][A-Z0-9_-]*(?:.[A-Z0-9][A-Z0-9_-]*)+):?(d+)?/?/i'</span>, <span class="variable">$url</span>)) &#123; </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Your url is ok."</span>; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Wrong url."</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="从一个字符串中-突出某个单词"><a href="#从一个字符串中-突出某个单词" class="headerlink" title="从一个字符串中 突出某个单词"></a>从一个字符串中 突出某个单词</h2><p>这是一个非常有用的在一个字符串中匹配出某个单词 并且突出它，非常有效的搜索结果<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$text</span> = "<span class="keyword">Sample</span> sentence from KomunitasWeb, regex has become popular <span class="keyword">in</span> web programming. Now we learn regex. According to wikipedia, Regular expressions (abbreviated <span class="keyword">as</span> regex or </span><br><span class="line"> </span><br><span class="line">regexp, with plural forms regexes, regexps, or regexen) are written <span class="keyword">in</span> a formal language that can be interpreted <span class="keyword">by</span> a regular expression processor"; </span><br><span class="line"><span class="variable">$text</span> = preg_replace(<span class="string">"/b(regex)b/i"</span>, '&lt;span style=<span class="string">"background:#5fc9f6"</span>&gt;1&lt;/span&gt;', <span class="variable">$text</span>); </span><br><span class="line">echo <span class="variable">$text</span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="从HTML文档中获得全部图片"><a href="#从HTML文档中获得全部图片" class="headerlink" title="从HTML文档中获得全部图片"></a>从HTML文档中获得全部图片</h2><p>如果你曾经希望去获得某个网页上的全部图片，这段代码就是你需要的，你可以轻松的建立一个图片下载机器人</p>
<figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$images</span> = array(); </span><br><span class="line">preg_match_all(<span class="string">'/(img|src)=("|'</span>)[^<span class="string">"'&gt;]+/i', <span class="variable">$data</span>, <span class="variable">$media</span>); </span></span><br><span class="line"><span class="string">unset(<span class="variable">$data</span>); </span></span><br><span class="line"><span class="string"><span class="variable">$data</span>=preg_replace('/(img|src)("</span>|<span class="string">'|="|='</span>)(.*)/i<span class="string">',"$3",<span class="variable">$media</span>[0]); </span></span><br><span class="line"><span class="string">foreach(<span class="variable">$data</span> as <span class="variable">$url</span>) </span></span><br><span class="line"><span class="string">&#123; </span></span><br><span class="line"><span class="string">  <span class="variable">$info</span> = pathinfo(<span class="variable">$url</span>); </span></span><br><span class="line"><span class="string">  if (isset(<span class="variable">$info</span>['</span>extension<span class="string">'])) </span></span><br><span class="line"><span class="string">  &#123; </span></span><br><span class="line"><span class="string">    if ((<span class="variable">$info</span>['</span>extension<span class="string">'] == '</span>jpg<span class="string">') || </span></span><br><span class="line"><span class="string">    (<span class="variable">$info</span>['</span>extension<span class="string">'] == '</span>jpeg<span class="string">') || </span></span><br><span class="line"><span class="string">    (<span class="variable">$info</span>['</span>extension<span class="string">'] == '</span>gif<span class="string">') || </span></span><br><span class="line"><span class="string">    (<span class="variable">$info</span>['</span>extension<span class="string">'] == '</span>png<span class="string">')) </span></span><br><span class="line"><span class="string">    array_push(<span class="variable">$images</span>, <span class="variable">$url</span>); </span></span><br><span class="line"><span class="string">  &#125; </span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="删除重复字母"><a href="#删除重复字母" class="headerlink" title="删除重复字母"></a>删除重复字母</h2><p>经常重复输入字母? 这个表达式正适合.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">text = preg_replace(<span class="string">"/s(w+s)1/i"</span>, <span class="string">"<span class="variable">$1</span>"</span>, <span class="variable">$text</span>);</span></span><br></pre></td></tr></table></figure></p>
<h2 id="删除重复的标点"><a href="#删除重复的标点" class="headerlink" title="删除重复的标点"></a>删除重复的标点</h2><p>功能同上，但只是面对标点，白白重复的逗号<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">text = preg_replace(<span class="string">"/.+/i"</span>, <span class="string">"."</span>, <span class="variable">$text</span>);</span></span><br></pre></td></tr></table></figure></p>
<h2 id="匹配一个XML或者HTML标签"><a href="#匹配一个XML或者HTML标签" class="headerlink" title="匹配一个XML或者HTML标签"></a>匹配一个XML或者HTML标签</h2><p>这个简单的函数有两个参数：第一个是你要匹配的标签，第二个是包含XML或HTML的变量，再强调下，这个真的很强大<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_tag</span><span class="params">( $tag, $xml )</span> </span>&#123; </span><br><span class="line"> $tag = preg_quote($tag); </span><br><span class="line"> preg_match_all(<span class="string">'&#123;&lt;'</span>.$tag.<span class="string">'[^&gt;]*&gt;(.*?)&lt;/'</span>.$tag.<span class="string">'&gt;.'</span>&#125;<span class="string">', </span></span><br><span class="line"><span class="string">          $xml, </span></span><br><span class="line"><span class="string">          $matches, </span></span><br><span class="line"><span class="string">          PREG_PATTERN_ORDER); </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> return $matches[1]; </span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="匹配具有属性值的XML或者HTML标签"><a href="#匹配具有属性值的XML或者HTML标签" class="headerlink" title="匹配具有属性值的XML或者HTML标签"></a>匹配具有属性值的XML或者HTML标签</h2><p>这个功能和上面的非常相似，但是它允许你匹配的标签内部有属性值，例如你可以轻松匹配 <code>&lt;div id=”header”&gt;</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> get_tag( <span class="variable">$attr</span>, <span class="variable">$value</span>, <span class="variable">$xml</span>, <span class="variable">$tag</span>=null ) &#123; </span><br><span class="line"> <span class="keyword">if</span>( is_null(<span class="variable">$tag</span>) ) </span><br><span class="line">  <span class="variable">$tag</span> = <span class="string">'\w+'</span>; </span><br><span class="line"> <span class="keyword">else</span> </span><br><span class="line">  <span class="variable">$tag</span> = preg_quote(<span class="variable">$tag</span>); </span><br><span class="line"></span><br><span class="line"> <span class="variable">$attr</span> = preg_quote(<span class="variable">$attr</span>); </span><br><span class="line"> <span class="variable">$value</span> = preg_quote(<span class="variable">$value</span>); </span><br><span class="line"></span><br><span class="line"> <span class="variable">$tag_regex</span> = <span class="string">"/&lt;("</span>.<span class="variable">$tag</span>.<span class="string">")[^&gt;]*<span class="variable">$attr</span>\s*=\s*"</span>. </span><br><span class="line">        <span class="string">"(['\"])<span class="variable">$value</span>\\2[^&gt;]*&gt;(.*?)&lt;\/\\1&gt;/"</span> </span><br><span class="line"></span><br><span class="line"> preg_match_all(<span class="variable">$tag_regex</span>, </span><br><span class="line">         <span class="variable">$xml</span>, </span><br><span class="line">         <span class="variable">$matches</span>, </span><br><span class="line">         PREG_PATTERN_ORDER); </span><br><span class="line"></span><br><span class="line"> <span class="built_in">return</span> <span class="variable">$matches</span>[3]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="匹配十六进制颜色值"><a href="#匹配十六进制颜色值" class="headerlink" title="匹配十六进制颜色值"></a>匹配十六进制颜色值</h2><p>web开发者的另一个有趣的工具，它允许你匹配和验证十六进制颜色值.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$string</span> = <span class="string">"#555555"</span>; </span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">'/^#(?:(?:[a-fd]&#123;3&#125;)&#123;1,2&#125;)$/i'</span>, <span class="variable">$string</span>)) &#123; </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"example 6 successful."</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="查找页面-title"><a href="#查找页面-title" class="headerlink" title="查找页面 title"></a>查找页面 title</h2><p>这段代码方便查找和打印 网页 <title> 和</title> 之间的内容</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$fp = <span class="keyword">fopen</span>(<span class="string">"http://www.baidu.com/blog"</span>,<span class="string">"r"</span>); </span><br><span class="line"><span class="keyword">while</span> (!<span class="keyword">feof</span>($fp) )&#123; </span><br><span class="line">  $page .= fgets($fp, <span class="number">4096</span>); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">$titre = eregi(<span class="string">"&lt;title&gt;(.*)&lt;/title&gt;"</span>,$page,$regs); </span><br><span class="line">echo $regs[<span class="number">1</span>]; </span><br><span class="line"><span class="keyword">fclose</span>($fp);</span><br></pre></td></tr></table></figure>
<h2 id="检验密码的复杂度"><a href="#检验密码的复杂度" class="headerlink" title="检验密码的复杂度"></a>检验密码的复杂度</h2><p>这个正则表达式将检测输入的内容是否包含6个或更多字母，数字，下划线和连字符. 输入必须包含至少一个大写字母，一个小写字母和一个数字</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'A(?=<span class="string">[-_a-zA-Z0-9]</span>*?<span class="string">[A-Z]</span>)(?=<span class="string">[-_a-zA-Z0-9]</span>*?<span class="string">[a-z]</span>)(?=<span class="string">[-_a-zA-Z0-9]</span>*?<span class="string">[0-9]</span>)<span class="string">[-_a-zA-Z0-9]</span>&#123;<span class="number">6</span>,&#125;z'</span><br></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式的基础]]></title>
      <url>/2015/11/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p>[TOC=3,3]</p>
<hr>
<h3 id="1-测试工具"><a href="#1-测试工具" class="headerlink" title="1. 测试工具"></a>1. 测试工具</h3><p>我们将使用<code>RegxTestor</code>这款工具来调试正则表达式</p>
<a id="more"></a>
<hr>
<h3 id="2-元字符"><a href="#2-元字符" class="headerlink" title="2. 元字符"></a>2. 元字符</h3><p>元字符用来规定其前导字符（即位于元字符前面的字符）在目标对象中的出现模式。<br>常用元字符如下：</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>.</td>
<td>匹配除换行符以外的任意字符</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母或数字或下划线或汉字</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任意空白字符</td>
</tr>
<tr>
<td>\d</td>
<td>匹配数字</td>
</tr>
<tr>
<td>\b</td>
<td>表示单词的开始或结束</td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串的开始</td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串的结束</td>
</tr>
<tr>
<td>-</td>
<td>表示范围</td>
</tr>
<tr>
<td>[]</td>
<td>匹配括号中的任意一个字符</td>
</tr>
<tr>
<td>*，+，？</td>
<td>量词</td>
</tr>
<tr>
<td>{}</td>
<td>量词，如<code>\d{5,11}</code>,表示5-11个数字</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="3-字符组"><a href="#3-字符组" class="headerlink" title="3. 字符组"></a>3. 字符组</h3><p>·[]`匹配单个字符，尽管看起来有好多字符</p>
<p><code>[aeiou]</code> 匹配其中一个英文字母<br><code>[.?!]</code> 匹配其中一个标点符号<br><code>c[aou]t</code> 匹配“cat”，“cot”，“cut”这三个单词<br><strong>注意：字符组中的元字符是不需要转义的</strong></p>
<hr>
<h3 id="4-转义"><a href="#4-转义" class="headerlink" title="4. 转义"></a>4. 转义</h3><p>php中使用反斜杠（\）表示转义，\Q和\E也可以在模式中忽略正则表达式中的元字符：<br><code>\d+\Q.$.\E$</code><br>以上表达式先匹配一个或多个数字，紧接着一个点号，然后一个$，再然后一个点号，最后是字符串末尾。<br>也就是说，\Q和\E之间的元字符都会作为普通字符用来匹配。</p>
<hr>
<h3 id="5-分组"><a href="#5-分组" class="headerlink" title="5. 分组"></a>5. 分组</h3><p>重复单个字符只需要在字符后面加上量词,但如果想重复多个字符又该怎么办呢？可以用小括号指定子表达式，然后规定这个子表达式的重复次数，也可以对子表达式进行其他一些操作。<br>简单匹配IP地址的表达式如下：</p>
<blockquote>
<p><code>(\d{1,3}\.){3}\d{1,3}</code></p>
<p>要理解以上表达式，应按下列顺序分析：<br>1）匹配1-3位数字；<br><code>\d{1,3}</code><br>2) 匹配3位数字加上1个英文句号（分组），重复3次（最后加上一个1~3位的数字）：<br><code>(\d{1,3}\.){3}\d{3}</code></p>
</blockquote>
<p>事实上，IP地址的每个数字都不能大于255，所以严格来说这个正则表达式是有问题的。</p>
<p><code>^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$</code><br>这个正则表达式应该就是匹配IP地址的最终版本。</p>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
            <tag> js </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php常用函数]]></title>
      <url>/2015/08/28/php%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>以下是对php的常用函数的搜集和整理，虽说很基础，但还是容易忘记的。</p>
<a id="more"></a>
<hr>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="comment">//===============================时间日期===============================</span></span></span><br><span class="line"><span class="php"><span class="comment">//y返回年最后两位，Y年四位数，m月份数字，M月份英文。d月份几号数字，D星期几英文</span></span></span><br><span class="line"><span class="php">$date=date(<span class="string">"Y-m-d"</span>);</span></span><br><span class="line"><span class="php">$date=date(<span class="string">"Y-m-d H:i:s"</span>);<span class="comment">//带时分秒</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//include,include_once.require,require_once</span></span></span><br><span class="line"><span class="php"><span class="comment">//require("file.php") 在PHP程序执行前就会先读入require所指定引进的文件，如出现错误是致命的。</span></span></span><br><span class="line"><span class="php"><span class="comment">//include("file.php") 可以放在PHP程序的任何位置，PHP程序执行到时才读入include指定引入的文件，如出现错误会提示</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//===============================输出打印===============================</span></span></span><br><span class="line"><span class="php"><span class="comment">//sprintf("%d","3.2") ;//只格式化，返回格式化后的字符串，不输出。</span></span></span><br><span class="line"><span class="php"><span class="comment">//printf("%d","3.2") ;//即格式化，又输出</span></span></span><br><span class="line"><span class="php"><span class="comment">//print("3.2") ;//只输出</span></span></span><br><span class="line"><span class="php"><span class="comment">//echo "nihao","aa";//可以输出多个字符串</span></span></span><br><span class="line"><span class="php"><span class="comment">//print_r(array("a","b","c"));//将数组的键值与元素依次显示</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//===============================常用字符串函数===============================</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//获取字符串长度，有多少个字符，空格也算</span></span></span><br><span class="line"><span class="php">$str=<span class="string">" sdaf sd "</span>;</span></span><br><span class="line"><span class="php">$len=strlen($str);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//用第一个参数里的字符串，把后面数组里的每个元素连接起来，返回一个字符串。</span></span></span><br><span class="line"><span class="php">$str=implode(<span class="string">"-"</span>,<span class="keyword">array</span>(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>));</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//字符串分割方法，返回一个数组，用第一个参数里的字符分割后面的字符串，指定字符的前后和之间都截取，如果指定字符在开头或结尾则返回的数组开头或结尾的元素为空字符串</span></span></span><br><span class="line"><span class="php"><span class="comment">//没有分割到字符串就返回给数组对应元素一个空值。最后一个限制返回数组长度，可不限制，则一直分割下去。</span></span></span><br><span class="line"><span class="php">$array=explode(<span class="string">"a"</span>,<span class="string">"asddad addsadassd dasdadfsdfasdaaa"</span>,<span class="number">4</span>);</span></span><br><span class="line"><span class="php"><span class="comment">//print_r($array);</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//剔除字符串左边开头的空格,并返回</span></span></span><br><span class="line"><span class="php"><span class="comment">//如有第二个参数则是剔除左边开头的空格换成剔除第二个参数里的字符串</span></span></span><br><span class="line"><span class="php">$str=ltrim(<span class="string">"a asd "</span>,<span class="string">"a"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//剔除字符串右边开头的空格</span></span></span><br><span class="line"><span class="php">$str=rtrim(<span class="string">" asd "</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//把第一个字符串两边以第二个参数开头的字符串剔除。如没有第二个参数，默认剔除掉字符串两边开头的空格</span></span></span><br><span class="line"><span class="php">$str=trim(<span class="string">" sdsdfas "</span>,<span class="string">"a"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//从字符串第一个参数里的指定位置开始取多长（多少个）字符，字符串中第一个字符位置从0算。</span></span></span><br><span class="line"><span class="php"><span class="comment">//如果第二个参数为负则从字符串结尾倒数第几个开始取多长的字符串。结尾最后一个字符算-1，截取方向总是从左到右</span></span></span><br><span class="line"><span class="php">$str=substr(<span class="string">"abcdefgh"</span>,<span class="number">0</span>,<span class="number">4</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//将第三个参数的第一个参数字符串用参数二字符串替换</span></span></span><br><span class="line"><span class="php">$str=str_replace(<span class="string">"a"</span>,<span class="string">""</span>,<span class="string">"abcabcAbca"</span>);</span></span><br><span class="line"><span class="php"><span class="comment">//与str_replace用法同，只是不区分大小写</span></span></span><br><span class="line"><span class="php"><span class="comment">//$str=str_ireplace("a"," ","abcabcAbca");</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//返回括号里字符串的字符全部大写的字符串</span></span></span><br><span class="line"><span class="php">$str=strtoupper(<span class="string">"sdaf"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//将括号里第一个字符串变成大写后返回</span></span></span><br><span class="line"><span class="php">$str=ucfirst(<span class="string">"asdf"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//用echo等将括号里字符串打印在网页上时原汁原味打印出括号里的字符串，包括标签字符</span></span></span><br><span class="line"><span class="php">$str=htmlentities(<span class="string">"&lt;br/&gt;"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//返回第二个参数字符串在第一个字符串里出现的次数</span></span></span><br><span class="line"><span class="php">$int=substr_count(<span class="string">"abcdeabcdeablkabd"</span>,<span class="string">"ab"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//返回第二个字符串在第一个字符串第一次出现的位置，第一个字符位置算0</span></span></span><br><span class="line"><span class="php">$int=strpos(<span class="string">"asagaab"</span>,<span class="string">"ab"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//返回第二个字符串在第一个字符串最后一次出现的位置，第一个字符位置算0</span></span></span><br><span class="line"><span class="php">$int=strrpos(<span class="string">"asagaabadfab"</span>,<span class="string">"ab"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//截取返回参数一中从左至右第一个出现的参数二到参数一最后一个字符的字符串</span></span></span><br><span class="line"><span class="php">$str=strstr(<span class="string">"sdafsdgaababdsfgs"</span>,<span class="string">"ab"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//截取返回参数一中从左至右最后一个出现的参数二到参数一最后一个字符的字符串</span></span></span><br><span class="line"><span class="php">$str=strrchr(<span class="string">"sdafsdgaababdsfgs"</span>,<span class="string">"ab"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//将参数二中每一个字符在参数一中相同字符前加"\"</span></span></span><br><span class="line"><span class="php">$str=addcslashes(<span class="string">"abcdefghijklmn"</span>,<span class="string">"akd"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//将参数一的字符串填充到参数二指定的长度（单字符个数），参数三为指定填充的字符串，不写默认空格</span></span></span><br><span class="line"><span class="php"><span class="comment">//参数四填充位置，0在参数一左侧开头填充，1右侧开头，2两边开头同时。不写默认在右侧开头填充</span></span></span><br><span class="line"><span class="php">$str=str_pad(<span class="string">"abcdefgh"</span>,<span class="number">10</span>,<span class="string">"at"</span>,<span class="number">0</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//依次比较两字符串对应字符阿斯克码值，第一对不一样的，如果参数一里大于参数二里的返回1,反之返回-1，两字符串完全一样返回0</span></span></span><br><span class="line"><span class="php">$int1=strcmp(<span class="string">"b"</span>,<span class="string">"a"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//返回第一个参数格式化后的数字格式，第二个参数为保留几个小数，参数三为将小数点换成参数三，参数四为整数部分每三位用什么字符分割</span></span></span><br><span class="line"><span class="php"><span class="comment">//后面三个参数都不写，则默认去掉小数部分，整数每隔三位用逗号,分割。参数三，参数四必须同时存在</span></span></span><br><span class="line"><span class="php">$str=number_format(<span class="number">1231233.1415</span>,<span class="number">2</span>,<span class="string">"d"</span>,<span class="string">"a"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//===============================常用数组方法===============================</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$arr=<span class="keyword">array</span>(<span class="string">"k0"</span>=&gt;<span class="string">"a"</span>,<span class="string">"k1"</span>=&gt;<span class="string">"b"</span>,<span class="string">"k2"</span>=&gt;<span class="string">"c"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//返回数组元素个数</span></span></span><br><span class="line"><span class="php">$int=count($arr);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//判断第二参数的数组元素中是否有第一个参数元素</span></span></span><br><span class="line"><span class="php">$bool=in_array(<span class="string">"b"</span>,$arr);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//返回括号中数组所有键值组成的新数组原数组不改变</span></span></span><br><span class="line"><span class="php">$array=array_keys($arr);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//判断第二个参数的数组中是否有第一个参数的键值，返回真假</span></span></span><br><span class="line"><span class="php">$bool=array_key_exists(<span class="string">"k1"</span>,$arr);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//返回原数组中所有元素值组成的新数组，键值从0开始自增，原数组不变</span></span></span><br><span class="line"><span class="php">$array=array_values($arr);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//返回当前数组指针指向的键值</span></span></span><br><span class="line"><span class="php">$key=key($arr);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//返回当前数组指针指向的元素值</span></span></span><br><span class="line"><span class="php">$value=current($arr);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//返回当前数组指针指向元素的键值及元素值组成的数组，再将指针推向下一位，最后指针指向的是一个空元素返回空</span></span></span><br><span class="line"><span class="php"><span class="comment">//返回的数组中有四个固定键值对应的元素值分别是返回元素的键值及元素值，其中0,'key'键值都对应返回元素键值，1,'value'键值都对应返回的元素值</span></span></span><br><span class="line"><span class="php">$array=each($arr);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//先将数组指针推向下一位，再返回指针移动后指向的元素值</span></span></span><br><span class="line"><span class="php">$value=next($arr);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//将数组指针推向上一位，再返回指针移动后指向的元素值</span></span></span><br><span class="line"><span class="php">$value=prev($arr);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//让数组指针重置指向第一个元素并返回元素值</span></span></span><br><span class="line"><span class="php">$value=reset($arr);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//将数组指针指向最后一位元素，并返回最后一位元素值</span></span></span><br><span class="line"><span class="php">$value=end($arr);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//将第一个参数以后的参数作为元素追加入第一个参数数组的末尾，索引从最小的没用过的数值开始计，返回之后的数组长度</span></span></span><br><span class="line"><span class="php">$int=array_push($arr,<span class="string">"d"</span>,<span class="string">"dfsd"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//将第一个参数数组后面所有参数作为元素添加到第一个参数数组开头处，键值以0从第一个元素处重新累加，原非数值的键值保持不变，原元素排序位置不变，返回之后的数组长度</span></span></span><br><span class="line"><span class="php">$int=array_unshift($arr,<span class="string">"t1"</span>,<span class="string">"t2"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//返回从数组尾部提取最后一个元素值，并把最后一个元素从原数组中剔除</span></span></span><br><span class="line"><span class="php">$value=array_pop($arr);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//array_pop相反，提取返回数组头一个元素值，并把头一个元素从原数组中剔除</span></span></span><br><span class="line"><span class="php">$value=array_shift($arr);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//让第一个参数数组达到第二个参数数值长度，将第三个参数作为元素添加到第一个参数数组的末尾，索引从最小没用过数值开始计并返回，原数组不改变</span></span></span><br><span class="line"><span class="php">$array1=array_pad($arr,<span class="number">10</span>,<span class="string">"t10"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//返回一个将原数组中多余重复元素剔除掉的新数组，原数组不改变</span></span></span><br><span class="line"><span class="php">$array=array_unique($array1);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//将原数组键值打破重新以元素值的阿斯克码值从小到大排序，索引从数字0开始重计</span></span></span><br><span class="line"><span class="php">$int=sort($array);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//和sort相反，以元素值阿斯柯码值大小降序重新排序，索引从0重新计</span></span></span><br><span class="line"><span class="php">$int=rsort($array);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//返回将第一个参数数组中每一个元素值依次作为键值付给参数二数组的数组，两数组长度必须一致，原数组不改变</span></span></span><br><span class="line"><span class="php">$array=array_combine(<span class="keyword">array</span>(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>),$arr);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//将两个数组合并并返回原数组不变</span></span></span><br><span class="line"><span class="php">$array=array_merge($arr,<span class="keyword">array</span>(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>));</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//在第一个参数数组中从第二个参数数值位置开始截取到第三个参数数值长度的数组键值+元素并返回，数组第一个元素位置从0计</span></span></span><br><span class="line"><span class="php">$array=array_slice($arr,<span class="number">2</span>,<span class="number">1</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//截取功能和array_slice()一样，只是将截取部分在原数组中剔除</span></span></span><br><span class="line"><span class="php">$array=array_splice($arr,<span class="number">2</span>,<span class="number">1</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//将第一个参数作为第一个元素，每次自增参数三的值，自增后再作为一个元素存在数组中，直到值达到参数二的值存到数组中为止并返回这个数组</span></span></span><br><span class="line"><span class="php"><span class="comment">//参数一，参数二可以是数字，可以是单个字符，单字符就按阿斯柯码值算，第三个参数不写默认每次自增1</span></span></span><br><span class="line"><span class="php">$array=range(<span class="number">3</span>,<span class="number">9</span>,<span class="number">2</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//将原数组元素与对应键值的对应关系重新随机排列返回真假</span></span></span><br><span class="line"><span class="php">$bool=shuffle($arr);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//计算数组中所有数值型元素值的和</span></span></span><br><span class="line"><span class="php">$int=array_sum(<span class="keyword">array</span>(<span class="string">"a"</span>,<span class="number">2</span>,<span class="string">"cssf"</span>));</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//把一个数组分割为新的数组块，新数组每个元素都是一个数组，新数组每个元素内有几个元素由参数二决定</span></span></span><br><span class="line"><span class="php"><span class="comment">//第三个参数决定元素的键值是否保留原键值可不写，true为保留，默认false不保留</span></span></span><br><span class="line"><span class="php">$array=array_chunk(<span class="keyword">array</span>(<span class="string">"a"</span>=&gt;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>,<span class="string">"g"</span>,<span class="string">"h"</span>),<span class="number">2</span>,<span class="keyword">true</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//json_encode()将数组转换成JSON格式字符串返回</span></span></span><br><span class="line"><span class="php">$arr = <span class="keyword">array</span>(<span class="string">'k1'</span>=&gt;<span class="string">'val1'</span>,<span class="string">'k2'</span>=&gt;<span class="string">'val2'</span>,<span class="string">'k3'</span>=&gt;<span class="keyword">array</span>(<span class="string">'v3'</span>,<span class="string">'v4'</span>));</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> $encode_str = json_encode($arr);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//json_decode()将JSON格式字符串转换成对象或数组返回，具体返回类型由第二参数决定，第二参数默认值 false，JSON格式字符串中键与值需要引号括起来时必须用双引号</span></span></span><br><span class="line"><span class="php"><span class="comment">//如果返回类型为对象，第一次强制转换后的数组中某键值对应的元素还是数组，则在使用该键值对应的数组前依然要对该数组进行强制转换。JSON多维数组以此类推</span></span></span><br><span class="line"><span class="php">$decode_arr = (<span class="keyword">array</span>)json_decode($encode_str);</span></span><br><span class="line"><span class="php">var_dump($decode_arr);</span></span><br><span class="line"><span class="php"><span class="comment">//或者不用强制转换，使用 对象-&gt;属性 的格式来访问</span></span></span><br><span class="line"><span class="php">$decode_arr = json_decode($encode_str);</span></span><br><span class="line"><span class="php">var_dump($decode_arr-&gt;k1);</span></span><br><span class="line"><span class="php"><span class="comment">//如果加第二个参数为 true 则自动后返回数组类型，不加第二参数默认为false</span></span></span><br><span class="line"><span class="php">$decode_arr = json_decode($encode_str, <span class="keyword">true</span>);</span></span><br><span class="line"><span class="php">var_dump($decode_arr);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//与json_encode()类似，将传递的参数以描述的格式序列化，但编码后的字符串不如json_encode()编码后的易读</span></span></span><br><span class="line"><span class="php">$str = serialize($arr);</span></span><br><span class="line"><span class="php">var_dump($str);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//与json_decode()功能类似，将serialize()格式化后的字符串转换回格式化前的变量,并且不用传第二参数就原模原样转换回去</span></span></span><br><span class="line"><span class="php">$arr = unserialize($str);</span></span><br><span class="line"><span class="php">var_dump($arr);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql开启远程连接]]></title>
      <url>/2015/08/26/mysql%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
      <content type="html"><![CDATA[<p>mysql默认是不能用客户端远程连接的，阿里云提供的help.docx里面做了设置说明，mysql密码默认存放在/alidata/account.log<br><a id="more"></a></p>
<h3 id="首先登录"><a href="#首先登录" class="headerlink" title="首先登录"></a>首先登录</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -h localhost -p<span class="comment">;</span></span><br><span class="line">use mysql<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>将host设置为%表示任何ip都能连接mysql，当然您也可以将host指定为某个ip</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update<span class="built_in"> user </span><span class="builtin-name">set</span> <span class="attribute">host</span>=<span class="string">'%'</span> where <span class="attribute">user</span>=<span class="string">'root'</span> <span class="keyword">and</span> <span class="attribute">host</span>=<span class="string">'localhost'</span>;</span><br><span class="line">flush privileges; #刷新权限表，使配置生效</span><br></pre></td></tr></table></figure>
<p>然后我们就能远程连接我们的mysql了。</p>
<h3 id="关闭远程连接"><a href="#关闭远程连接" class="headerlink" title="关闭远程连接"></a>关闭远程连接</h3><p>如果您想关闭远程连接，恢复mysql的默认设置（只能本地连接），您可以通过以下步骤操作：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use mysql                #打开mysql数据库</span><br><span class="line"><span class="comment">#将host设置为localhost表示只能本地连接mysql</span></span><br><span class="line">update<span class="built_in"> user </span><span class="builtin-name">set</span> <span class="attribute">host</span>=<span class="string">'localhost'</span> where <span class="attribute">user</span>=<span class="string">'root'</span>;</span><br><span class="line">flush privileges;        #刷新权限表，使配置生效</span><br></pre></td></tr></table></figure></p>
<p>备注：您也可以添加一个用户名为yuancheng，密码为123456，权限为%（表示任意ip都能连接）的远程连接用户。命令参考如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'yuancheng'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'123456'</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自己搭建ngrok服务全程]]></title>
      <url>/2015/08/23/%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BAngrok%E6%9C%8D%E5%8A%A1%E5%85%A8%E7%A8%8B/</url>
      <content type="html"></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用Github的Webhook部署博客]]></title>
      <url>/2015/08/18/%E5%88%A9%E7%94%A8Github%E7%9A%84Webhook%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>为了能在Github上产生点动态,不想让hexo直接push到vps上~.~如果每次都要手动到vps上执行pull，那太麻烦了！！！<br>Github的仓库可以设置Webhook，当收到push后会通知到设定的url，救星来啦～～～</p>
<a id="more"></a>
<p>看了下api文档，用php写了git-hook.php文件放到博客目录下:<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(<span class="number">7</span>);</span><br><span class="line">date_default_timezone_set(<span class="string">'UTC'</span>);</span><br><span class="line">define(<span class="string">"WWW_ROOT"</span>, <span class="string">"/www/sxflyer.com/"</span>);</span><br><span class="line">define(<span class="string">"LOG_FILE"</span>, <span class="string">"/www/logs/sxflyer.com/git-hook.log"</span>);</span><br><span class="line">$shell = <span class="keyword">sprintf</span>(<span class="string">"cd %s &amp;&amp; /usr/bin/git pull 2&gt;&amp;1"</span>, WWW_ROOT);</span><br><span class="line">$output = shell_exec($shell);</span><br><span class="line">$log = <span class="keyword">sprintf</span>(<span class="string">"[%s] %s \n"</span>, date(<span class="string">'Y-m-d H:i:s'</span>, <span class="keyword">time</span>()), $output);</span><br><span class="line">echo $log;</span><br><span class="line">file_put_contents(LOG_FILE, $log, FILE_APPEND);</span><br></pre></td></tr></table></figure></p>
<p>通过ssh执行php git-hook.php成功,但url访问时失败了.vps上是通过php-fpm执行php的，用户为www-data，shell为/usr/sbin/nologin,会找不到git命令,需要使用git的绝对路径:<br>$shell = sprintf(“cd %s &amp;&amp; /usr/bin/git pull”, WWW_ROOT);<br>出现权限问题<br>error: cannot open .git/FETCH_HEAD: Permission denied<br>修改目录所属：<br>sudo chown -R www-data:www-data ./sxflyer.com<br>在仓库的webhook里添加url <a href="http://sxflyer.com/git-hook.php,然后vps就可以从Github自动pull了" target="_blank" rel="noopener">http://sxflyer.com/git-hook.php,然后vps就可以从Github自动pull了</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[再次迷茫忧虑，但人要觉醒]]></title>
      <url>/2015/08/07/%E5%86%8D%E6%AC%A1%E8%BF%B7%E8%8C%AB%E5%BF%A7%E8%99%91%EF%BC%8C%E4%BD%86%E4%BA%BA%E8%A6%81%E8%A7%89%E9%86%92/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;已经好久没有静下心来写一些东西了.</p>
<a id="more"></a>
<p>&nbsp;&nbsp;&nbsp;&nbsp;不过，仔细想来，其实自己被别人超过是必然事件，因为在离石啦这个项目做完之后，自己几乎处于停滞不前的状态，没有高强度的学习，而别人却与此恰恰相反，自然就被迎头赶上了，所以被超过就很正常。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;返回头去看两个月前写的文章，你完全不应该继续这样下去了，你自己的路已经想好了，请不要收外部坏境的影响，一心学习自己该学习的东西，剩下的交给别人去做吧，你的目标完全不是这样的环境能够给你的，因为你注定不平凡。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;你的任务很重，并且是双线作战，不，是四线作战。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.高数，英语（基本是空白）</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2.数据结构，c语言（只有头绪，但不稳定）</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.php优化，mysql优化等（需要下沉自己到深处）</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4.工作室的任务（虽然难度不大，但是要占用大量的时间）</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;所以，从今天开始，你得行动起来。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.关于高数，要抓基础，不急于现在一时。（完全空白）</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2.英语，底子太薄，没有两三年的时间补不上来，所以要记关键词汇，短语，然后要复习英语的语法，时态。尝试翻译编程中遇到的英文。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.数据结构，要看书，理解书中的算法实现，并且要形成系统，知识体系一定要完善，结合c语言一起学习，尽可能画图。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4.c语言，首要的一点，搞清楚内存分配，看书，看书，看书，了解常见问题，并知道如何解决，结合数据结构一起学习，还有一点，弄清楚进程，线程等概念（操作系统）</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5.关于php，把所有php系统函数和系统类，接口，变量全部用一遍，放到github上。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6.把设计模式读懂，（大话设计模式）和（深入php）</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7.找一个好的mysql视频，把中高级操作看一遍，能写出复杂的sql语句。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8.会用redis，并结合c语言所学知识，尽可能读懂redis的实现原理。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 9.关于工作室的工作，尽可能帮助别人解决深层次的问题，尝试写一些公用的类库，函数（php，js等），共享给别人，增删改查这些基础交给别人做。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;当你看见这么多事情的时候，觉得自己完全是小白，甚至于说连入门都没有入，你还差的很远。请放下你那尊贵的面子，不懂就问，不要考虑谁是领导者的问题，因为你的确不如别人，所以这完全不是问题。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;人如逆水行舟，不进则退，骚年，你的路还很远。</p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[ci流程分析]]></title>
      <url>/2015/08/06/ci%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h3 id="整理的笔记，原先在onenote上写的，只能截图了，多担待"><a href="#整理的笔记，原先在onenote上写的，只能截图了，多担待" class="headerlink" title="整理的笔记，原先在onenote上写的，只能截图了，多担待"></a>整理的笔记，原先在onenote上写的，只能截图了，多担待</h3><a id="more"></a>
<p><a href="http://liqiong520-hexo.stor.sinaapp.com/img%2F2015-11-05_004829.png" target="_blank" rel="noopener"><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2F2015-11-05_004829.png" alt="image"></a></p>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
            <tag> codeIgniter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php定义function时,函数名前加&符号是什么意思？]]></title>
      <url>/2015/08/05/php%E5%AE%9A%E4%B9%89function%E6%97%B6-%E5%87%BD%E6%95%B0%E5%90%8D%E5%89%8D%E5%8A%A0-%E7%AC%A6%E5%8F%B7%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>在PHP中&amp;符号即传的是变量的引用而不是拷贝,引用意味着用不同的名字访问同一个变量内容。这并不像 C 的指针，它们是符号表别名。注意在 PHP 中，变量名和变量内容是不一样的，因此同样的内容可以有不同的名字。最接近的比喻是 Unix 的文件名和文件本身 － 变量名是目录条目，而变量内容则是文件本身。引用可以被看作是 Unix 文件系统中的紧密连接。<br><a id="more"></a><br>PHP 的引用允许你用两个变量来指向同一个内容。意思是，当你这样做时：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php">$a =&amp;$b </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>这意味着 $a 和 $b 指向了同一个变量。<br>注: $a 和 $b 在这里是完全相同的，这并不是 $a 指向了 $b 或者相反，而是 $a 和 $b 指向了同一个地方。<br>同样的语法可以用在函数中，它返回引用，以及用在 new 运算符中（PHP 4.0.4 以及以后版本）：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php">$bar =&amp; <span class="keyword">new</span> fooclass(); </span></span><br><span class="line"><span class="php">$foo =&amp; find_var ($bar); </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>注: 不用 &amp; 运算符导致对象生成了一个拷贝。如果你在类中用<code>$this</code>，它将作用于该类当前的实例。没有用 &amp; 的赋值将拷贝这个实例（例如对象）并且 <code>$this</code> 将作用于这个拷贝上，这并不总是想要的结果。由于性能和内存消耗的问题，通常你只想工作在一个实例上面。<br>尽管你可以用 @ 运算符来关闭构造函数中的任何错误信息，例如用 @new，但用 &amp;new 语句时这不起效果。这是 Zend 引擎的一个限制并且会导致一个解析错误。<br>引用做的第二件事是用引用传递变量。这是通过在函数内建立一个本地变量并且该变量在呼叫范围内引用了同一个内容来实现的。例如： </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> <span class="params">(&amp;$var)</span> </span>&#123; </span></span><br><span class="line"><span class="php">$var++; </span></span><br><span class="line"><span class="php">&#125; </span></span><br><span class="line"><span class="php">$a=<span class="number">5</span>; </span></span><br><span class="line"><span class="php">foo ($a); </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>将使 $a 变成 6。这是因为在 foo 函数中变量 $var 指向了和 $a 指向的同一个内容。更多详细解释见引用传递。<br>引用做的第三件事是引用返回。<br>引用不是什么<br>如前所述，引用不是指针。这意味着下面的结构不会产生你预期的效果： </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> <span class="params">(&amp;$var)</span></span>&#123; </span></span><br><span class="line"><span class="php">$var =&amp; $GLOBALS[<span class="string">"baz"</span>]; </span></span><br><span class="line"><span class="php">&#125; </span></span><br><span class="line"><span class="php">foo($bar); </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>这将使 foo 函数中的 $var 变量在函数调用时和 $bar 绑定在一起，但接着又被重新绑定到了 $GLOBALS[“baz”] 上面。不可能通过引用机制将 $bar 在函数调用范围内绑定到别的变量上面，因为在函数 foo 中并没有变量 $bar（它被表示为 $var，但是 $var 只有变量内容而没有调用符号表中的名字到值的绑定）。<br>引用传递<br>你可以将一个<br>变量通过引用传递给函数，这样该函数就可以修改其参数的值。语法如下： </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> <span class="params">(&amp;$var)</span> </span>&#123; </span></span><br><span class="line"><span class="php">$var++; </span></span><br><span class="line"><span class="php">&#125; </span></span><br><span class="line"><span class="php">$a=<span class="number">5</span>; </span></span><br><span class="line"><span class="php">foo ($a); </span></span><br><span class="line"><span class="php"><span class="comment">// $a is 6 here </span></span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>注意在函数调用时没有引用符号 － 只有函数定义中有。光是函数定义就足够使参数通过引用来正确传递了。<br>以下内容可以通过引用传递：<br>变量，例如 foo($a)<br>New 语句，例如 foo(new foobar())<br>从函数中返回的引用，例如： </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> &amp;<span class="title">bar</span><span class="params">()</span> </span>&#123; </span></span><br><span class="line"><span class="php">$a = <span class="number">5</span>; </span></span><br><span class="line"><span class="php"><span class="keyword">return</span> $a; </span></span><br><span class="line"><span class="php">&#125; </span></span><br><span class="line"><span class="php">foo(bar()); </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>详细解释见引用返回。<br>任何其它表达式都不能通过引用传递，结果未定义。例如下面引用传递的例子是无效的： </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span></span>&#123; <span class="comment">// Note the missing &amp; </span></span></span><br><span class="line"><span class="php">$a = <span class="number">5</span>; </span></span><br><span class="line"><span class="php"><span class="keyword">return</span> $a; </span></span><br><span class="line"><span class="php">&#125; </span></span><br><span class="line"><span class="php">foo(bar()); </span></span><br><span class="line"><span class="php">foo($a = <span class="number">5</span>) <span class="comment">// 表达式，不是变量 </span></span></span><br><span class="line"><span class="php">foo(<span class="number">5</span>) <span class="comment">// 常量，不是变量 </span></span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>这些条件是 PHP 4.0.4 以及以后版本有的。<br>引用返回<br>引用返回用在当你想用函数找到引用应该被绑定在哪一个变量上面时。当返回引用时，使用此语法： </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> &amp;<span class="title">find_var</span> <span class="params">($param)</span></span>&#123; </span></span><br><span class="line"><span class="php"><span class="comment">/* ...code... */</span> </span></span><br><span class="line"><span class="php"><span class="keyword">return</span> $found_var; </span></span><br><span class="line"><span class="php">&#125; </span></span><br><span class="line"><span class="php">$foo =&amp; find_var ($bar); </span></span><br><span class="line"><span class="php">$foo-&gt;x = <span class="number">2</span>; </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>本例中 find_var 函数所返回的对象的属性将被设定（译者：指的是 <code>$foo-&gt;x = 2;</code> 语句），而不是拷贝，就和没有用引用语法一样。<br>注: 和参数传递不同，这里必须在两个地方都用 &amp; 符号 － 来指出返回的是一个引用，而不是通常的一个拷贝，同样也指出 <code>$foo</code> 是作为引用的绑定，而不是通常的赋值。<br>取消引用<br>当你 unset 一个引用，只是断开了变量名和变量内容之间的绑定。这并不意味着变量内容被销毁了。例如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php">$a = <span class="number">1</span>; </span></span><br><span class="line"><span class="php">$b =&amp; $a; </span></span><br><span class="line"><span class="php"><span class="keyword">unset</span> ($a); </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>不会 unset $b，只是 $a。<br>再拿这个和 Unix 的 unlink 调用来类比一下可能有助于理解。<br>引用定位<br>许多 PHP 的语法结构是通过引用机制实现的，所以上述有关引用绑定的一切也都适用于这些结构。一些结构，例如引用传递和返回，已经在上面提到了。其它使用引用的结构有：<br>global 引用<br>当用 global $var 声明一个变量时实际上建立了一个到全局变量的引用。也就是说和这样做是相同的： </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php">$var =&amp; $GLOBALS[<span class="string">"var"</span>]; </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>这意味着，例如，unset $var 不会 unset 全局变量。 </p>
<blockquote>
<p>在一个对象的方法中，$this 永远是调用它的对象的引用</p>
</blockquote>
<p>来自 <a href="http://www.zhihu.com/question/20551872" target="_blank" rel="noopener">http://www.zhihu.com/question/20551872</a></p>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[科学上网dns]]></title>
      <url>/2015/07/26/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91dns/</url>
      <content type="html"><![CDATA[<p>电信：180.153.54.132，联通112.253.28.171，移动112.33.5.51，</p>
<p>hello dns智能版（不用区分运营商）：42.159.153.39</p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[无知的心痛]]></title>
      <url>/2015/06/27/%E6%97%A0%E7%9F%A5%E7%9A%84%E5%BF%83%E7%97%9B/</url>
      <content type="html"><![CDATA[<p>我没有说谎，我只想更好地爱你，但却带来了伤害，我一直都在追逐你的脚步，而不是你追逐我的脚步，你是我心中的灯塔，而这一切都很理想～</p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[淡定]]></title>
      <url>/2015/06/17/%E6%B7%A1%E5%AE%9A/</url>
      <content type="html"><![CDATA[<p>无论未来怎么样，起码现在应该保持镇定，人静不下来就做不好事，至于我这样的，如果静不下来根本就不能做事，所以一定要冷静，好好的梳理，那样一切又会变得顺起来。</p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[琼-喜悦]]></title>
      <url>/2015/06/06/%E7%90%BC-%E5%96%9C%E6%82%A6/</url>
      <content type="html"><![CDATA[<p>我们在一起很开心。唱歌，大合唱。大学唯一的同桌。</p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[琼-歌]]></title>
      <url>/2015/06/06/%E7%90%BC-%E6%AD%8C/</url>
      <content type="html"><![CDATA[<p>这街上太拥挤，太多人有秘密。</p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[夜晚中最闪亮的灯光]]></title>
      <url>/2015/06/06/%E5%A4%9C%E6%99%9A%E4%B8%AD%E6%9C%80%E9%97%AA%E4%BA%AE%E7%9A%84%E7%81%AF%E5%85%89/</url>
      <content type="html"><![CDATA[<p>有颗心不断膨胀不断膨胀。。</p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[改革中遇到的问题只能用改革来解决]]></title>
      <url>/2015/05/28/%E6%94%B9%E9%9D%A9%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%AA%E8%83%BD%E7%94%A8%E6%94%B9%E9%9D%A9%E6%9D%A5%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<p>人都有在十字路口徘徊迷茫的过程，我自己也一样，就在昨天，我认为我不必再为此而迷茫，因为我决定要自己考本科，这个决定推翻了我这数年来的想法，值得一提的是吗，这次是我许多年来拿出这么大的勇气来下这个决定，所以我认为它真是可以称为一个决定，或者是一个人对于人生的抉择。</p>
<a id="more"></a>
<p>我考本科的目的可能不仅仅是为了以后能有更多的选择，更广的路，更重要的是为了战胜自己心中的魔鬼，它让我自步入高中以来，心里充斥着负能量。让自己那么胆小怕事，声怕别人知道自己以前的事，并且让自己心中充满了仇恨，恨周围的任何一个人，虽然自己都不知道为什么要恨别人。当然，这并不意味着你高中以前的生活就是非常美好的，我认为人的每一个阶段都会有自己的心魔，你要么顺从于它，要么拿出勇气去战胜它。</p>
<p>记得李老师对我说过：“你的心态决定了你的一切。” 或许她在那个时候就已经看到了我的未来，知道总有那么一天，我会去发现这个问题，去敢于抛出这个问题的根源，那我认为现在是时候了，那就是你的心态极不稳定是因为受心魔控制，只有敢于否定自己的过去，才能正视现实，走向未来，你从一出生到现在，从没有向今天这样正视过自己一眼，也从来没有勇气和别人说：“我的说法不一定对。” 我认为这都是自己不敢于去面对真理的。而真理往往掌握在少数人手中的。</p>
<p>所以最后想说的就是，这个星球不会因为你的出生或死去而停止转动，人类的历史也不会因为你的个人意念而改变，而一个人更不会因为迷茫徘徊而死去，但是这所有的一切都将成为时间轴上的一部分，就像砌墙一样，每一代人都是一堵墙的一层，看起来都一样，无限递归，没有终点，所以人做一件事也意味着是没有终点，有可能你认为的终点只是其中的一个节点，当你停下脚步的时候，这堵墙依然在加高，所以，对于任何一件事，一种想法，从来就没有所谓的对与错，明天的对就是今天的错，今天的对就是过去的错，你只有勇于不断改革，才能继续前进，而，改革中遇到的问题还是只能用改革来解决！</p>
<p>本文写于2015年5月23日上午</p>
<p>最后<br>—-感谢这一路上陪伴过我的每一个人，无论是所谓的好人还是坏人，爱我的人还是恨我的人，也或者是喜欢还是不喜欢，谢谢你们！</p>
]]></content>
      
        <categories>
            
            <category> 情感 </category>
            
            <category> 旅行 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[走一步，看百步]]></title>
      <url>/2015/05/17/%E8%B5%B0%E4%B8%80%E6%AD%A5%EF%BC%8C%E7%9C%8B%E7%99%BE%E6%AD%A5/</url>
      <content type="html"><![CDATA[<p>当我们遇到我们（或其他人）给自己埋下的逻辑炸弹，编程会变得很困难。我们天天在编写逻辑炸弹。它们就在地表下静静地待着，等着爆炸。一旦爆炸，通常就带来不可预测的严重后果。</p>
<p>随着新的代码模块被加入到项目中，项目的复杂度会上升。这种上升不是线性的，而是呈某种指数形式。</p>
<p>程序员的精力是一种有限的资源，所以这种爆炸式增长的复杂度最终会淹没程序员。你的大脑最终会不堪重负，这是一个转折点。</p>
<p>这就是炸弹开始爆炸的时刻。有各种各样的炸弹：在遍历时修改数组，数组下标偶尔变成负数，另一个线程在你的函数执行的起点和终点中间改变对象的状态。轰，轰，轰……</p>
<p>我认为最快捷可靠的程序设计需要培养一种避免这些问题的风格。</p>
<p>编写明确表达行为的代码。选择有意义、准确、无歧义的符号名字。严格执行命名方案，不要用不同的单词描述同一个事物。</p>
<p>如果有，采用最简单的解决方案。不要为速度优化，而是为可读性和透明度优化。</p>
<p>如果你在最初编写代码时没有注意可重用性，不要欺骗自己相信代码可以很神奇地被重用。相反，应该从一种情形着手，保持代码的具体性。如果值得修改代码让它一般化，那么应该做好彻底重写的准备。</p>
<p><span class="post_sig">发自 WordPress for Android</span></p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[img-日落]]></title>
      <url>/2015/05/15/img-%E6%97%A5%E8%90%BD/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><a href="http://liqiong520-hexo.stor.sinaapp.com/img%2Fwpid-wp-1431688224633-1024x768.jpg" target="_blank" rel="noopener"><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2Fwpid-wp-1431688224633-1024x768.jpg" alt="image" title="wp-1431688224633.jpg"></a></p>
<p><span class="post_sig">发自 WordPress for Android</span></p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[img-晚霞]]></title>
      <url>/2015/05/14/img-%E6%99%9A%E9%9C%9E/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><a href="http://liqiong520-hexo.stor.sinaapp.com/img%2Fwpid-wp-1431601482937-1024x768.jpg" target="_blank" rel="noopener"><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2Fwpid-wp-1431601482937-1024x768.jpg" alt="image" title="wp-1431601482937.jpg"></a></p>
<p><span class="post_sig">发自 WordPress for Android</span></p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[琼-傻货]]></title>
      <url>/2015/05/13/%E7%90%BC-%E5%82%BB%E8%B4%A7/</url>
      <content type="html"><![CDATA[<p>早晨弄饼的时候烫到啦，现在还疼。</p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[琼-校园]]></title>
      <url>/2015/05/13/%E7%90%BC-%E6%A0%A1%E5%9B%AD/</url>
      <content type="html"><![CDATA[<p>艺术，高雅。 体味。聆听，静观。</p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[琼-星期二]]></title>
      <url>/2015/05/12/%E7%90%BC-%E6%98%9F%E6%9C%9F%E4%BA%8C/</url>
      <content type="html"><![CDATA[<p>自己做的晚饭。自己做的炒米，自己觉得很香。周围人都是夸赞。再接再厉。喜欢做饭的感觉。自己体会自己的成果，是一种享受。</p>
<a id="more"></a>
<p><a href="http://liqiong520-hexo.stor.sinaapp.com/img%2Fwpid-img_20150512_200151-576x1024.jpg" target="_blank" rel="noopener"><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2Fwpid-img_20150512_200151-576x1024.jpg" alt="image" title="IMG_20150512_200151.jpg"></a></p>
<strike><br><a href="http://liqiong520-hexo.stor.sinaapp.com/img%2Fwpid-img_20150512_200128-576x1024.jpg" target="_blank" rel="noopener"><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2Fwpid-img_20150512_200128-576x1024.jpg" alt="image" title="IMG_20150512_200140.jpg"></a><br><br><a href="http://liqiong520-hexo.stor.sinaapp.com/img%2Fwpid-img_20150512_200140-576x1024.jpg" target="_blank" rel="noopener"><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2Fwpid-img_20150512_200140-576x1024.jpg" alt="image" title="IMG_20150512_200128.jpg"></a></strike>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[什么是堆和栈，它们在哪儿？]]></title>
      <url>/2015/05/12/%E4%BB%80%E4%B9%88%E6%98%AF%E5%A0%86%E5%92%8C%E6%A0%88%EF%BC%8C%E5%AE%83%E4%BB%AC%E5%9C%A8%E5%93%AA%E5%84%BF%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p><strong>什么是堆和栈，它们在哪儿？</strong></p>
<a id="more"></a>
<p><strong>问题描述</strong></p>
<p>编程语言书籍中经常解释值类型被创建在栈上，引用类型被创建在堆上，但是并没有本质上解释这堆和栈是什么。我仅有高级语言编程经验，没有看过对此更清晰的解释。我的意思是我理解什么是栈，但是它们到底是什么，在哪儿呢（站在实际的计算机物理内存的角度上看）？</p>
<p>在通常情况下由操作系统（OS）和语言的运行时（runtime）控制吗？</p>
<p>它们的作用范围是什么？</p>
<p>它们的大小由什么决定？</p>
<p>哪个更快？</p>
<p><strong>答案一</strong></p>
<p>栈是为执行线程留出的内存空间。当函数被调用的时候，栈顶为局部变量和一些 bookkeeping 数据预留块。当函数执行完毕，块就没有用了，可能在下次的函数调用的时候再被使用。栈通常用后进先出（LIFO）的方式预留空间；因此最近的保留块（reserved block）通常最先被释放。这么做可以使跟踪堆栈变的简单；从栈中释放块（free block）只不过是指针的偏移而已。</p>
<p>堆（heap）是为动态分配预留的内存空间。和栈不一样，从堆上分配和重新分配块没有固定模式；你可以在任何时候分配和释放它。这样使得跟踪哪部分堆已经被分配和被释放变的异常复杂；有许多定制的堆分配策略用来为不同的使用模式下调整堆的性能。</p>
<p>每一个线程都有一个栈，但是每一个应用程序通常都只有一个堆（尽管为不同类型分配内存使用多个堆的情况也是有的）。</p>
<p>直接回答你的问题： 1. 当线程创建的时候，操作系统（OS）为每一个系统级（system-level）的线程分配栈。通常情况下，操作系统通过调用语言的运行时（runtime）去为应用程序分配堆。 2. 栈附属于线程，因此当线程结束时栈被回收。堆通常通过运行时在应用程序启动时被分配，当应用程序（进程）退出时被回收。 3. 当线程被创建的时候，设置栈的大小。在应用程序启动的时候，设置堆的大小，但是可以在需要的时候扩展（分配器向操作系统申请更多的内存）。 4. 栈比堆要快，因为它存取模式使它可以轻松的分配和重新分配内存（指针/整型只是进行简单的递增或者递减运算），然而堆在分配和释放的时候有更多的复杂的 bookkeeping 参与。另外，在栈上的每个字节频繁的被复用也就意味着它可能映射到处理器缓存中，所以很快（译者注：局部性原理）。</p>
<p><strong>答案二</strong></p>
<p>Stack:</p>
<p>和堆一样存储在计算机 RAM 中。</p>
<p>在栈上创建变量的时候会扩展，并且会自动回收。</p>
<p>相比堆而言在栈上分配要快的多。</p>
<p>用数据结构中的栈实现。</p>
<p>存储局部数据，返回地址，用做参数传递。</p>
<p>当用栈过多时可导致栈溢出（无穷次（大量的）的递归调用，或者大量的内存分配）。</p>
<p>在栈上的数据可以直接访问（不是非要使用指针访问）。</p>
<p>如果你在编译之前精确的知道你需要分配数据的大小并且不是太大的时候，可以使用栈。</p>
<p>当你程序启动时决定栈的容量上限。</p>
<p>Heap：</p>
<p>和栈一样存储在计算机RAM。</p>
<p>在堆上的变量必须要手动释放，不存在作用域的问题。数据可用 delete, delete[] 或者 free 来释放。</p>
<p>相比在栈上分配内存要慢。</p>
<p>通过程序按需分配。</p>
<p>大量的分配和释放可造成内存碎片。</p>
<p>在 C++ 中，在堆上创建数的据使用指针访问，用 new 或者 malloc 分配内存。</p>
<p>如果申请的缓冲区过大的话，可能申请失败。</p>
<p>在运行期间你不知道会需要多大的数据或者你需要分配大量的内存的时候，建议你使用堆。</p>
<p>可能造成内存泄露。</p>
<p>举例：</p>
<blockquote>
<p>int foo()<br>{<br>char *pBuffer; //&lt;–nothing allocated yet (excluding the pointer itself, which is allocated here on the stack).<br>bool b = true; // Allocated on the stack.<br>if(b)<br>{<br>//Create 500 bytes on the stack<br>char buffer[500];</p>
<p>//Create 500 bytes on the heap<br>pBuffer = new char[500];</p>
<p>}//&lt;– buffer is deallocated here, pBuffer is not<br>}//&lt;— oops there’s a memory leak, I should have called delete[] pBuffer;</p>
</blockquote>
<p><strong>答案三</strong></p>
<p>堆和栈是两种内存分配的两个统称。可能有很多种不同的实现方式，但是实现要符合几个基本的概念:</p>
<p>1.对栈而言，栈中的新加数据项放在其他数据的顶部，移除时你也只能移除最顶部的数据（不能越位获取）。</p>
<p>2.对堆而言，数据项位置没有固定的顺序。你可以以任何顺序插入和删除，因为他们没有“顶部”数据这一概念。</p>
<p>上面上个图片很好的描述了堆和栈分配内存的方式。</p>
<p>在通常情况下由操作系统（OS）和语言的运行时（runtime）控制吗？</p>
<p>如前所述，堆和栈是一个统称，可以有很多的实现方式。计算机程序通常有一个栈叫做调用栈，用来存储当前函数调用相关的信息（比如：主调函数的地址，局部变量），因为函数调用之后需要返回给主调函数。栈通过扩展和收缩来承载信息。实际上，程序不是由运行时来控制的，它由编程语言、操作系统甚至是系统架构来决定。</p>
<p>堆是在任何内存中动态和随机分配的（内存的）统称；也就是无序的。内存通常由操作系统分配，通过应用程序调用 API 接口去实现分配。在管理动态分配内存上会有一些额外的开销，不过这由操作系统来处理。</p>
<p>它们的作用范围是什么？</p>
<p>调用栈是一个低层次的概念，就程序而言，它和“作用范围”没什么关系。如果你反汇编一些代码，你就会看到指针引用堆栈部分。就高级语言而言，语言有它自己的范围规则。一旦函数返回，函数中的局部变量会直接直接释放。你的编程语言就是依据这个工作的。</p>
<p>在堆中，也很难去定义。作用范围是由操作系统限定的，但是你的编程语言可能增加它自己的一些规则，去限定堆在应用程序中的范围。体系架构和操作系统是使用虚拟地址的，然后由处理器翻译到实际的物理地址中，还有页面错误等等。它们记录那个页面属于那个应用程序。不过你不用关心这些，因为你仅仅在你的编程语言中分配和释放内存，和一些错误检查（出现分配失败和释放失败的原因）。</p>
<p>它们的大小由什么决定？</p>
<p>依旧，依赖于语言，编译器，操作系统和架构。栈通常提前分配好了，因为栈必须是连续的内存块。语言的编译器或者操作系统决定它的大小。不要在栈上存储大块数据，这样可以保证有足够的空间不会溢出，除非出现了无限递归的情况（额，栈溢出了）或者其它不常见了编程决议。</p>
<p>堆是任何可以动态分配的内存的统称。这要看你怎么看待它了，它的大小是变动的。在现代处理器中和操作系统的工作方式是高度抽象的，因此你在正常情况下不需要担心它实际的大小，除非你必须要使用你还没有分配的内存或者已经释放了的内存。</p>
<p>哪个更快一些？</p>
<p>栈更快因为所有的空闲内存都是连续的，因此不需要对空闲内存块通过列表来维护。只是一个简单的指向当前栈顶的指针。编译器通常用一个专门的、快速的寄存器来实现。更重要的一点事是，随后的栈上操作通常集中在一个内存块的附近，这样的话有利于处理器的高速访问（译者注：局部性原理）。</p>
<p><strong>答案四</strong></p>
<p>你问题的答案是依赖于实现的，根据不同的编译器和处理器架构而不同。下面简单的解释一下：</p>
<p>栈和堆都是用来从底层操作系统中获取内存的。</p>
<p>在多线程环境下每一个线程都可以有他自己完全的独立的栈，但是他们共享堆。并行存取被堆控制而不是栈。</p>
<p>堆:</p>
<p>堆包含一个链表来维护已用和空闲的内存块。在堆上新分配（用 new 或者 malloc）内存是从空闲的内存块中找到一些满足要求的合适块。这个操作会更新堆中的块链表。这些元信息也存储在堆上，经常在每个块的头部一个很小区域。</p>
<p>堆的增加新快通常从地地址向高地址扩展。因此你可以认为堆随着内存分配而不断的增加大小。如果申请的内存大小很小的话，通常从底层操作系统中得到比申请大小要多的内存。</p>
<p>申请和释放许多小的块可能会产生如下状态：在已用块之间存在很多小的空闲块。进而申请大块内存失败，虽然空闲块的总和足够，但是空闲的小块是零散的，不能满足申请的大小，。这叫做“堆碎片”。</p>
<p>当旁边有空闲块的已用块被释放时，新的空闲块可能会与相邻的空闲块合并为一个大的空闲块，这样可以有效的减少“堆碎片”的产生。</p>
<p>栈:</p>
<p>栈经常与 sp 寄存器（译者注：”stack pointer”，了解汇编的朋友应该都知道）一起工作，最初 sp 指向栈顶（栈的高地址）。</p>
<p>CPU 用 push 指令来将数据压栈，用 pop 指令来弹栈。当用 push 压栈时，sp 值减少（向低地址扩展）。当用 pop 弹栈时，sp 值增大。存储和获取数据都是 CPU 寄存器的值。</p>
<p>当函数被调用时，CPU使用特定的指令把当前的 IP （译者注：“instruction pointer”，是一个寄存器，用来记录 CPU 指令的位置）压栈。即执行代码的地址。CPU 接下来将调用函数地址赋给 IP ，进行调用。当函数返回时，旧的 IP 被弹栈，CPU 继续去函数调用之前的代码。</p>
<p>当进入函数时，sp 向下扩展，扩展到确保为函数的局部变量留足够大小的空间。如果函数中有一个 32-bit 的局部变量会在栈中留够四字节的空间。当函数返回时，sp 通过返回原来的位置来释放空间。</p>
<p>如果函数有参数的话，在函数调用之前，会将参数压栈。函数中的代码通过 sp 的当前位置来定位参数并访问它们。</p>
<p>函数嵌套调用和使用魔法一样，每一次新调用的函数都会分配函数参数，返回值地址、局部变量空间、嵌套调用的活动记录都要被压入栈中。函数返回时，按照正确方式的撤销。</p>
<p>栈要受到内存块的限制，不断的函数嵌套/为局部变量分配太多的空间，可能会导致栈溢出。当栈中的内存区域都已经被使用完之后继续向下写（低地址），会触发一个 CPU 异常。这个异常接下会通过语言的运行时转成各种类型的栈溢出异常。（译者注：“不同语言的异常提示不同，因此通过语言运行时来转换”我想他表达的是这个含义）</p>
<p><em>*函数的分配可以用堆来代替栈吗？</em></p>
<p>不可以的，函数的活动记录（即局部或者自动变量）被分配在栈上， 这样做不但存储了这些变量，而且可以用来嵌套函数的追踪。</p>
<p>堆的管理依赖于运行时环境，C 使用 malloc ，C++ 使用 new ，但是很多语言有垃圾回收机制。</p>
<p>栈是更低层次的特性与处理器架构紧密的结合到一起。当堆不够时可以扩展空间，这不难做到，因为可以有库函数可以调用。但是，扩展栈通常来说是不可能的，因为在栈溢出的时候，执行线程就被操作系统关闭了，这已经太晚了。</p>
<p><strong>译者注</strong></p>
<p>关于堆栈的这个帖子，对我来说，收获非常多。我之前看过一些资料，自己写代码的时候也常常思考。就这方面，也和祥子（我的大学舍友，现在北京邮电读研，技术牛人）探讨过多次了。但是终究是一个一个的知识点，这个帖子看完之后，豁然开朗，把知识点终于连接成了一个网。这种感觉，经历过的一定懂得，期间的兴奋不言而喻。</p>
<p>这个帖子跟帖者不少，我选了评分最高的四个。这四个之间也有一些是重复的观点。个人钟爱第四个回答者，我看的时候，瞬间高潮了，有木有？不过需要一些汇编语言、操作系统、计算机组成原理的的基础，知道那几个寄存器是干什么的，要知道计算机的流水线指令工作机制，保护/恢复现场等概念。三个回复者都涉及到了操作系统中虚拟内存；在比较速度的时候，大家一定要在脑中对“局部性原理”和计算机高速缓存有一个概念。</p>
<p>如果你把这篇文章看懂了，我相信你收获的不只是堆和栈，你会理解的更多！</p>
<p>兴奋之余，有几点还是要强调的，翻译没有逐字逐词翻译，大部分是通过我个人的知识积累和对回帖者的意图揣测而来的。请大家不要咬文嚼字，逐个推敲，我们的目的在于技术交流，不是么？达到这一目的就够了。</p>
<p>下面是一些不确定点:</p>
<p>我没有听过 bookkeeping data 这种说法，故没有翻译。从上下文理解来看，可以想成是用来寄存器值？函数参数？返回地址？如果有了解具体含义的朋友，烦请告知。</p>
<p>栈和堆栈是一回事，英文表达是 stack，堆是 heap。</p>
<p>调用栈的概念，我是第一次听说，不太熟悉。大家可以去查查资料研究一下。</p>
<p>以上，送给大家，本文结束。</p>
<p>原文出处：StackOverflow</p>
<p>译文出处：独酌逸醉</p>
<p><span class="post_sig">发自 WordPress for Android</span></p>
]]></content>
      
        <categories>
            
            <category> 转载 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构，c，c++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[爱情中的那份小惊喜]]></title>
      <url>/2015/05/11/%E7%90%BC-%E7%88%B1%E6%83%85%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BB%BD%E5%B0%8F%E6%83%8A%E5%96%9C/</url>
      <content type="html"><![CDATA[<p>我很喜欢这样属于俩人的独特空间，让我能够很开心。我也会和你分享我的私有小秘密。。</p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP中Session有效期及实现保持登陆]]></title>
      <url>/2015/05/10/PHP%E4%B8%ADSession%E6%9C%89%E6%95%88%E6%9C%9F%E5%8F%8A%E5%AE%9E%E7%8E%B0%E4%BF%9D%E6%8C%81%E7%99%BB%E9%99%86/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<blockquote>
<p><a href="http://www.csdn123.com/html/itweb/20131022/179917.htm" target="_blank" rel="noopener">http://www.csdn123.com/html/itweb/20131022/179917.htm</a></p>
<p>session.gc_maxlifetime session在服务器保存的时间，超时可能被删除</p>
<p>session.cookie_lifetime session_id在客户端cookie中保存的时间，超时失效</p>
<p>一个有效的session要求cookie有效，同时在服务器存在</p>
<p>php.ini默认值cookie_lifetime=0, gc_maxlifetime=1440，即cookie在浏览器关闭后立即失效，数据在服务器这边保存24分钟</p>
<p>如果单独修改cookie_lifetime超过1440，没有修改gc_maxlifetime同样不能让 session 生存周期超过24分钟</p>
<p>网站中要达到用户登陆时勾选了“保持登陆”则保持更长的登陆有效期（只要没有主动退出，关闭浏览器后再次打开依然是登陆状态）：</p>
<p>1. 修改gc_maxlifetime为希望的保持登陆有效期，比如7天则是86400*7</p>
<p>2. 保持cookie_lifetime为0，登陆时没有勾选“保持登陆”则关闭浏览器立即失效</p>
<p>3. 等登陆时勾选了“保持登陆”，则使用</p>
<p>$params = session_get_cookie_params();</p>
<p>setcookie(session_name(), session_id(), time() + ini_get(‘session.gc_maxlifetime’), $params[‘path’], $params[‘domain’], $params[‘secure’], $params[‘httponly’]);</p>
<p>来修改cookie的有效期和服务器保存数据的有效期一致</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[今天写着写着忽然感觉自己很难受]]></title>
      <url>/2015/05/10/%E4%BB%8A%E5%A4%A9%E5%86%99%E7%9D%80%E5%86%99%E7%9D%80%E5%BF%BD%E7%84%B6%E6%84%9F%E8%A7%89%E8%87%AA%E5%B7%B1%E5%BE%88%E9%9A%BE%E5%8F%97/</url>
      <content type="html"><![CDATA[<p>今天写着写着忽然感觉自己很难受，那种难受完全无法用语言来表达，以后写东西，一定要先规划好，再开写，不然写起来也是很难受，为此今天晚上都没过去工作室，仿佛有一种预感，过去的话会有很不好的事情要发生，今天虽没什么大的突破，但是～懂得编程这种事完全急不得，该有的流程一定要走，如果你为了图省事而省略了哪一步，就感觉像是埋下了一颗地雷，终究有一天它会把自己炸得血肉模糊，所以，一定要规划好，试着让自己慢下来，这样才会更专注，才更有效率。</p>
<p>&nbsp;<br>&nbsp;</p>
<p>坚持让自己每天只高效率的工作8小时，剩下的时间去天台逛逛，去运动，看书，远离屏幕，同学们，晚安啦，明天见。</p>
<p>&nbsp;</p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> 吕梁 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式的重要性]]></title>
      <url>/2015/05/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;几乎生活中所有的一切都可以用此阐述来达到更好的解决方案以及执行效率,以编程为例:</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;首先第一点,绝对要基于顶层设计,</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当你负责设计,前端或者后台中的某一部分时,你就是这一部分的&quot;领导者&quot;,所有的代码都是你宝贵的&quot;下属&quot;,你要做的不是去理解这些代码到底是怎么来的,你要的就是利用一切手段得到这些下属然后调用,至于里面干了写什么事,你不需要知道,当然,当你找不到现成的时候,就必须自己写,但自己写的过程中,就要提到我们的下一点.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;第二点,绝对要迅速转化角度,再让自己基于顶层设计.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当找不到现成代码的时候,我们必须迅速转化角度,把自己当做即将要写的代码的&quot;领导者&quot;,而不能还把自己停留在上一层,自己必须马上降到对应的层面,在手写的过程中,就要提到我们的下一点.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;第三点,反复迅速转化角度,反复让自己基于顶层设计.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个层面我完全不会阐述,但我心里理解,目的是要尽可能的&quot;高内聚,低耦合&quot;,真心太重要了.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;生活中的企业,管理都可用这三点,优化方案和执行效率.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;感谢乔老师推荐的书</p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[爱自己才能爱生活]]></title>
      <url>/2015/05/08/%E7%88%B1%E8%87%AA%E5%B7%B1%E6%89%8D%E8%83%BD%E7%88%B1%E7%94%9F%E6%B4%BB/</url>
      <content type="html"><![CDATA[<p>爱自己才能爱生活，才会更好的照顾自己的爱人，家人。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——致工作室每天奋斗的人</p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 吕梁 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Surreal设计家: 超小空间]]></title>
      <url>/2015/05/08/Surreal%E8%AE%BE%E8%AE%A1%E5%AE%B6%E8%B6%85%E5%B0%8F%E7%A9%BA%E9%97%B4/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2F1715308508175270251.jpg" alt=""></p>
<p><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2F3246532381481180175.jpg" alt=""></p>
<p><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2F6597864713565487439.jpg" alt=""></p>
<p><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2F6597864713565487442.jpg" alt=""></p>
<p><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2F6597933982798032919.jpg" alt=""></p>
<p><img src="http://liqiong520-hexo.stor.sinaapp.com/img%2F843580505302170083.jpg" alt=""></p>
<p><a href="http://artshome.lofter.com/post/3b9823_6e1d919" target="_blank" rel="noopener">Surreal设计家:</a></p>
<blockquote>
<p>超小空间的微型公寓设计(分享来源:设计之家)</p>
</blockquote>
<p>好喜欢!</p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 创意 </tag>
            
            <tag> 家居 </tag>
            
            <tag> 家饰 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[bui表单验证规则]]></title>
      <url>/2015/05/08/bui%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E8%A7%84%E5%88%99/</url>
      <content type="html"><![CDATA[<p>做离石啦项目时整理了下阿里的bui使用规则。</p>
<a id="more"></a>
<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">label&gt;正则表达式：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"j"</span> <span class="attr">data-messages</span>=<span class="string">"&#123;regexp:'不是有效的数字'&#125;"</span> <span class="attr">data-rules</span>=<span class="string">"&#123;regexp:/^\d+$/&#125;"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">var Form = BUI.Form;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      new Form.Form(&#123;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        srcNode : '#J_Form'</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      &#125;).render();</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"b"</span>  <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">data-tip</span>=<span class="string">"&#123;text:'请填写内容！',iconCls:'icon-ok'&#125;"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">data-tip="&#123;text:'请填写内容！'&#125;"</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">data-rules="&#123;required:true&#125;"</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&#123;required:true,sid:5&#125; 必填 并且为5位</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&#123;number:true&#125; 必须为数字</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&#123;max:100&#125; 最大值为100</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>最小值：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"c"</span> <span class="attr">data-rules</span>=<span class="string">"&#123;min:10&#125;"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>最小长度：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"d"</span> <span class="attr">data-rules</span>=<span class="string">"&#123;minlength:5&#125;"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>最大长度：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"e"</span> <span class="attr">data-rules</span>=<span class="string">"&#123;maxlength:5&#125;"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">修改默认提示信息</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">data-rules="&#123;required:true&#125;" data-messages="&#123;required:'修改默认提示信息 '&#125;"</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>第一次输入：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"f1"</span> <span class="attr">name</span>=<span class="string">"f1"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>第二次输入：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"f2"</span> <span class="attr">data-rules</span>=<span class="string">"&#123;equalTo:'#f1'&#125;"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>日期值：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"calendar"</span> <span class="attr">name</span>=<span class="string">"h"</span> <span class="attr">data-rules</span>=<span class="string">"&#123;date:true&#125;"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱值：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"i"</span> <span class="attr">data-rules</span>=<span class="string">"&#123;email:true&#125;"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span>    </span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>最小日期：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"calendar"</span> <span class="attr">name</span>=<span class="string">"k"</span> <span class="attr">data-rules</span>=<span class="string">"&#123;minDate:'2014-01-01'&#125;"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>最大日期：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"calendar"</span> <span class="attr">name</span>=<span class="string">"l"</span> <span class="attr">data-rules</span>=<span class="string">"&#123;maxDate:'2012-01-01'&#125;"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">必须选择</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">data-rules</span>=<span class="string">"&#123;required:true&#125;"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>-请选择-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"其他"</span>&gt;</span>其他<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">表单默认值：placeholder  </span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"span1 span-width control-text"</span> <span class="attr">placeholder</span>=<span class="string">"span1"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">文本框 宽度 样式</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"input-small"</span>&gt;</span><span class="tag">&lt;<span class="name">option</span>&gt;</span>input-small<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"input-normal"</span>&gt;</span><span class="tag">&lt;<span class="name">option</span>&gt;</span>input-normal<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"input-large"</span>&gt;</span><span class="tag">&lt;<span class="name">option</span>&gt;</span>input-large<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">调整 高度</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">controls control-row1 到 controls control-row9</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">调整 table 表单 高度</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;:U('userchuli/adduserhandle')&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">name</span>=<span class="string">"form1"</span> <span class="attr">id</span>=<span class="string">"J_Form"</span> <span class="attr">class</span>=<span class="string">"form-horizontal"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;:U('userchuli/adduserhandle')&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">name</span>=<span class="string">"form1"</span> <span class="attr">id</span>=<span class="string">"J_Form"</span> <span class="attr">class</span>=<span class="string">"form-horizontal well"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;:U('userchuli/adduserhandle')&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">name</span>=<span class="string">"form1"</span> <span class="attr">id</span>=<span class="string">"J_Form"</span> <span class="attr">class</span>=<span class="string">"form-horizontal span20  well"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">红色 标注 必填</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"control-label"</span>&gt;</span><span class="tag">&lt;<span class="name">s</span>&gt;</span>*<span class="tag">&lt;/<span class="name">s</span>&gt;</span>供应商编码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">最小日期：</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>最小日期：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"calendar"</span> <span class="attr">name</span>=<span class="string">"k"</span> <span class="attr">data-rules</span>=<span class="string">"&#123;minDate:'2014-01-01'&#125;"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">最大日期：</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>最大日期：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"input-small calendar"</span> <span class="attr">name</span>=<span class="string">"l"</span> <span class="attr">data-rules</span>=<span class="string">"&#123;maxDate:'2012-01-01'&#125;"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">加载日历 控件</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- script start--&gt;</span>  </span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">          var Calendar = BUI.Calendar</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">          var datepicker = new Calendar.DatePicker(&#123;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            trigger:'.calendar',</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            showTime:true, // 显示 小时 分钟 默认不显示时间</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            lockTime : &#123; //可以锁定时间，hour,minute,second</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">              //hour : 12,</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">              minute:30,</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">              second : 30</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            &#125;,</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            maxDate : '2014-01-01', // 最大日期限制</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            minDate : '2013-7-25', //  最小日期限制</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            autoRender : true</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">          &#125;);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- script end --&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- script start--&gt;</span>  </span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">          var Calendar = BUI.Calendar</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">          var datepicker = new Calendar.DatePicker(&#123;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            trigger:'.calendar',</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            autoRender : true</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">          &#125;);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- script end --&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">列表元素</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo-content"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> &gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list1"</span>  <span class="attr">class</span>=<span class="string">"bui-select-list"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-value</span>=<span class="string">"1"</span>&gt;</span>选项一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-value</span>=<span class="string">"2"</span>&gt;</span>选项二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-value</span>=<span class="string">"3"</span>&gt;</span>选项三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">按钮组</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"button-group"</span> <span class="attr">style</span>=<span class="string">"margin: 9px 0;"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span>Left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span>Middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span>Right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">相关css</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">.pull-right&#123;float: right;&#125;   右浮动</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">.pull-left&#123;float: left;&#125;   左浮动</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">.pull-none&#123;float: none;&#125;   无浮动</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">.hide&#123;display: none;&#125;  隐藏元素</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">.show&#123;display: block;&#125;   显示元素</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">.invisible&#123;visibility: hidden;&#125;  占位隐藏</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">.bordered&#123;border:1px solid @borderColor;.border-radius(@radius);&#125;  设置圆角边框</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">.centered&#123;text-align:center;&#125;  元素居中</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">展开、收起 元素</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">class</span>=<span class="string">"button button-small"</span>&gt;</span>展开/折叠<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn3"</span>  <span class="attr">class</span>=<span class="string">"button button-small"</span>&gt;</span>清空数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"J_Form"</span> <span class="attr">class</span>=<span class="string">"form-horizontal"</span> <span class="attr">data-depends</span>=<span class="string">"&#123;'#btn:click':['toggle'],'#btn3:click':['clearFields']&#125;"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">启用、禁用 元素</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>  <span class="attr">class</span>=<span class="string">"button button-small"</span>&gt;</span>禁用分组<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span>  <span class="attr">class</span>=<span class="string">"button button-small"</span>&gt;</span>可用分组<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"range"</span> <span class="attr">class</span>=<span class="string">"controls bui-form-group"</span> <span class="attr">data-depends</span>=<span class="string">"&#123;'#btn1:click':['disable'],'#btn2:click':['enable']&#125;"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"start"</span> <span class="attr">class</span>=<span class="string">"calendar"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span> - <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"end"</span> <span class="attr">class</span>=<span class="string">"calendar"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">下拉多选</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"controls bui-form-field-select"</span> <span class="attr">data-items</span>=<span class="string">"&#123;'1':'游泳','2':'跑步','3':'爬山'&#125;"</span> <span class="attr">data-select</span>=<span class="string">"&#123;multipleSelect:true&#125;"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"love"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"1,2"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  正常文本<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"auxiliary-text"</span>&gt;</span>通篇辅助型中文<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">批量删除的垃圾桶图标向上偏移得厉害。用 vertical-align: text-bottom 比较好</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">信息提示:</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"span8 well"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"t2"</span> <span class="attr">style</span>=<span class="string">"margin-bottom: 0;"</span>&gt;</span>Tight pants next level keffiyeh <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">title</span>=<span class="string">"Default tooltip"</span>&gt;</span>you probably<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">var tips2 = new Tooltip.Tips(&#123;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        tip : &#123;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">          trigger : '#t2 a', //出现此样式的元素显示tip</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">          alignType : 'top', //默认方向</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">          elCls : 'tips  tips-notice',</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">          titleTpl : '<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"x-icon x-icon-small x-icon-warning"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon icon-white icon-volume-up"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips-content"</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">          offset : 10 //距离左边的距离</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      &#125;);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">tips2.render();</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">//--------------</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">利用.table-striped可以给<span class="tag">&lt;<span class="name">tbody</span>&gt;</span>之内的每一样增加斑马条纹样式。</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">利用.table-bordered为表格和其中的每个单元格增加边框。</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">利用.table-hover可以让<span class="tag">&lt;<span class="name">tbody</span>&gt;</span>中的每一行响应鼠标悬停状态。</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">利用.table-condensed可以让表格更加紧凑，单元格中的内部（padding）均会减半。</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">将任何.table包裹在.table-responsive中即可创建响应式表格，其会在小屏幕设备上（小于768px）水平滚动。当屏幕大于768px宽度时，水平滚动条消失。</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 使用thinkphp  接收 中文 参数时, I 不需要过滤 I('参数','默认值','空:不过滤');</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">//js 不缓存</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/Public/js/tm/function.js?randomId=&lt;?php echo date('YmdHis');?&gt;.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">html_entity_decode  html 实体化</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">strip_tags 函数可以方便地去除 HTML 标签。</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">EQ 等于（=） equal</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">NEQ 不等于（<span class="tag">&lt;&gt;</span>） not equal</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">GT 大于（&gt;） greater</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">EGT 大于等于（&gt;=） equal or greater</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">LT 小于（<span class="tag">&lt;<span class="name">）</span> <span class="attr">less</span> <span class="attr">than</span></span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">ELT 小于等于（<span class="tag">&lt;<span class="name">=）</span> <span class="attr">equal</span> <span class="attr">or</span> <span class="attr">less</span> <span class="attr">than</span></span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">----------------------</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">ctrl+d 选词</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">ctrl+alt+↑ 批量选择</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">ctrl+shift+a 以等号整理代码</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">ctrl+j 合并一行</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">ctrl+p 搜索文件</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">ctrl+r 定位方法</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// jquery 异步上传</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">var aQuery = $("#T_form").serializeArray();</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">//alert(aQuery);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">$.post("/plan/chuli/jhtj",aQuery,function(data)&#123;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">alert(data);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&#125;);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">======================================================</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">strstr 显示第一次找到，要查找的字符串，以及后面的字符串。</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">strrchr 显示最后一次找到，要查找的字符串，以及后面的字符串。</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">$email = 'test@test.com@jb51.net';</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">$domain = strstr($email, '@');</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">echo "strstr 测试结果 $domain<span class="tag">&lt;<span class="name">br</span>&gt;</span>";</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">$domain = strrchr($email, '@');</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">echo "strrchr 测试结果 $domain<span class="tag">&lt;<span class="name">br</span>&gt;</span>";</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">结果如下：</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">strstr 测试结果 @test.com@jb51.net</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">strrchr 测试结果 @jb51.net</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">================================================================</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">strstr是大小写敏感的。</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">stristr是大小写不敏感的。</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">复制代码 代码如下:</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="php"><span class="meta">&lt;?php</span></span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">$email = 'zhangYing@jb51.net';</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">$domain = strstr($email, 'y');</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">echo "strstr 测试结果 $domain<span class="tag">&lt;<span class="name">br</span>&gt;</span>";</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">$domain = stristr($email, 'y');</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">echo "stristr 测试结果 $domain<span class="tag">&lt;<span class="name">br</span>&gt;</span>";</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">?&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">结果如下：</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">strstr 测试结果 jb51.net</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">stristr 测试结果 Ying@jb51.net</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">=============================================================</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">strstr 是匹配后截取。</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">substr 是不匹配，根据起始位置，进行截取。</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">复制代码 代码如下:</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="php"><span class="meta">&lt;?php</span></span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">$email = 'zhangYing@jb51.net';</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">$domain = strstr($email, 'y');</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">echo "strstr 测试结果 $domain<span class="tag">&lt;<span class="name">br</span>&gt;</span>";</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">$domain = substr($email,-7);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">echo "substr 测试结果 $domain<span class="tag">&lt;<span class="name">br</span>&gt;</span>";</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">?&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">结果如下:</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">strstr 测试结果 jb51.net</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">substr 测试结果 jb51.net</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bui </tag>
            
            <tag> jquery </tag>
            
            <tag> js </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[又是充实的一天]]></title>
      <url>/2015/05/07/%E5%8F%88%E6%98%AF%E5%85%85%E5%AE%9E%E7%9A%84%E4%B8%80%E5%A4%A9/</url>
      <content type="html"><![CDATA[<p>又是充实的一天，今天和小伙伴们把阿里写的gui看了下，感觉自己的水平与大神们相比还差的好远，一定要继续努力啊，哼哼，早晚有一天我要让自己也成为权威！</p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 吕梁 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构：删除二叉排序树上的结点]]></title>
      <url>/2015/05/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91%E4%B8%8A%E7%9A%84%E7%BB%93%E7%82%B9/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">#include <span class="string">"malloc.h"</span></span><br><span class="line">#include <span class="string">"stdio.h"</span></span><br><span class="line"></span><br><span class="line">typedef struct binode</span><br><span class="line">&#123;</span><br><span class="line">    int <span class="keyword">data</span>;</span><br><span class="line">    struct binode * lchild,* rchild;</span><br><span class="line">&#125;BITNODE,* BITREE;</span><br><span class="line"></span><br><span class="line">BITREE insertbst(BITREE s, BITREE t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (t==NULL)</span><br><span class="line">        t = s;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="function"><span class="title">if</span>(s-&gt;</span><span class="function"><span class="title">data</span>&lt;t-&gt;</span><span class="keyword">data</span>)</span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">lchild</span> = insertbst(s,t-&gt;</span>lchild);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="function"><span class="title">t</span>-&gt;</span><span class="function"><span class="title">rchild</span> = insertbst(s,t-&gt;</span>rchild);</span><br><span class="line"></span><br><span class="line">return t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BITREE createordbt()</span><br><span class="line">&#123;</span><br><span class="line">    BITREE s,t;</span><br><span class="line">    int x;</span><br><span class="line">    t = NULL;</span><br><span class="line">    printf(<span class="string">"\ninput data please:"</span>);</span><br><span class="line">    scanf(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s = (BITREE)malloc(sizeof(BITREE));</span><br><span class="line">        <span class="function"><span class="title">s</span>-&gt;</span><span class="keyword">data</span> = x;</span><br><span class="line">        <span class="function"><span class="title">s</span>-&gt;</span>lchild = NULL;</span><br><span class="line">        <span class="function"><span class="title">s</span>-&gt;</span>rchild = NULL;</span><br><span class="line">        t = insertbst(s,t);</span><br><span class="line">        scanf(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    return t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BITREE delete(BITREE t,int key)</span><br><span class="line">&#123;</span><br><span class="line">    BITREE p,q,r,s;</span><br><span class="line">    p = t;</span><br><span class="line">    q = NULL;</span><br><span class="line">    <span class="function"><span class="title">while</span>((p != NULL) &amp;&amp; (p-&gt;</span><span class="keyword">data</span> != key))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="title">if</span> (key == p-&gt;</span><span class="keyword">data</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="function"><span class="title">if</span>(key&lt;p-&gt;</span><span class="keyword">data</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            q = p;</span><br><span class="line">            <span class="function"><span class="title">p</span> = p-&gt;</span>lchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            q = p;</span><br><span class="line">            <span class="function"><span class="title">p</span> = p-&gt;</span>rchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p == NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(<span class="string">"no find"</span>);</span><br><span class="line">            exit();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="title">if</span>((p-&gt;</span><span class="function"><span class="title">lchild</span> == NULL) &amp;&amp; (p-&gt;</span>rchild == NULL))</span><br><span class="line">            <span class="keyword">if</span>(p == t)</span><br><span class="line">            t = NULL;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            <span class="function"><span class="title">if</span>(p == q-&gt;</span>lchild)</span><br><span class="line">            <span class="function"><span class="title">q</span>-&gt;</span>lchild = NULL;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            <span class="function"><span class="title">q</span>-&gt;</span>rchild = NULL;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            <span class="function"><span class="title">if</span>((p-&gt;</span><span class="function"><span class="title">lchild</span> == NULL) || (p-&gt;</span>rchild == NULL))</span><br><span class="line">            <span class="keyword">if</span>(p == t)</span><br><span class="line">            <span class="function"><span class="title">if</span>(p-&gt;</span>lchild == NULL)</span><br><span class="line">            <span class="function"><span class="title">t</span> = p -&gt;</span> rchild;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            <span class="function"><span class="title">t</span> = p -&gt;</span> lchild;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="function"><span class="title">if</span>((p == q -&gt;</span> <span class="function"><span class="title">lchild</span>) &amp;&amp; (p -&gt;</span> lchild != NULL))</span><br><span class="line">                <span class="function"><span class="title">q</span> -&gt;</span> <span class="function"><span class="title">lchild</span> = p -&gt;</span> lchild;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="function"><span class="title">if</span>((p == q -&gt;</span> <span class="function"><span class="title">lchild</span>) &amp;&amp; (p -&gt;</span> rchild != NULL))</span><br><span class="line">                <span class="function"><span class="title">q</span> -&gt;</span> <span class="function"><span class="title">lchild</span> = p -&gt;</span> rchild;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="function"><span class="title">if</span>((p == q -&gt;</span> <span class="function"><span class="title">rchild</span>) &amp;&amp; (p -&gt;</span> lchild != NULL))</span><br><span class="line">                <span class="function"><span class="title">q</span> -&gt;</span> <span class="function"><span class="title">rchild</span> = p -&gt;</span> lchild;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="function"><span class="title">if</span>((p == q -&gt;</span> <span class="function"><span class="title">rchild</span>) &amp;&amp; (p -&gt;</span> rchild != NULL))</span><br><span class="line">                <span class="function"><span class="title">q</span> -&gt;</span> <span class="function"><span class="title">rchild</span> = p -&gt;</span> rchild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            <span class="function"><span class="title">if</span>((p -&gt;</span> <span class="function"><span class="title">lchild</span> != NULL) &amp;&amp; (p -&gt;</span> rchild != NULL))</span><br><span class="line">            &#123;</span><br><span class="line">                r = p;</span><br><span class="line">                <span class="function"><span class="title">s</span> = p -&gt;</span> lchild;</span><br><span class="line">                <span class="function"><span class="title">while</span>(s -&gt;</span> rchild != NULL)</span><br><span class="line">                &#123;</span><br><span class="line">                    r = s;</span><br><span class="line">                    <span class="function"><span class="title">s</span> = s -&gt;</span> rchild;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function"><span class="title">p</span> -&gt;</span> <span class="function"><span class="title">data</span> = s -&gt;</span> <span class="keyword">data</span>;</span><br><span class="line">                <span class="keyword">if</span>(r == p)</span><br><span class="line">                <span class="function"><span class="title">p</span> -&gt;</span> <span class="function"><span class="title">lchild</span> = s -&gt;</span> lchild;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="function"><span class="title">r</span> -&gt;</span> <span class="function"><span class="title">rchild</span> = s -&gt;</span> lchild;</span><br><span class="line">                p = s;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        free(p);</span><br><span class="line">        return(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inorder(BITREE t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(t != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="title">inorder</span>(t -&gt;</span> lchild);</span><br><span class="line">        <span class="function"><span class="title">printf</span>("%d",t -&gt;</span> <span class="keyword">data</span>);</span><br><span class="line">        <span class="function"><span class="title">inorder</span>(t -&gt;</span> rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    BITREE root;</span><br><span class="line">    int x;</span><br><span class="line">    root = createordbt();</span><br><span class="line">    printf(<span class="string">"the inorder is:"</span>);</span><br><span class="line">    inorder(root);</span><br><span class="line">    printf(<span class="string">"\ninput a deleted detum to x:"</span>);</span><br><span class="line">    scanf(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">    root = delete(root,x);</span><br><span class="line">    printf(<span class="string">"the inorder is:"</span>);</span><br><span class="line">    inorder(root);</span><br><span class="line">    printf(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//input:6 4 8 3 7 9 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//input a deleted detum to x: 8</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构：二叉排序树]]></title>
      <url>/2015/05/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"malloc.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">binode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"> <span class="keyword">int</span> data;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">binode</span> * <span class="title">lchild</span>,* <span class="title">rchild</span>;</span></span><br><span class="line">&#125;BITNODE,* BITREE;</span><br><span class="line"></span><br><span class="line"><span class="function">BITREE <span class="title">insertbst</span><span class="params">(BITREE s,BITREE t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(t == <span class="literal">NULL</span>)</span><br><span class="line">  t = s;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">if</span>(s-&gt;data&lt;t-&gt;data)</span><br><span class="line">   t-&gt;lchild = insertbst(s,t-&gt;lchild);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">   t-&gt;rchild = insertbst(s,t-&gt;rchild);</span><br><span class="line"> <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BITREE <span class="title">createordbt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> BITREE s,t;</span><br><span class="line"> <span class="keyword">int</span> x;</span><br><span class="line"> t = <span class="literal">NULL</span>;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"\ninput data please:"</span>);</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line"> <span class="keyword">while</span>(x!=<span class="number">0</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  s = (BITREE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BITREE));</span><br><span class="line">  s-&gt;data = x;</span><br><span class="line">  s-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">  s-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">  t = insertbst(s,t);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(BITREE t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  inorder(t-&gt;lchild);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d"</span>,t-&gt;data);</span><br><span class="line">  inorder(t-&gt;rchild);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line"> BITREE root;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"> root = createordbt();</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"\nthe inorder is:"</span>);</span><br><span class="line"> inorder(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//input: 3 5 6 2 8 5 0</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最后总结一下今天学的东西]]></title>
      <url>/2015/05/06/%E6%9C%80%E5%90%8E%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8B%E4%BB%8A%E5%A4%A9%E5%AD%A6%E7%9A%84%E4%B8%9C%E8%A5%BF/</url>
      <content type="html"><![CDATA[<p>最后总结一下今天学的东西，</p>
<a id="more"></a>
<p>1.ecshop中多表操作频繁，尤其是goods表依赖的表太多，自己得抽时间把高性能mysql好好读一遍，乔老师大爱你！！哈哈。</p>
<p>2.form表单中name值是可以为数组的，后台接受的时候也要用数组，具体的适用场景我还有点迷糊，过几天想通了再记下来。</p>
<p>3.STBLOG中的权限验证写的很不错，主要体现在高度模块化上，而不是自己写的时候那样依然是面向过程的思想，这一点短期内要想有大的提升恐怕自己做不到，但也一定要努力啊！！小贺子。</p>
<p>4.php超全局变量的流程分析记在了那本黑色的笔记本上，想不起来的时候记得看一看啊，笨蛋！</p>
<p>5.linux的一点点感触，习惯用命令之后真的是大爱它了，比windows方便多了，哈哈，有时间找一些常用软件的源，除了这点不是很方便，剩下的已经基本适应。</p>
<p>今天就这样吧，明天还要上数据结构的课，虽然自己的基础比较差，但比起他们来也是超出一大截的，奇怪的是你居然还装的这么好，哈哈。</p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 吕梁 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[每天都学到这么晚]]></title>
      <url>/2015/05/06/%E6%AF%8F%E5%A4%A9%E9%83%BD%E5%AD%A6%E5%88%B0%E8%BF%99%E4%B9%88%E6%99%9A/</url>
      <content type="html"><![CDATA[<p>已经很晚了，想要睡了，每天都学到这么晚的时候才想到要注意身体，我相信这是每个父母亲都会和子女们说的话，同样，我的爱人也要和我说要注意身体，好好休息，老婆，爸爸妈妈，我爱你们，我一定要证明给你们看，贺汉林他是那么的独一无二，他一定会成为一个权威！</p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 吕梁 </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[About]]></title>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<h4 id="he，-无名小卒"><a href="#he，-无名小卒" class="headerlink" title="he， 无名小卒"></a>he， 无名小卒</h4><h4 id="我是一名学生"><a href="#我是一名学生" class="headerlink" title="我是一名学生"></a>我是一名学生</h4><h4 id="应该会毕业于山西省吕梁学院计算机系"><a href="#应该会毕业于山西省吕梁学院计算机系" class="headerlink" title="应该会毕业于山西省吕梁学院计算机系"></a>应该会毕业于山西省吕梁学院计算机系</h4><h4 id="这是一座很少人知晓的学校"><a href="#这是一座很少人知晓的学校" class="headerlink" title="这是一座很少人知晓的学校"></a>这是一座很少人知晓的学校</h4><h4 id="这边很穷，在山里，但这里的人很朴实"><a href="#这边很穷，在山里，但这里的人很朴实" class="headerlink" title="这边很穷，在山里，但这里的人很朴实"></a>这边很穷，在山里，但这里的人很朴实</h4><h4 id="这里有一群与我志同道合的朋友"><a href="#这里有一群与我志同道合的朋友" class="headerlink" title="这里有一群与我志同道合的朋友"></a>这里有一群与我志同道合的朋友</h4><h4 id="写博客不是为了出名"><a href="#写博客不是为了出名" class="headerlink" title="写博客不是为了出名"></a>写博客不是为了出名</h4><h4 id="我的写的东西也毫无水平"><a href="#我的写的东西也毫无水平" class="headerlink" title="我的写的东西也毫无水平"></a>我的写的东西也毫无水平</h4><h4 id="我只是希望把这些记忆留存住"><a href="#我只是希望把这些记忆留存住" class="headerlink" title="我只是希望把这些记忆留存住"></a>我只是希望把这些记忆留存住</h4><h4 id="无论是开心还是难过"><a href="#无论是开心还是难过" class="headerlink" title="无论是开心还是难过"></a>无论是开心还是难过</h4><h4 id="它们都是那么的令人难忘"><a href="#它们都是那么的令人难忘" class="headerlink" title="它们都是那么的令人难忘"></a>它们都是那么的令人难忘</h4><blockquote>
<p>博客： hexo， 分别部署到<code>github pages</code> 和 <code>coding pages</code>， 并利用<code>cloudxns</code>的cnamex dns实现负载均衡</p>
<p>github： <a href="http://github.com/hehanlin" target="_blank" rel="noopener">hehanlin</a></p>
</blockquote>
]]></content>
    </entry>
    
  
</search>
